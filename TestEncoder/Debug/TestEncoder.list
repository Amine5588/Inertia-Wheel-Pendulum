
TestEncoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000912c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  080092e0  080092e0  000192e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009900  08009900  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009900  08009900  00019900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009908  08009908  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009908  08009908  00019908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800990c  0800990c  0001990c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000001e8  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003c4  200003c4  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d89f  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c9b  00000000  00000000  0002daab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  0002f748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf8  00000000  00000000  000303f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245be  00000000  00000000  00030ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e387  00000000  00000000  000555ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbcbf  00000000  00000000  00063935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013f5f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bf8  00000000  00000000  0013f644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080092c4 	.word	0x080092c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	080092c4 	.word	0x080092c4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	0000      	movs	r0, r0
	...

08000f70 <Controller_SysTick>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Controller_SysTick(){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	static int n_m,n_p;

	if(n_m >= (M_Ts*1000)){
 8000f74:	4b26      	ldr	r3, [pc, #152]	; (8001010 <Controller_SysTick+0xa0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b09      	cmp	r3, #9
 8000f7a:	dd05      	ble.n	8000f88 <Controller_SysTick+0x18>
		// gather state variables
		motor_variables_iter();
 8000f7c:	f000 fab0 	bl	80014e0 <motor_variables_iter>
		n_m=0;
 8000f80:	4b23      	ldr	r3, [pc, #140]	; (8001010 <Controller_SysTick+0xa0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	e004      	b.n	8000f92 <Controller_SysTick+0x22>
	}else{
		n_m++;
 8000f88:	4b21      	ldr	r3, [pc, #132]	; (8001010 <Controller_SysTick+0xa0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	4a20      	ldr	r2, [pc, #128]	; (8001010 <Controller_SysTick+0xa0>)
 8000f90:	6013      	str	r3, [r2, #0]
	}
	if(n_p >= (P_Ts*1000)){
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <Controller_SysTick+0xa4>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b31      	cmp	r3, #49	; 0x31
 8000f98:	dd2d      	ble.n	8000ff6 <Controller_SysTick+0x86>
		pendulum_variables_iter();
 8000f9a:	f000 fc09 	bl	80017b0 <pendulum_variables_iter>
		sprintf((char*)Velocity_str,"%.2f\n ",pendulum.velocity) ;
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <Controller_SysTick+0xa8>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fae0 	bl	8000568 <__aeabi_f2d>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	491b      	ldr	r1, [pc, #108]	; (800101c <Controller_SysTick+0xac>)
 8000fae:	481c      	ldr	r0, [pc, #112]	; (8001020 <Controller_SysTick+0xb0>)
 8000fb0:	f003 fefa 	bl	8004da8 <siprintf>
		HAL_UART_Transmit(&huart3, Velocity_str, 10, 0xFFFF);
 8000fb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fb8:	220a      	movs	r2, #10
 8000fba:	4919      	ldr	r1, [pc, #100]	; (8001020 <Controller_SysTick+0xb0>)
 8000fbc:	4819      	ldr	r0, [pc, #100]	; (8001024 <Controller_SysTick+0xb4>)
 8000fbe:	f002 fee2 	bl	8003d86 <HAL_UART_Transmit>


		if(fabs(pendulum.position) < P_SWITCH_ANGLE){
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <Controller_SysTick+0xa8>)
 8000fc4:	edd3 7a00 	vldr	s15, [r3]
 8000fc8:	eef0 7ae7 	vabs.f32	s15, s15
 8000fcc:	ee17 0a90 	vmov	r0, s15
 8000fd0:	f7ff faca 	bl	8000568 <__aeabi_f2d>
 8000fd4:	a30c      	add	r3, pc, #48	; (adr r3, 8001008 <Controller_SysTick+0x98>)
 8000fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fda:	f7ff fd8f 	bl	8000afc <__aeabi_dcmplt>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d002      	beq.n	8000fea <Controller_SysTick+0x7a>
			pendulum_LQR();
 8000fe4:	f000 fd50 	bl	8001a88 <pendulum_LQR>
 8000fe8:	e001      	b.n	8000fee <Controller_SysTick+0x7e>

			//pendulum_P();
		}else{
			pendulum_swingup();
 8000fea:	f000 fda9 	bl	8001b40 <pendulum_swingup>
			//pendulum_disable();
		}
		n_p = 0;
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <Controller_SysTick+0xa4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]

	}else{
		n_p++;
	}
}
 8000ff4:	e004      	b.n	8001000 <Controller_SysTick+0x90>
		n_p++;
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <Controller_SysTick+0xa4>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	4a05      	ldr	r2, [pc, #20]	; (8001014 <Controller_SysTick+0xa4>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	f3af 8000 	nop.w
 8001008:	769cf255 	.word	0x769cf255
 800100c:	3fd41b2f 	.word	0x3fd41b2f
 8001010:	2000036c 	.word	0x2000036c
 8001014:	20000370 	.word	0x20000370
 8001018:	2000037c 	.word	0x2000037c
 800101c:	080092e0 	.word	0x080092e0
 8001020:	2000031c 	.word	0x2000031c
 8001024:	200002d0 	.word	0x200002d0

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102c:	f001 f8e8 	bl	8002200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001030:	f000 f822 	bl	8001078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001034:	f000 f9b6 	bl	80013a4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001038:	f000 f87e 	bl	8001138 <MX_TIM2_Init>
  MX_TIM3_Init();
 800103c:	f000 f8e0 	bl	8001200 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001040:	f000 f932 	bl	80012a8 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001044:	f000 f984 	bl	8001350 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

	// init encoders
	HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8001048:	213c      	movs	r1, #60	; 0x3c
 800104a:	4808      	ldr	r0, [pc, #32]	; (800106c <main+0x44>)
 800104c:	f002 fa0c 	bl	8003468 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8001050:	213c      	movs	r1, #60	; 0x3c
 8001052:	4807      	ldr	r0, [pc, #28]	; (8001070 <main+0x48>)
 8001054:	f002 fa08 	bl	8003468 <HAL_TIM_Encoder_Start>
	// init PWM
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8001058:	2100      	movs	r1, #0
 800105a:	4806      	ldr	r0, [pc, #24]	; (8001074 <main+0x4c>)
 800105c:	f002 f896 	bl	800318c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8001060:	210c      	movs	r1, #12
 8001062:	4804      	ldr	r0, [pc, #16]	; (8001074 <main+0x4c>)
 8001064:	f002 f892 	bl	800318c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001068:	e7fe      	b.n	8001068 <main+0x40>
 800106a:	bf00      	nop
 800106c:	20000288 	.word	0x20000288
 8001070:	20000240 	.word	0x20000240
 8001074:	200001f8 	.word	0x200001f8

08001078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b094      	sub	sp, #80	; 0x50
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	2230      	movs	r2, #48	; 0x30
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f003 fa1c 	bl	80044c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	4b23      	ldr	r3, [pc, #140]	; (8001130 <SystemClock_Config+0xb8>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	4a22      	ldr	r2, [pc, #136]	; (8001130 <SystemClock_Config+0xb8>)
 80010a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010aa:	6413      	str	r3, [r2, #64]	; 0x40
 80010ac:	4b20      	ldr	r3, [pc, #128]	; (8001130 <SystemClock_Config+0xb8>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <SystemClock_Config+0xbc>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010c4:	4a1b      	ldr	r2, [pc, #108]	; (8001134 <SystemClock_Config+0xbc>)
 80010c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	4b19      	ldr	r3, [pc, #100]	; (8001134 <SystemClock_Config+0xbc>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d8:	2302      	movs	r3, #2
 80010da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010dc:	2301      	movs	r3, #1
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e0:	2310      	movs	r3, #16
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e8:	f107 0320 	add.w	r3, r7, #32
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fba5 	bl	800283c <HAL_RCC_OscConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80010f8:	f000 f9a6 	bl	8001448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fc:	230f      	movs	r3, #15
 80010fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001100:	2300      	movs	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f001 fe08 	bl	8002d2c <HAL_RCC_ClockConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001122:	f000 f991 	bl	8001448 <Error_Handler>
  }
}
 8001126:	bf00      	nop
 8001128:	3750      	adds	r7, #80	; 0x50
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40007000 	.word	0x40007000

08001138 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113e:	f107 0320 	add.w	r3, r7, #32
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
 8001156:	615a      	str	r2, [r3, #20]
 8001158:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800115a:	4b28      	ldr	r3, [pc, #160]	; (80011fc <MX_TIM2_Init+0xc4>)
 800115c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001160:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8001162:	4b26      	ldr	r3, [pc, #152]	; (80011fc <MX_TIM2_Init+0xc4>)
 8001164:	220a      	movs	r2, #10
 8001166:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <MX_TIM2_Init+0xc4>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800116e:	4b23      	ldr	r3, [pc, #140]	; (80011fc <MX_TIM2_Init+0xc4>)
 8001170:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001174:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <MX_TIM2_Init+0xc4>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <MX_TIM2_Init+0xc4>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001182:	481e      	ldr	r0, [pc, #120]	; (80011fc <MX_TIM2_Init+0xc4>)
 8001184:	f001 ffb2 	bl	80030ec <HAL_TIM_PWM_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800118e:	f000 f95b 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800119a:	f107 0320 	add.w	r3, r7, #32
 800119e:	4619      	mov	r1, r3
 80011a0:	4816      	ldr	r0, [pc, #88]	; (80011fc <MX_TIM2_Init+0xc4>)
 80011a2:	f002 fd27 	bl	8003bf4 <HAL_TIMEx_MasterConfigSynchronization>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80011ac:	f000 f94c 	bl	8001448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b0:	2360      	movs	r3, #96	; 0x60
 80011b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2200      	movs	r2, #0
 80011c4:	4619      	mov	r1, r3
 80011c6:	480d      	ldr	r0, [pc, #52]	; (80011fc <MX_TIM2_Init+0xc4>)
 80011c8:	f002 f9dc 	bl	8003584 <HAL_TIM_PWM_ConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80011d2:	f000 f939 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	220c      	movs	r2, #12
 80011da:	4619      	mov	r1, r3
 80011dc:	4807      	ldr	r0, [pc, #28]	; (80011fc <MX_TIM2_Init+0xc4>)
 80011de:	f002 f9d1 	bl	8003584 <HAL_TIM_PWM_ConfigChannel>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80011e8:	f000 f92e 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011ec:	4803      	ldr	r0, [pc, #12]	; (80011fc <MX_TIM2_Init+0xc4>)
 80011ee:	f000 fe59 	bl	8001ea4 <HAL_TIM_MspPostInit>

}
 80011f2:	bf00      	nop
 80011f4:	3728      	adds	r7, #40	; 0x28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200001f8 	.word	0x200001f8

08001200 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08c      	sub	sp, #48	; 0x30
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	2224      	movs	r2, #36	; 0x24
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f003 f958 	bl	80044c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800121c:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <MX_TIM3_Init+0xa0>)
 800121e:	4a21      	ldr	r2, [pc, #132]	; (80012a4 <MX_TIM3_Init+0xa4>)
 8001220:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <MX_TIM3_Init+0xa0>)
 8001224:	2200      	movs	r2, #0
 8001226:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001228:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <MX_TIM3_Init+0xa0>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000;
 800122e:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <MX_TIM3_Init+0xa0>)
 8001230:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001234:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_TIM3_Init+0xa0>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <MX_TIM3_Init+0xa0>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001242:	2303      	movs	r3, #3
 8001244:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001246:	2302      	movs	r3, #2
 8001248:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800124a:	2301      	movs	r3, #1
 800124c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800125a:	2301      	movs	r3, #1
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	4619      	mov	r1, r3
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <MX_TIM3_Init+0xa0>)
 800126e:	f002 f855 	bl	800331c <HAL_TIM_Encoder_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001278:	f000 f8e6 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	4619      	mov	r1, r3
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_TIM3_Init+0xa0>)
 800128a:	f002 fcb3 	bl	8003bf4 <HAL_TIMEx_MasterConfigSynchronization>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001294:	f000 f8d8 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	3730      	adds	r7, #48	; 0x30
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000240 	.word	0x20000240
 80012a4:	40000400 	.word	0x40000400

080012a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	; 0x30
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	2224      	movs	r2, #36	; 0x24
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f003 f904 	bl	80044c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012c4:	4b20      	ldr	r3, [pc, #128]	; (8001348 <MX_TIM4_Init+0xa0>)
 80012c6:	4a21      	ldr	r2, [pc, #132]	; (800134c <MX_TIM4_Init+0xa4>)
 80012c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012ca:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <MX_TIM4_Init+0xa0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <MX_TIM4_Init+0xa0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000;
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <MX_TIM4_Init+0xa0>)
 80012d8:	f64e 2260 	movw	r2, #60000	; 0xea60
 80012dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012de:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <MX_TIM4_Init+0xa0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <MX_TIM4_Init+0xa0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012ea:	2303      	movs	r3, #3
 80012ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80012ee:	2302      	movs	r3, #2
 80012f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012f2:	2301      	movs	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 80012fa:	2305      	movs	r3, #5
 80012fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80012fe:	2302      	movs	r3, #2
 8001300:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001302:	2301      	movs	r3, #1
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 800130a:	2305      	movs	r3, #5
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	4619      	mov	r1, r3
 8001314:	480c      	ldr	r0, [pc, #48]	; (8001348 <MX_TIM4_Init+0xa0>)
 8001316:	f002 f801 	bl	800331c <HAL_TIM_Encoder_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001320:	f000 f892 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_TIM4_Init+0xa0>)
 8001332:	f002 fc5f 	bl	8003bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800133c:	f000 f884 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	3730      	adds	r7, #48	; 0x30
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000288 	.word	0x20000288
 800134c:	40000800 	.word	0x40000800

08001350 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_USART3_UART_Init+0x4c>)
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <MX_USART3_UART_Init+0x50>)
 8001358:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <MX_USART3_UART_Init+0x4c>)
 800135c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001360:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_USART3_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_USART3_UART_Init+0x4c>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_USART3_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_USART3_UART_Init+0x4c>)
 8001376:	220c      	movs	r2, #12
 8001378:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <MX_USART3_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_USART3_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_USART3_UART_Init+0x4c>)
 8001388:	f002 fcb0 	bl	8003cec <HAL_UART_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001392:	f000 f859 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200002d0 	.word	0x200002d0
 80013a0:	40004800 	.word	0x40004800

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <MX_GPIO_Init+0x9c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a1f      	ldr	r2, [pc, #124]	; (8001440 <MX_GPIO_Init+0x9c>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <MX_GPIO_Init+0x9c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <MX_GPIO_Init+0x9c>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a18      	ldr	r2, [pc, #96]	; (8001440 <MX_GPIO_Init+0x9c>)
 80013e0:	f043 0310 	orr.w	r3, r3, #16
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b16      	ldr	r3, [pc, #88]	; (8001440 <MX_GPIO_Init+0x9c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_GPIO_Init+0x9c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a11      	ldr	r2, [pc, #68]	; (8001440 <MX_GPIO_Init+0x9c>)
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_GPIO_Init+0x9c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M2_EN_Pin|M2_CW_Pin|M2_CCW_Pin, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <MX_GPIO_Init+0xa0>)
 8001416:	f001 f9f7 	bl	8002808 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M2_EN_Pin M2_CW_Pin M2_CCW_Pin */
  GPIO_InitStruct.Pin = M2_EN_Pin|M2_CW_Pin|M2_CCW_Pin;
 800141a:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 800141e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	2301      	movs	r3, #1
 8001422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	4619      	mov	r1, r3
 8001432:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_GPIO_Init+0xa0>)
 8001434:	f001 f83c 	bl	80024b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001438:	bf00      	nop
 800143a:	3720      	adds	r7, #32
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40023800 	.word	0x40023800
 8001444:	40021000 	.word	0x40021000

08001448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800144c:	b672      	cpsid	i
}
 800144e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001450:	e7fe      	b.n	8001450 <Error_Handler+0x8>
	...

08001454 <motor_setPwm>:
/**
	function setting pwm duty cycle to the motor2
	input:
		pwm - int - [-100, 100]
*/
void motor_setPwm(int pwm){
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

	if(abs(pwm) > PWMmax){
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	bfb8      	it	lt
 8001462:	425b      	neglt	r3, r3
 8001464:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001468:	dd07      	ble.n	800147a <motor_setPwm+0x26>
		pwm = pwm > 0 ? PWMmax : -PWMmax;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	dd02      	ble.n	8001476 <motor_setPwm+0x22>
 8001470:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001474:	e000      	b.n	8001478 <motor_setPwm+0x24>
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <motor_setPwm+0x7c>)
 8001478:	607b      	str	r3, [r7, #4]
	}

	if(pwm == 0){
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10e      	bne.n	800149e <motor_setPwm+0x4a>
		// disable motor
		HAL_GPIO_WritePin(M2_EN_GPIO_Port, M2_EN_Pin, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001486:	4813      	ldr	r0, [pc, #76]	; (80014d4 <motor_setPwm+0x80>)
 8001488:	f001 f9be 	bl	8002808 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <motor_setPwm+0x84>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2200      	movs	r2, #0
 8001492:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4, 0);
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <motor_setPwm+0x84>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2200      	movs	r2, #0
 800149a:	641a      	str	r2, [r3, #64]	; 0x40
		return;
 800149c:	e014      	b.n	80014c8 <motor_setPwm+0x74>
	}else{
		// enable motor
		HAL_GPIO_WritePin(M2_EN_GPIO_Port,M2_EN_Pin,GPIO_PIN_SET);
 800149e:	2201      	movs	r2, #1
 80014a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014a4:	480b      	ldr	r0, [pc, #44]	; (80014d4 <motor_setPwm+0x80>)
 80014a6:	f001 f9af 	bl	8002808 <HAL_GPIO_WritePin>
		if(pwm > 0){
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	dd04      	ble.n	80014ba <motor_setPwm+0x66>
			//HAL_GPIO_WritePin(GPIOE,M2_CCW_Pin,GPIO_PIN_RESET);
			//HAL_GPIO_WritePin(GPIOE,M2_CW_Pin,GPIO_PIN_SET);
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, pwm);
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <motor_setPwm+0x84>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	635a      	str	r2, [r3, #52]	; 0x34
 80014b8:	e006      	b.n	80014c8 <motor_setPwm+0x74>
		}else if(pwm < 0){
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	da03      	bge.n	80014c8 <motor_setPwm+0x74>
			//HAL_GPIO_WritePin(GPIOE,M2_CW_Pin,GPIO_PIN_RESET);
			//HAL_GPIO_WritePin(GPIOE,M2_CCW_Pin,GPIO_PIN_SET);
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4, pwm);
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <motor_setPwm+0x84>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	641a      	str	r2, [r3, #64]	; 0x40
		}
//		// set the pwm
//		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, abs(pwm));
	}
}
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	fffffc18 	.word	0xfffffc18
 80014d4:	40021000 	.word	0x40021000
 80014d8:	200001f8 	.word	0x200001f8
 80014dc:	00000000 	.word	0x00000000

080014e0 <motor_variables_iter>:
	with the sample time defined in the header file "Ts"

	The function updates the structure motor nad its properties
	motor.position and motor.velocity
*/
void motor_variables_iter(){
 80014e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
	static int cnt_1,real_count,d_cnt_1;
	static float dt; // sample time
	dt = (HAL_GetTick() - dt)*1e-3; // elapsed time calculation
 80014e8:	f000 fef0 	bl	80022cc <HAL_GetTick>
 80014ec:	ee07 0a90 	vmov	s15, r0
 80014f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014f4:	4ba6      	ldr	r3, [pc, #664]	; (8001790 <motor_variables_iter+0x2b0>)
 80014f6:	edd3 7a00 	vldr	s15, [r3]
 80014fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014fe:	ee17 0a90 	vmov	r0, s15
 8001502:	f7ff f831 	bl	8000568 <__aeabi_f2d>
 8001506:	a39a      	add	r3, pc, #616	; (adr r3, 8001770 <motor_variables_iter+0x290>)
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	f7ff f884 	bl	8000618 <__aeabi_dmul>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fb56 	bl	8000bc8 <__aeabi_d2f>
 800151c:	4603      	mov	r3, r0
 800151e:	4a9c      	ldr	r2, [pc, #624]	; (8001790 <motor_variables_iter+0x2b0>)
 8001520:	6013      	str	r3, [r2, #0]

	int cnt = TIM3->CNT;
 8001522:	4b9c      	ldr	r3, [pc, #624]	; (8001794 <motor_variables_iter+0x2b4>)
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	603b      	str	r3, [r7, #0]
	float d_cnt = cnt - cnt_1;
 8001528:	4b9b      	ldr	r3, [pc, #620]	; (8001798 <motor_variables_iter+0x2b8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	ee07 3a90 	vmov	s15, r3
 8001534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001538:	edc7 7a01 	vstr	s15, [r7, #4]

	// from [0,6000] to [-inf,inf]
	if (fabs(d_cnt) > CNT_MAX){
 800153c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001540:	eef0 7ae7 	vabs.f32	s15, s15
 8001544:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800179c <motor_variables_iter+0x2bc>
 8001548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800154c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001550:	dd51      	ble.n	80015f6 <motor_variables_iter+0x116>
		if(cnt > cnt_1){
 8001552:	4b91      	ldr	r3, [pc, #580]	; (8001798 <motor_variables_iter+0x2b8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	dd26      	ble.n	80015aa <motor_variables_iter+0xca>
			d_cnt = -(CNT_OVERFLOW - cnt + cnt_1);
 800155c:	6838      	ldr	r0, [r7, #0]
 800155e:	f7fe fff1 	bl	8000544 <__aeabi_i2d>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	a184      	add	r1, pc, #528	; (adr r1, 8001778 <motor_variables_iter+0x298>)
 8001568:	e9d1 0100 	ldrd	r0, r1, [r1]
 800156c:	f7fe fe9c 	bl	80002a8 <__aeabi_dsub>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4614      	mov	r4, r2
 8001576:	461d      	mov	r5, r3
 8001578:	4b87      	ldr	r3, [pc, #540]	; (8001798 <motor_variables_iter+0x2b8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ffe1 	bl	8000544 <__aeabi_i2d>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4620      	mov	r0, r4
 8001588:	4629      	mov	r1, r5
 800158a:	f7fe fe8f 	bl	80002ac <__adddf3>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fb17 	bl	8000bc8 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	ee07 3a90 	vmov	s15, r3
 80015a0:	eef1 7a67 	vneg.f32	s15, s15
 80015a4:	edc7 7a01 	vstr	s15, [r7, #4]
 80015a8:	e025      	b.n	80015f6 <motor_variables_iter+0x116>
		}else if(cnt < cnt_1){
 80015aa:	4b7b      	ldr	r3, [pc, #492]	; (8001798 <motor_variables_iter+0x2b8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	da20      	bge.n	80015f6 <motor_variables_iter+0x116>
			d_cnt = CNT_OVERFLOW - cnt_1 + cnt;
 80015b4:	4b78      	ldr	r3, [pc, #480]	; (8001798 <motor_variables_iter+0x2b8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ffc3 	bl	8000544 <__aeabi_i2d>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	a16d      	add	r1, pc, #436	; (adr r1, 8001778 <motor_variables_iter+0x298>)
 80015c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015c8:	f7fe fe6e 	bl	80002a8 <__aeabi_dsub>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4614      	mov	r4, r2
 80015d2:	461d      	mov	r5, r3
 80015d4:	6838      	ldr	r0, [r7, #0]
 80015d6:	f7fe ffb5 	bl	8000544 <__aeabi_i2d>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4620      	mov	r0, r4
 80015e0:	4629      	mov	r1, r5
 80015e2:	f7fe fe63 	bl	80002ac <__adddf3>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f7ff faeb 	bl	8000bc8 <__aeabi_d2f>
 80015f2:	4603      	mov	r3, r0
 80015f4:	607b      	str	r3, [r7, #4]
		}
	}

	// filtering d_pos Low pass
	d_cnt = (dt / (dt + M_WTf))*(d_cnt) + (1 - (dt / (dt + M_WTf)))*d_cnt_1;
 80015f6:	4b66      	ldr	r3, [pc, #408]	; (8001790 <motor_variables_iter+0x2b0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ffb4 	bl	8000568 <__aeabi_f2d>
 8001600:	4604      	mov	r4, r0
 8001602:	460d      	mov	r5, r1
 8001604:	4b62      	ldr	r3, [pc, #392]	; (8001790 <motor_variables_iter+0x2b0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ffad 	bl	8000568 <__aeabi_f2d>
 800160e:	a35c      	add	r3, pc, #368	; (adr r3, 8001780 <motor_variables_iter+0x2a0>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7fe fe4a 	bl	80002ac <__adddf3>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4620      	mov	r0, r4
 800161e:	4629      	mov	r1, r5
 8001620:	f7ff f924 	bl	800086c <__aeabi_ddiv>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4614      	mov	r4, r2
 800162a:	461d      	mov	r5, r3
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7fe ff9b 	bl	8000568 <__aeabi_f2d>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4620      	mov	r0, r4
 8001638:	4629      	mov	r1, r5
 800163a:	f7fe ffed 	bl	8000618 <__aeabi_dmul>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4690      	mov	r8, r2
 8001644:	4699      	mov	r9, r3
 8001646:	4b52      	ldr	r3, [pc, #328]	; (8001790 <motor_variables_iter+0x2b0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff8c 	bl	8000568 <__aeabi_f2d>
 8001650:	4604      	mov	r4, r0
 8001652:	460d      	mov	r5, r1
 8001654:	4b4e      	ldr	r3, [pc, #312]	; (8001790 <motor_variables_iter+0x2b0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff85 	bl	8000568 <__aeabi_f2d>
 800165e:	a348      	add	r3, pc, #288	; (adr r3, 8001780 <motor_variables_iter+0x2a0>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	f7fe fe22 	bl	80002ac <__adddf3>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4620      	mov	r0, r4
 800166e:	4629      	mov	r1, r5
 8001670:	f7ff f8fc 	bl	800086c <__aeabi_ddiv>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	f04f 0000 	mov.w	r0, #0
 800167c:	4948      	ldr	r1, [pc, #288]	; (80017a0 <motor_variables_iter+0x2c0>)
 800167e:	f7fe fe13 	bl	80002a8 <__aeabi_dsub>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4614      	mov	r4, r2
 8001688:	461d      	mov	r5, r3
 800168a:	4b46      	ldr	r3, [pc, #280]	; (80017a4 <motor_variables_iter+0x2c4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ff58 	bl	8000544 <__aeabi_i2d>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4620      	mov	r0, r4
 800169a:	4629      	mov	r1, r5
 800169c:	f7fe ffbc 	bl	8000618 <__aeabi_dmul>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4640      	mov	r0, r8
 80016a6:	4649      	mov	r1, r9
 80016a8:	f7fe fe00 	bl	80002ac <__adddf3>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f7ff fa88 	bl	8000bc8 <__aeabi_d2f>
 80016b8:	4603      	mov	r3, r0
 80016ba:	607b      	str	r3, [r7, #4]

	d_cnt_1 = d_cnt;
 80016bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80016c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c4:	ee17 2a90 	vmov	r2, s15
 80016c8:	4b36      	ldr	r3, [pc, #216]	; (80017a4 <motor_variables_iter+0x2c4>)
 80016ca:	601a      	str	r2, [r3, #0]
	real_count += d_cnt;
 80016cc:	4b36      	ldr	r3, [pc, #216]	; (80017a8 <motor_variables_iter+0x2c8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80016dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016e4:	ee17 2a90 	vmov	r2, s15
 80016e8:	4b2f      	ldr	r3, [pc, #188]	; (80017a8 <motor_variables_iter+0x2c8>)
 80016ea:	601a      	str	r2, [r3, #0]
	cnt_1 = TIM3->CNT;
 80016ec:	4b29      	ldr	r3, [pc, #164]	; (8001794 <motor_variables_iter+0x2b4>)
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b29      	ldr	r3, [pc, #164]	; (8001798 <motor_variables_iter+0x2b8>)
 80016f4:	601a      	str	r2, [r3, #0]
	motor.position = real_count*M_CPR2RAD;
 80016f6:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <motor_variables_iter+0x2c8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff22 	bl	8000544 <__aeabi_i2d>
 8001700:	a321      	add	r3, pc, #132	; (adr r3, 8001788 <motor_variables_iter+0x2a8>)
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	f7fe ff87 	bl	8000618 <__aeabi_dmul>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f7ff fa59 	bl	8000bc8 <__aeabi_d2f>
 8001716:	4603      	mov	r3, r0
 8001718:	4a24      	ldr	r2, [pc, #144]	; (80017ac <motor_variables_iter+0x2cc>)
 800171a:	6013      	str	r3, [r2, #0]
	motor.velocity = d_cnt/dt*M_CPR2RAD;
 800171c:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <motor_variables_iter+0x2b0>)
 800171e:	edd3 7a00 	vldr	s15, [r3]
 8001722:	ed97 7a01 	vldr	s14, [r7, #4]
 8001726:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800172a:	ee16 0a90 	vmov	r0, s13
 800172e:	f7fe ff1b 	bl	8000568 <__aeabi_f2d>
 8001732:	a315      	add	r3, pc, #84	; (adr r3, 8001788 <motor_variables_iter+0x2a8>)
 8001734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001738:	f7fe ff6e 	bl	8000618 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff fa40 	bl	8000bc8 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	4a18      	ldr	r2, [pc, #96]	; (80017ac <motor_variables_iter+0x2cc>)
 800174c:	6053      	str	r3, [r2, #4]

	dt = HAL_GetTick(); // saving timestap for next iteration
 800174e:	f000 fdbd 	bl	80022cc <HAL_GetTick>
 8001752:	ee07 0a90 	vmov	s15, r0
 8001756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <motor_variables_iter+0x2b0>)
 800175c:	edc3 7a00 	vstr	s15, [r3]
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800176a:	bf00      	nop
 800176c:	f3af 8000 	nop.w
 8001770:	d2f1a9fc 	.word	0xd2f1a9fc
 8001774:	3f50624d 	.word	0x3f50624d
 8001778:	00000000 	.word	0x00000000
 800177c:	40ed4c00 	.word	0x40ed4c00
 8001780:	9999999a 	.word	0x9999999a
 8001784:	3fa99999 	.word	0x3fa99999
 8001788:	6bd47f36 	.word	0x6bd47f36
 800178c:	3fe24742 	.word	0x3fe24742
 8001790:	2000038c 	.word	0x2000038c
 8001794:	40000400 	.word	0x40000400
 8001798:	20000390 	.word	0x20000390
 800179c:	47435000 	.word	0x47435000
 80017a0:	3ff00000 	.word	0x3ff00000
 80017a4:	20000394 	.word	0x20000394
 80017a8:	20000398 	.word	0x20000398
 80017ac:	20000374 	.word	0x20000374

080017b0 <pendulum_variables_iter>:
	with the sample time defined in the header file "Ts"

	The function updates the structure motor1 nad its properties
	pendulum.position and pendulum.velocity
*/
void pendulum_variables_iter(){
 80017b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
	static int cnt_1,real_count,d_cnt_1;

	static float dt; // sample time
	dt = (HAL_GetTick() - dt)*1e-3; // elapsed time calculation
 80017b8:	f000 fd88 	bl	80022cc <HAL_GetTick>
 80017bc:	ee07 0a90 	vmov	s15, r0
 80017c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017c4:	4baa      	ldr	r3, [pc, #680]	; (8001a70 <pendulum_variables_iter+0x2c0>)
 80017c6:	edd3 7a00 	vldr	s15, [r3]
 80017ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ce:	ee17 0a90 	vmov	r0, s15
 80017d2:	f7fe fec9 	bl	8000568 <__aeabi_f2d>
 80017d6:	a39c      	add	r3, pc, #624	; (adr r3, 8001a48 <pendulum_variables_iter+0x298>)
 80017d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017dc:	f7fe ff1c 	bl	8000618 <__aeabi_dmul>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	f7ff f9ee 	bl	8000bc8 <__aeabi_d2f>
 80017ec:	4603      	mov	r3, r0
 80017ee:	4aa0      	ldr	r2, [pc, #640]	; (8001a70 <pendulum_variables_iter+0x2c0>)
 80017f0:	6013      	str	r3, [r2, #0]

	int cnt = TIM4->CNT;
 80017f2:	4ba0      	ldr	r3, [pc, #640]	; (8001a74 <pendulum_variables_iter+0x2c4>)
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	603b      	str	r3, [r7, #0]
	int d_cnt = cnt - cnt_1;
 80017f8:	4b9f      	ldr	r3, [pc, #636]	; (8001a78 <pendulum_variables_iter+0x2c8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	607b      	str	r3, [r7, #4]

	// from [0,6000] to [-inf,inf]
	if (abs(d_cnt) > CNT_MAX){
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	bfb8      	it	lt
 8001808:	425b      	neglt	r3, r3
 800180a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800180e:	4293      	cmp	r3, r2
 8001810:	dd4f      	ble.n	80018b2 <pendulum_variables_iter+0x102>
		if(cnt > cnt_1){
 8001812:	4b99      	ldr	r3, [pc, #612]	; (8001a78 <pendulum_variables_iter+0x2c8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	dd24      	ble.n	8001866 <pendulum_variables_iter+0xb6>
			d_cnt = -(CNT_OVERFLOW - cnt + cnt_1);
 800181c:	6838      	ldr	r0, [r7, #0]
 800181e:	f7fe fe91 	bl	8000544 <__aeabi_i2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	a18a      	add	r1, pc, #552	; (adr r1, 8001a50 <pendulum_variables_iter+0x2a0>)
 8001828:	e9d1 0100 	ldrd	r0, r1, [r1]
 800182c:	f7fe fd3c 	bl	80002a8 <__aeabi_dsub>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4690      	mov	r8, r2
 8001836:	4699      	mov	r9, r3
 8001838:	4b8f      	ldr	r3, [pc, #572]	; (8001a78 <pendulum_variables_iter+0x2c8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fe81 	bl	8000544 <__aeabi_i2d>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4640      	mov	r0, r8
 8001848:	4649      	mov	r1, r9
 800184a:	f7fe fd2f 	bl	80002ac <__adddf3>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4614      	mov	r4, r2
 8001854:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001858:	4620      	mov	r0, r4
 800185a:	4629      	mov	r1, r5
 800185c:	f7ff f98c 	bl	8000b78 <__aeabi_d2iz>
 8001860:	4603      	mov	r3, r0
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	e025      	b.n	80018b2 <pendulum_variables_iter+0x102>
		}else if(cnt < cnt_1){
 8001866:	4b84      	ldr	r3, [pc, #528]	; (8001a78 <pendulum_variables_iter+0x2c8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	da20      	bge.n	80018b2 <pendulum_variables_iter+0x102>
			d_cnt = CNT_OVERFLOW - cnt_1 + cnt;
 8001870:	4b81      	ldr	r3, [pc, #516]	; (8001a78 <pendulum_variables_iter+0x2c8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fe65 	bl	8000544 <__aeabi_i2d>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	a174      	add	r1, pc, #464	; (adr r1, 8001a50 <pendulum_variables_iter+0x2a0>)
 8001880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001884:	f7fe fd10 	bl	80002a8 <__aeabi_dsub>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4614      	mov	r4, r2
 800188e:	461d      	mov	r5, r3
 8001890:	6838      	ldr	r0, [r7, #0]
 8001892:	f7fe fe57 	bl	8000544 <__aeabi_i2d>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	f7fe fd05 	bl	80002ac <__adddf3>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f7ff f965 	bl	8000b78 <__aeabi_d2iz>
 80018ae:	4603      	mov	r3, r0
 80018b0:	607b      	str	r3, [r7, #4]
		}
	}
	d_cnt_1 = d_cnt;
 80018b2:	4a72      	ldr	r2, [pc, #456]	; (8001a7c <pendulum_variables_iter+0x2cc>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6013      	str	r3, [r2, #0]
	real_count += d_cnt;
 80018b8:	4b71      	ldr	r3, [pc, #452]	; (8001a80 <pendulum_variables_iter+0x2d0>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4413      	add	r3, r2
 80018c0:	4a6f      	ldr	r2, [pc, #444]	; (8001a80 <pendulum_variables_iter+0x2d0>)
 80018c2:	6013      	str	r3, [r2, #0]
	cnt_1 = TIM4->CNT;
 80018c4:	4b6b      	ldr	r3, [pc, #428]	; (8001a74 <pendulum_variables_iter+0x2c4>)
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b6b      	ldr	r3, [pc, #428]	; (8001a78 <pendulum_variables_iter+0x2c8>)
 80018cc:	601a      	str	r2, [r3, #0]
	// bound angle [-PI,PI]
	if((real_count*P_CPR2RAD - P_OFFSET) > 0){
 80018ce:	4b6c      	ldr	r3, [pc, #432]	; (8001a80 <pendulum_variables_iter+0x2d0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe36 	bl	8000544 <__aeabi_i2d>
 80018d8:	a35f      	add	r3, pc, #380	; (adr r3, 8001a58 <pendulum_variables_iter+0x2a8>)
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f7fe fe9b 	bl	8000618 <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	a35d      	add	r3, pc, #372	; (adr r3, 8001a60 <pendulum_variables_iter+0x2b0>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	f7fe fcda 	bl	80002a8 <__aeabi_dsub>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	f04f 0300 	mov.w	r3, #0
 8001904:	f7ff f918 	bl	8000b38 <__aeabi_dcmpgt>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d038      	beq.n	8001980 <pendulum_variables_iter+0x1d0>
		pendulum.position = fmod(real_count*P_CPR2RAD - P_OFFSET +PI,2*PI)-PI;
 800190e:	4b5c      	ldr	r3, [pc, #368]	; (8001a80 <pendulum_variables_iter+0x2d0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fe16 	bl	8000544 <__aeabi_i2d>
 8001918:	a34f      	add	r3, pc, #316	; (adr r3, 8001a58 <pendulum_variables_iter+0x2a8>)
 800191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191e:	f7fe fe7b 	bl	8000618 <__aeabi_dmul>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	a34d      	add	r3, pc, #308	; (adr r3, 8001a60 <pendulum_variables_iter+0x2b0>)
 800192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001930:	f7fe fcba 	bl	80002a8 <__aeabi_dsub>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4610      	mov	r0, r2
 800193a:	4619      	mov	r1, r3
 800193c:	a348      	add	r3, pc, #288	; (adr r3, 8001a60 <pendulum_variables_iter+0x2b0>)
 800193e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001942:	f7fe fcb3 	bl	80002ac <__adddf3>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	ec43 2b17 	vmov	d7, r2, r3
 800194e:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8001a68 <pendulum_variables_iter+0x2b8>
 8001952:	eeb0 0a47 	vmov.f32	s0, s14
 8001956:	eef0 0a67 	vmov.f32	s1, s15
 800195a:	f005 fcf1 	bl	8007340 <fmod>
 800195e:	ec51 0b10 	vmov	r0, r1, d0
 8001962:	a33f      	add	r3, pc, #252	; (adr r3, 8001a60 <pendulum_variables_iter+0x2b0>)
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	f7fe fc9e 	bl	80002a8 <__aeabi_dsub>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	f7ff f928 	bl	8000bc8 <__aeabi_d2f>
 8001978:	4603      	mov	r3, r0
 800197a:	4a42      	ldr	r2, [pc, #264]	; (8001a84 <pendulum_variables_iter+0x2d4>)
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	e037      	b.n	80019f0 <pendulum_variables_iter+0x240>
	}else{
		pendulum.position = fmod(real_count*P_CPR2RAD - P_OFFSET -PI,2*PI)+PI;
 8001980:	4b3f      	ldr	r3, [pc, #252]	; (8001a80 <pendulum_variables_iter+0x2d0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fddd 	bl	8000544 <__aeabi_i2d>
 800198a:	a333      	add	r3, pc, #204	; (adr r3, 8001a58 <pendulum_variables_iter+0x2a8>)
 800198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001990:	f7fe fe42 	bl	8000618 <__aeabi_dmul>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	a330      	add	r3, pc, #192	; (adr r3, 8001a60 <pendulum_variables_iter+0x2b0>)
 800199e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a2:	f7fe fc81 	bl	80002a8 <__aeabi_dsub>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	a32c      	add	r3, pc, #176	; (adr r3, 8001a60 <pendulum_variables_iter+0x2b0>)
 80019b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b4:	f7fe fc78 	bl	80002a8 <__aeabi_dsub>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	ec43 2b17 	vmov	d7, r2, r3
 80019c0:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8001a68 <pendulum_variables_iter+0x2b8>
 80019c4:	eeb0 0a47 	vmov.f32	s0, s14
 80019c8:	eef0 0a67 	vmov.f32	s1, s15
 80019cc:	f005 fcb8 	bl	8007340 <fmod>
 80019d0:	ec51 0b10 	vmov	r0, r1, d0
 80019d4:	a322      	add	r3, pc, #136	; (adr r3, 8001a60 <pendulum_variables_iter+0x2b0>)
 80019d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019da:	f7fe fc67 	bl	80002ac <__adddf3>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7ff f8ef 	bl	8000bc8 <__aeabi_d2f>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4a25      	ldr	r2, [pc, #148]	; (8001a84 <pendulum_variables_iter+0x2d4>)
 80019ee:	6013      	str	r3, [r2, #0]
	}
	pendulum.velocity = d_cnt/dt*P_CPR2RAD;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	ee07 3a90 	vmov	s15, r3
 80019f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019fa:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <pendulum_variables_iter+0x2c0>)
 80019fc:	edd3 7a00 	vldr	s15, [r3]
 8001a00:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a04:	ee16 0a90 	vmov	r0, s13
 8001a08:	f7fe fdae 	bl	8000568 <__aeabi_f2d>
 8001a0c:	a312      	add	r3, pc, #72	; (adr r3, 8001a58 <pendulum_variables_iter+0x2a8>)
 8001a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a12:	f7fe fe01 	bl	8000618 <__aeabi_dmul>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7ff f8d3 	bl	8000bc8 <__aeabi_d2f>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4a17      	ldr	r2, [pc, #92]	; (8001a84 <pendulum_variables_iter+0x2d4>)
 8001a26:	6053      	str	r3, [r2, #4]
	dt = HAL_GetTick();// saving timestap for next iteration
 8001a28:	f000 fc50 	bl	80022cc <HAL_GetTick>
 8001a2c:	ee07 0a90 	vmov	s15, r0
 8001a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a34:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <pendulum_variables_iter+0x2c0>)
 8001a36:	edc3 7a00 	vstr	s15, [r3]
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a44:	f3af 8000 	nop.w
 8001a48:	d2f1a9fc 	.word	0xd2f1a9fc
 8001a4c:	3f50624d 	.word	0x3f50624d
 8001a50:	00000000 	.word	0x00000000
 8001a54:	40ed4c00 	.word	0x40ed4c00
 8001a58:	92172844 	.word	0x92172844
 8001a5c:	3f7015bf 	.word	0x3f7015bf
 8001a60:	54442eea 	.word	0x54442eea
 8001a64:	400921fb 	.word	0x400921fb
 8001a68:	54442eea 	.word	0x54442eea
 8001a6c:	401921fb 	.word	0x401921fb
 8001a70:	2000039c 	.word	0x2000039c
 8001a74:	40000800 	.word	0x40000800
 8001a78:	200003a0 	.word	0x200003a0
 8001a7c:	200003a4 	.word	0x200003a4
 8001a80:	200003a8 	.word	0x200003a8
 8001a84:	2000037c 	.word	0x2000037c

08001a88 <pendulum_LQR>:

/**
	LQR stabilization
*/
void pendulum_LQR(){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0

	/** LQR Matlab generated controller
	* Q = diag([1,1,1]) R = [10]
	*/
	float Kr[3] = {600.1146,35.1388,0.5}; //330.1146 35.1388
 8001a8e:	4a27      	ldr	r2, [pc, #156]	; (8001b2c <pendulum_LQR+0xa4>)
 8001a90:	463b      	mov	r3, r7
 8001a92:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a94:	e883 0007 	stmia.w	r3, {r0, r1, r2}


	// P equation
	//float uk = 60000*pendulum.position;
	// LQR equation
	float uk = Kr[0]*pendulum.position+Kr[1]*pendulum.velocity+Kr[2]*uk;
 8001a98:	ed97 7a00 	vldr	s14, [r7]
 8001a9c:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <pendulum_LQR+0xa8>)
 8001a9e:	edd3 7a00 	vldr	s15, [r3]
 8001aa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa6:	edd7 6a01 	vldr	s13, [r7, #4]
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <pendulum_LQR+0xa8>)
 8001aac:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ab0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ab8:	edd7 6a02 	vldr	s13, [r7, #8]
 8001abc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ac0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac8:	edc7 7a03 	vstr	s15, [r7, #12]

	uk = u2pwm_(uk);
 8001acc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ad0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001b34 <pendulum_LQR+0xac>
 8001ad4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ad8:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8001adc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ae0:	edc7 7a03 	vstr	s15, [r7, #12]
	// anti-windup
	if(abs((int)uk) > M_Umax) 	uk = uk > 0 ? M_Umax : -M_Umax;
 8001ae4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ae8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aec:	ee17 3a90 	vmov	r3, s15
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	bfb8      	it	lt
 8001af4:	425b      	neglt	r3, r3
 8001af6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001afa:	dd0a      	ble.n	8001b12 <pendulum_LQR+0x8a>
 8001afc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b08:	dd01      	ble.n	8001b0e <pendulum_LQR+0x86>
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <pendulum_LQR+0xb0>)
 8001b0c:	e000      	b.n	8001b10 <pendulum_LQR+0x88>
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <pendulum_LQR+0xb4>)
 8001b10:	60fb      	str	r3, [r7, #12]

	// set pwm to motor
	motor_setPwm(uk);
 8001b12:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b1a:	ee17 0a90 	vmov	r0, s15
 8001b1e:	f7ff fc99 	bl	8001454 <motor_setPwm>

}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	080092e8 	.word	0x080092e8
 8001b30:	2000037c 	.word	0x2000037c
 8001b34:	447a0000 	.word	0x447a0000
 8001b38:	447a0000 	.word	0x447a0000
 8001b3c:	c47a0000 	.word	0xc47a0000

08001b40 <pendulum_swingup>:
}

/**
		Swing-up bang bang controller for the pendulum
*/
void pendulum_swingup(){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
	// check if swingup needed
	if(fabs(pendulum.position) >= P_SWITCH_ANGLE){
 8001b46:	4b6c      	ldr	r3, [pc, #432]	; (8001cf8 <pendulum_swingup+0x1b8>)
 8001b48:	edd3 7a00 	vldr	s15, [r3]
 8001b4c:	eef0 7ae7 	vabs.f32	s15, s15
 8001b50:	ee17 0a90 	vmov	r0, s15
 8001b54:	f7fe fd08 	bl	8000568 <__aeabi_f2d>
 8001b58:	a35f      	add	r3, pc, #380	; (adr r3, 8001cd8 <pendulum_swingup+0x198>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe ffe1 	bl	8000b24 <__aeabi_dcmpge>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d100      	bne.n	8001b6a <pendulum_swingup+0x2a>
				}

		motor_setPwm(-sign_(pendulum.velocity)*accel_sign*M_Umax);

	}
}
 8001b68:	e0b2      	b.n	8001cd0 <pendulum_swingup+0x190>
		motor_setPwm(-sign_(pendulum.velocity)*M_Umax);
 8001b6a:	4b63      	ldr	r3, [pc, #396]	; (8001cf8 <pendulum_swingup+0x1b8>)
 8001b6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b78:	d502      	bpl.n	8001b80 <pendulum_swingup+0x40>
 8001b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7e:	e00a      	b.n	8001b96 <pendulum_swingup+0x56>
 8001b80:	4b5d      	ldr	r3, [pc, #372]	; (8001cf8 <pendulum_swingup+0x1b8>)
 8001b82:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8e:	dd01      	ble.n	8001b94 <pendulum_swingup+0x54>
 8001b90:	4b5a      	ldr	r3, [pc, #360]	; (8001cfc <pendulum_swingup+0x1bc>)
 8001b92:	e000      	b.n	8001b96 <pendulum_swingup+0x56>
 8001b94:	2300      	movs	r3, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fc5c 	bl	8001454 <motor_setPwm>
		E_kin = 0.5*P_Jp*pow(pendulum.velocity,2);
 8001b9c:	4b56      	ldr	r3, [pc, #344]	; (8001cf8 <pendulum_swingup+0x1b8>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fce1 	bl	8000568 <__aeabi_f2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 8001ce0 <pendulum_swingup+0x1a0>
 8001bae:	ec43 2b10 	vmov	d0, r2, r3
 8001bb2:	f005 fbf3 	bl	800739c <pow>
 8001bb6:	ec51 0b10 	vmov	r0, r1, d0
 8001bba:	a34b      	add	r3, pc, #300	; (adr r3, 8001ce8 <pendulum_swingup+0x1a8>)
 8001bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc0:	f7fe fd2a 	bl	8000618 <__aeabi_dmul>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f7fe fffc 	bl	8000bc8 <__aeabi_d2f>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4a4b      	ldr	r2, [pc, #300]	; (8001d00 <pendulum_swingup+0x1c0>)
 8001bd4:	6013      	str	r3, [r2, #0]
		E_pot = P_Mp *P_g*P_Lcm*(1+cos(pendulum.position));
 8001bd6:	4b48      	ldr	r3, [pc, #288]	; (8001cf8 <pendulum_swingup+0x1b8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fcc4 	bl	8000568 <__aeabi_f2d>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	ec43 2b10 	vmov	d0, r2, r3
 8001be8:	f005 fb56 	bl	8007298 <cos>
 8001bec:	ec51 0b10 	vmov	r0, r1, d0
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	4b43      	ldr	r3, [pc, #268]	; (8001d04 <pendulum_swingup+0x1c4>)
 8001bf6:	f7fe fb59 	bl	80002ac <__adddf3>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	a33b      	add	r3, pc, #236	; (adr r3, 8001cf0 <pendulum_swingup+0x1b0>)
 8001c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c08:	f7fe fd06 	bl	8000618 <__aeabi_dmul>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	f7fe ffd8 	bl	8000bc8 <__aeabi_d2f>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4a3b      	ldr	r2, [pc, #236]	; (8001d08 <pendulum_swingup+0x1c8>)
 8001c1c:	6013      	str	r3, [r2, #0]
		pendulum.E_tar = E_target;
 8001c1e:	4b36      	ldr	r3, [pc, #216]	; (8001cf8 <pendulum_swingup+0x1b8>)
 8001c20:	4a3a      	ldr	r2, [pc, #232]	; (8001d0c <pendulum_swingup+0x1cc>)
 8001c22:	60da      	str	r2, [r3, #12]
		pendulum.E_tot = E_kin+E_pot;
 8001c24:	4b36      	ldr	r3, [pc, #216]	; (8001d00 <pendulum_swingup+0x1c0>)
 8001c26:	ed93 7a00 	vldr	s14, [r3]
 8001c2a:	4b37      	ldr	r3, [pc, #220]	; (8001d08 <pendulum_swingup+0x1c8>)
 8001c2c:	edd3 7a00 	vldr	s15, [r3]
 8001c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c34:	4b30      	ldr	r3, [pc, #192]	; (8001cf8 <pendulum_swingup+0x1b8>)
 8001c36:	edc3 7a02 	vstr	s15, [r3, #8]
		if(fabs(pendulum.velocity) < 5.0){
 8001c3a:	4b2f      	ldr	r3, [pc, #188]	; (8001cf8 <pendulum_swingup+0x1b8>)
 8001c3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c40:	eef0 7ae7 	vabs.f32	s15, s15
 8001c44:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c50:	d503      	bpl.n	8001c5a <pendulum_swingup+0x11a>
					accel_sign = 1;
 8001c52:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	e011      	b.n	8001c7e <pendulum_swingup+0x13e>
				}else if(fabs(pendulum.velocity) < 8.0){
 8001c5a:	4b27      	ldr	r3, [pc, #156]	; (8001cf8 <pendulum_swingup+0x1b8>)
 8001c5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c60:	eef0 7ae7 	vabs.f32	s15, s15
 8001c64:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001c68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c70:	d503      	bpl.n	8001c7a <pendulum_swingup+0x13a>
					accel_sign = 0;
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	e001      	b.n	8001c7e <pendulum_swingup+0x13e>
					accel_sign = -1;
 8001c7a:	4b25      	ldr	r3, [pc, #148]	; (8001d10 <pendulum_swingup+0x1d0>)
 8001c7c:	607b      	str	r3, [r7, #4]
		motor_setPwm(-sign_(pendulum.velocity)*accel_sign*M_Umax);
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <pendulum_swingup+0x1b8>)
 8001c80:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8c:	d502      	bpl.n	8001c94 <pendulum_swingup+0x154>
 8001c8e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001c92:	e00f      	b.n	8001cb4 <pendulum_swingup+0x174>
 8001c94:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <pendulum_swingup+0x1b8>)
 8001c96:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca2:	bfcc      	ite	gt
 8001ca4:	2301      	movgt	r3, #1
 8001ca6:	2300      	movle	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	425b      	negs	r3, r3
 8001cac:	ee07 3a90 	vmov	s15, r3
 8001cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cbc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001d14 <pendulum_swingup+0x1d4>
 8001cc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cc8:	ee17 0a90 	vmov	r0, s15
 8001ccc:	f7ff fbc2 	bl	8001454 <motor_setPwm>
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	769cf255 	.word	0x769cf255
 8001cdc:	3fd41b2f 	.word	0x3fd41b2f
 8001ce0:	00000000 	.word	0x00000000
 8001ce4:	40000000 	.word	0x40000000
 8001ce8:	6702ad2a 	.word	0x6702ad2a
 8001cec:	3f688cf7 	.word	0x3f688cf7
 8001cf0:	60e94ee4 	.word	0x60e94ee4
 8001cf4:	3fdb9ffd 	.word	0x3fdb9ffd
 8001cf8:	2000037c 	.word	0x2000037c
 8001cfc:	fffffc18 	.word	0xfffffc18
 8001d00:	20000314 	.word	0x20000314
 8001d04:	3ff00000 	.word	0x3ff00000
 8001d08:	20000318 	.word	0x20000318
 8001d0c:	3f5cffeb 	.word	0x3f5cffeb
 8001d10:	bf800000 	.word	0xbf800000
 8001d14:	447a0000 	.word	0x447a0000

08001d18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	603b      	str	r3, [r7, #0]
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a08      	ldr	r2, [pc, #32]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_MspInit+0x4c>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800

08001d68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d78:	d10d      	bne.n	8001d96 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a08      	ldr	r2, [pc, #32]	; (8001da4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800

08001da8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08c      	sub	sp, #48	; 0x30
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a32      	ldr	r2, [pc, #200]	; (8001e90 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d12c      	bne.n	8001e24 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
 8001dce:	4b31      	ldr	r3, [pc, #196]	; (8001e94 <HAL_TIM_Encoder_MspInit+0xec>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	4a30      	ldr	r2, [pc, #192]	; (8001e94 <HAL_TIM_Encoder_MspInit+0xec>)
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dda:	4b2e      	ldr	r3, [pc, #184]	; (8001e94 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	61bb      	str	r3, [r7, #24]
 8001de4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <HAL_TIM_Encoder_MspInit+0xec>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a29      	ldr	r2, [pc, #164]	; (8001e94 <HAL_TIM_Encoder_MspInit+0xec>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <HAL_TIM_Encoder_MspInit+0xec>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e02:	23c0      	movs	r3, #192	; 0xc0
 8001e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e12:	2302      	movs	r3, #2
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e16:	f107 031c 	add.w	r3, r7, #28
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	481e      	ldr	r0, [pc, #120]	; (8001e98 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001e1e:	f000 fb47 	bl	80024b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e22:	e031      	b.n	8001e88 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a1c      	ldr	r2, [pc, #112]	; (8001e9c <HAL_TIM_Encoder_MspInit+0xf4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d12c      	bne.n	8001e88 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a10      	ldr	r2, [pc, #64]	; (8001e94 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e54:	f043 0308 	orr.w	r3, r3, #8
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001e66:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e70:	2301      	movs	r3, #1
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	2300      	movs	r3, #0
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	4619      	mov	r1, r3
 8001e82:	4807      	ldr	r0, [pc, #28]	; (8001ea0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001e84:	f000 fb14 	bl	80024b0 <HAL_GPIO_Init>
}
 8001e88:	bf00      	nop
 8001e8a:	3730      	adds	r7, #48	; 0x30
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40000400 	.word	0x40000400
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020000 	.word	0x40020000
 8001e9c:	40000800 	.word	0x40000800
 8001ea0:	40020c00 	.word	0x40020c00

08001ea4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 030c 	add.w	r3, r7, #12
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec4:	d11d      	bne.n	8001f02 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <HAL_TIM_MspPostInit+0x68>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a0f      	ldr	r2, [pc, #60]	; (8001f0c <HAL_TIM_MspPostInit+0x68>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <HAL_TIM_MspPostInit+0x68>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_Pin|GPIO_PIN_3;
 8001ee2:	2309      	movs	r3, #9
 8001ee4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef6:	f107 030c 	add.w	r3, r7, #12
 8001efa:	4619      	mov	r1, r3
 8001efc:	4804      	ldr	r0, [pc, #16]	; (8001f10 <HAL_TIM_MspPostInit+0x6c>)
 8001efe:	f000 fad7 	bl	80024b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f02:	bf00      	nop
 8001f04:	3720      	adds	r7, #32
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020000 	.word	0x40020000

08001f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <HAL_UART_MspInit+0x84>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d12c      	bne.n	8001f90 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f44:	6413      	str	r3, [r2, #64]	; 0x40
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a10      	ldr	r2, [pc, #64]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f5c:	f043 0308 	orr.w	r3, r3, #8
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <HAL_UART_MspInit+0x88>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f74:	2302      	movs	r3, #2
 8001f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f80:	2307      	movs	r3, #7
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <HAL_UART_MspInit+0x8c>)
 8001f8c:	f000 fa90 	bl	80024b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f90:	bf00      	nop
 8001f92:	3728      	adds	r7, #40	; 0x28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40004800 	.word	0x40004800
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020c00 	.word	0x40020c00

08001fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <NMI_Handler+0x4>

08001faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fae:	e7fe      	b.n	8001fae <HardFault_Handler+0x4>

08001fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <MemManage_Handler+0x4>

08001fb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fba:	e7fe      	b.n	8001fba <BusFault_Handler+0x4>

08001fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <UsageFault_Handler+0x4>

08001fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff0:	f000 f958 	bl	80022a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Controller_SysTick();
 8001ff4:	f7fe ffbc 	bl	8000f70 <Controller_SysTick>

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return 1;
 8002000:	2301      	movs	r3, #1
}
 8002002:	4618      	mov	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <_kill>:

int _kill(int pid, int sig)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002016:	f002 fa2b 	bl	8004470 <__errno>
 800201a:	4603      	mov	r3, r0
 800201c:	2216      	movs	r2, #22
 800201e:	601a      	str	r2, [r3, #0]
  return -1;
 8002020:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <_exit>:

void _exit (int status)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002034:	f04f 31ff 	mov.w	r1, #4294967295
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ffe7 	bl	800200c <_kill>
  while (1) {}    /* Make sure we hang here */
 800203e:	e7fe      	b.n	800203e <_exit+0x12>

08002040 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	e00a      	b.n	8002068 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002052:	f3af 8000 	nop.w
 8002056:	4601      	mov	r1, r0
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	60ba      	str	r2, [r7, #8]
 800205e:	b2ca      	uxtb	r2, r1
 8002060:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	3301      	adds	r3, #1
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	429a      	cmp	r2, r3
 800206e:	dbf0      	blt.n	8002052 <_read+0x12>
  }

  return len;
 8002070:	687b      	ldr	r3, [r7, #4]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	e009      	b.n	80020a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	60ba      	str	r2, [r7, #8]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	3301      	adds	r3, #1
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	dbf1      	blt.n	800208c <_write+0x12>
  }
  return len;
 80020a8:	687b      	ldr	r3, [r7, #4]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <_close>:

int _close(int file)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020da:	605a      	str	r2, [r3, #4]
  return 0;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <_isatty>:

int _isatty(int file)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020f2:	2301      	movs	r3, #1
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002124:	4a14      	ldr	r2, [pc, #80]	; (8002178 <_sbrk+0x5c>)
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <_sbrk+0x60>)
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002130:	4b13      	ldr	r3, [pc, #76]	; (8002180 <_sbrk+0x64>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d102      	bne.n	800213e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <_sbrk+0x64>)
 800213a:	4a12      	ldr	r2, [pc, #72]	; (8002184 <_sbrk+0x68>)
 800213c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	429a      	cmp	r2, r3
 800214a:	d207      	bcs.n	800215c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800214c:	f002 f990 	bl	8004470 <__errno>
 8002150:	4603      	mov	r3, r0
 8002152:	220c      	movs	r2, #12
 8002154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002156:	f04f 33ff 	mov.w	r3, #4294967295
 800215a:	e009      	b.n	8002170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <_sbrk+0x64>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <_sbrk+0x64>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	4a05      	ldr	r2, [pc, #20]	; (8002180 <_sbrk+0x64>)
 800216c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800216e:	68fb      	ldr	r3, [r7, #12]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20030000 	.word	0x20030000
 800217c:	00000400 	.word	0x00000400
 8002180:	200003ac 	.word	0x200003ac
 8002184:	200003c8 	.word	0x200003c8

08002188 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <SystemInit+0x20>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002192:	4a05      	ldr	r2, [pc, #20]	; (80021a8 <SystemInit+0x20>)
 8002194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80021ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021e4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021b0:	480d      	ldr	r0, [pc, #52]	; (80021e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021b2:	490e      	ldr	r1, [pc, #56]	; (80021ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021b4:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b8:	e002      	b.n	80021c0 <LoopCopyDataInit>

080021ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021be:	3304      	adds	r3, #4

080021c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021c4:	d3f9      	bcc.n	80021ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021c6:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021c8:	4c0b      	ldr	r4, [pc, #44]	; (80021f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021cc:	e001      	b.n	80021d2 <LoopFillZerobss>

080021ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d0:	3204      	adds	r2, #4

080021d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021d4:	d3fb      	bcc.n	80021ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021d6:	f7ff ffd7 	bl	8002188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021da:	f002 f94f 	bl	800447c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021de:	f7fe ff23 	bl	8001028 <main>
  bx  lr    
 80021e2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80021e4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80021e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021ec:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80021f0:	08009910 	.word	0x08009910
  ldr r2, =_sbss
 80021f4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80021f8:	200003c4 	.word	0x200003c4

080021fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021fc:	e7fe      	b.n	80021fc <ADC_IRQHandler>
	...

08002200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002204:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <HAL_Init+0x40>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0d      	ldr	r2, [pc, #52]	; (8002240 <HAL_Init+0x40>)
 800220a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800220e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_Init+0x40>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <HAL_Init+0x40>)
 8002216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800221a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_Init+0x40>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a07      	ldr	r2, [pc, #28]	; (8002240 <HAL_Init+0x40>)
 8002222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002228:	2003      	movs	r0, #3
 800222a:	f000 f90d 	bl	8002448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800222e:	200f      	movs	r0, #15
 8002230:	f000 f808 	bl	8002244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002234:	f7ff fd70 	bl	8001d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40023c00 	.word	0x40023c00

08002244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_InitTick+0x54>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_InitTick+0x58>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800225a:	fbb3 f3f1 	udiv	r3, r3, r1
 800225e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f917 	bl	8002496 <HAL_SYSTICK_Config>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e00e      	b.n	8002290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b0f      	cmp	r3, #15
 8002276:	d80a      	bhi.n	800228e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002278:	2200      	movs	r2, #0
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	f04f 30ff 	mov.w	r0, #4294967295
 8002280:	f000 f8ed 	bl	800245e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002284:	4a06      	ldr	r2, [pc, #24]	; (80022a0 <HAL_InitTick+0x5c>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	e000      	b.n	8002290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000000 	.word	0x20000000
 800229c:	20000008 	.word	0x20000008
 80022a0:	20000004 	.word	0x20000004

080022a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_IncTick+0x20>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_IncTick+0x24>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <HAL_IncTick+0x24>)
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	20000008 	.word	0x20000008
 80022c8:	200003b0 	.word	0x200003b0

080022cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return uwTick;
 80022d0:	4b03      	ldr	r3, [pc, #12]	; (80022e0 <HAL_GetTick+0x14>)
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	200003b0 	.word	0x200003b0

080022e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <__NVIC_SetPriorityGrouping+0x44>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002300:	4013      	ands	r3, r2
 8002302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800230c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002316:	4a04      	ldr	r2, [pc, #16]	; (8002328 <__NVIC_SetPriorityGrouping+0x44>)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	60d3      	str	r3, [r2, #12]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <__NVIC_GetPriorityGrouping+0x18>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	f003 0307 	and.w	r3, r3, #7
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	2b00      	cmp	r3, #0
 800235a:	db0a      	blt.n	8002372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	490c      	ldr	r1, [pc, #48]	; (8002394 <__NVIC_SetPriority+0x4c>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	0112      	lsls	r2, r2, #4
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	440b      	add	r3, r1
 800236c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002370:	e00a      	b.n	8002388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4908      	ldr	r1, [pc, #32]	; (8002398 <__NVIC_SetPriority+0x50>)
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	3b04      	subs	r3, #4
 8002380:	0112      	lsls	r2, r2, #4
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	440b      	add	r3, r1
 8002386:	761a      	strb	r2, [r3, #24]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000e100 	.word	0xe000e100
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	; 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f1c3 0307 	rsb	r3, r3, #7
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	bf28      	it	cs
 80023ba:	2304      	movcs	r3, #4
 80023bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3304      	adds	r3, #4
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d902      	bls.n	80023cc <NVIC_EncodePriority+0x30>
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3b03      	subs	r3, #3
 80023ca:	e000      	b.n	80023ce <NVIC_EncodePriority+0x32>
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	f04f 32ff 	mov.w	r2, #4294967295
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	401a      	ands	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e4:	f04f 31ff 	mov.w	r1, #4294967295
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	43d9      	mvns	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	4313      	orrs	r3, r2
         );
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	; 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3b01      	subs	r3, #1
 8002410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002414:	d301      	bcc.n	800241a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002416:	2301      	movs	r3, #1
 8002418:	e00f      	b.n	800243a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <SysTick_Config+0x40>)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002422:	210f      	movs	r1, #15
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	f7ff ff8e 	bl	8002348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <SysTick_Config+0x40>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002432:	4b04      	ldr	r3, [pc, #16]	; (8002444 <SysTick_Config+0x40>)
 8002434:	2207      	movs	r2, #7
 8002436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	e000e010 	.word	0xe000e010

08002448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ff47 	bl	80022e4 <__NVIC_SetPriorityGrouping>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002470:	f7ff ff5c 	bl	800232c <__NVIC_GetPriorityGrouping>
 8002474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	6978      	ldr	r0, [r7, #20]
 800247c:	f7ff ff8e 	bl	800239c <NVIC_EncodePriority>
 8002480:	4602      	mov	r2, r0
 8002482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff5d 	bl	8002348 <__NVIC_SetPriority>
}
 800248e:	bf00      	nop
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff ffb0 	bl	8002404 <SysTick_Config>
 80024a4:	4603      	mov	r3, r0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	; 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	e177      	b.n	80027bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024cc:	2201      	movs	r2, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	f040 8166 	bne.w	80027b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d005      	beq.n	8002502 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d130      	bne.n	8002564 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	2203      	movs	r2, #3
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002538:	2201      	movs	r2, #1
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 0201 	and.w	r2, r3, #1
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	2b03      	cmp	r3, #3
 800256e:	d017      	beq.n	80025a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	2203      	movs	r2, #3
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d123      	bne.n	80025f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	08da      	lsrs	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3208      	adds	r2, #8
 80025b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	220f      	movs	r2, #15
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	08da      	lsrs	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3208      	adds	r2, #8
 80025ee:	69b9      	ldr	r1, [r7, #24]
 80025f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	2203      	movs	r2, #3
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0203 	and.w	r2, r3, #3
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80c0 	beq.w	80027b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	4b66      	ldr	r3, [pc, #408]	; (80027d4 <HAL_GPIO_Init+0x324>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	4a65      	ldr	r2, [pc, #404]	; (80027d4 <HAL_GPIO_Init+0x324>)
 8002640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002644:	6453      	str	r3, [r2, #68]	; 0x44
 8002646:	4b63      	ldr	r3, [pc, #396]	; (80027d4 <HAL_GPIO_Init+0x324>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002652:	4a61      	ldr	r2, [pc, #388]	; (80027d8 <HAL_GPIO_Init+0x328>)
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	089b      	lsrs	r3, r3, #2
 8002658:	3302      	adds	r3, #2
 800265a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	220f      	movs	r2, #15
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a58      	ldr	r2, [pc, #352]	; (80027dc <HAL_GPIO_Init+0x32c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d037      	beq.n	80026ee <HAL_GPIO_Init+0x23e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a57      	ldr	r2, [pc, #348]	; (80027e0 <HAL_GPIO_Init+0x330>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d031      	beq.n	80026ea <HAL_GPIO_Init+0x23a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a56      	ldr	r2, [pc, #344]	; (80027e4 <HAL_GPIO_Init+0x334>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d02b      	beq.n	80026e6 <HAL_GPIO_Init+0x236>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a55      	ldr	r2, [pc, #340]	; (80027e8 <HAL_GPIO_Init+0x338>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d025      	beq.n	80026e2 <HAL_GPIO_Init+0x232>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a54      	ldr	r2, [pc, #336]	; (80027ec <HAL_GPIO_Init+0x33c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d01f      	beq.n	80026de <HAL_GPIO_Init+0x22e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a53      	ldr	r2, [pc, #332]	; (80027f0 <HAL_GPIO_Init+0x340>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d019      	beq.n	80026da <HAL_GPIO_Init+0x22a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a52      	ldr	r2, [pc, #328]	; (80027f4 <HAL_GPIO_Init+0x344>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d013      	beq.n	80026d6 <HAL_GPIO_Init+0x226>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a51      	ldr	r2, [pc, #324]	; (80027f8 <HAL_GPIO_Init+0x348>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00d      	beq.n	80026d2 <HAL_GPIO_Init+0x222>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a50      	ldr	r2, [pc, #320]	; (80027fc <HAL_GPIO_Init+0x34c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d007      	beq.n	80026ce <HAL_GPIO_Init+0x21e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a4f      	ldr	r2, [pc, #316]	; (8002800 <HAL_GPIO_Init+0x350>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d101      	bne.n	80026ca <HAL_GPIO_Init+0x21a>
 80026c6:	2309      	movs	r3, #9
 80026c8:	e012      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026ca:	230a      	movs	r3, #10
 80026cc:	e010      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026ce:	2308      	movs	r3, #8
 80026d0:	e00e      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026d2:	2307      	movs	r3, #7
 80026d4:	e00c      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026d6:	2306      	movs	r3, #6
 80026d8:	e00a      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026da:	2305      	movs	r3, #5
 80026dc:	e008      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026de:	2304      	movs	r3, #4
 80026e0:	e006      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026e2:	2303      	movs	r3, #3
 80026e4:	e004      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e002      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026ee:	2300      	movs	r3, #0
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	f002 0203 	and.w	r2, r2, #3
 80026f6:	0092      	lsls	r2, r2, #2
 80026f8:	4093      	lsls	r3, r2
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002700:	4935      	ldr	r1, [pc, #212]	; (80027d8 <HAL_GPIO_Init+0x328>)
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	089b      	lsrs	r3, r3, #2
 8002706:	3302      	adds	r3, #2
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800270e:	4b3d      	ldr	r3, [pc, #244]	; (8002804 <HAL_GPIO_Init+0x354>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002732:	4a34      	ldr	r2, [pc, #208]	; (8002804 <HAL_GPIO_Init+0x354>)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002738:	4b32      	ldr	r3, [pc, #200]	; (8002804 <HAL_GPIO_Init+0x354>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800275c:	4a29      	ldr	r2, [pc, #164]	; (8002804 <HAL_GPIO_Init+0x354>)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002762:	4b28      	ldr	r3, [pc, #160]	; (8002804 <HAL_GPIO_Init+0x354>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002786:	4a1f      	ldr	r2, [pc, #124]	; (8002804 <HAL_GPIO_Init+0x354>)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800278c:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_GPIO_Init+0x354>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027b0:	4a14      	ldr	r2, [pc, #80]	; (8002804 <HAL_GPIO_Init+0x354>)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3301      	adds	r3, #1
 80027ba:	61fb      	str	r3, [r7, #28]
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	2b0f      	cmp	r3, #15
 80027c0:	f67f ae84 	bls.w	80024cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop
 80027c8:	3724      	adds	r7, #36	; 0x24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40013800 	.word	0x40013800
 80027dc:	40020000 	.word	0x40020000
 80027e0:	40020400 	.word	0x40020400
 80027e4:	40020800 	.word	0x40020800
 80027e8:	40020c00 	.word	0x40020c00
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40021400 	.word	0x40021400
 80027f4:	40021800 	.word	0x40021800
 80027f8:	40021c00 	.word	0x40021c00
 80027fc:	40022000 	.word	0x40022000
 8002800:	40022400 	.word	0x40022400
 8002804:	40013c00 	.word	0x40013c00

08002808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	807b      	strh	r3, [r7, #2]
 8002814:	4613      	mov	r3, r2
 8002816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002818:	787b      	ldrb	r3, [r7, #1]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800281e:	887a      	ldrh	r2, [r7, #2]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002824:	e003      	b.n	800282e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002826:	887b      	ldrh	r3, [r7, #2]
 8002828:	041a      	lsls	r2, r3, #16
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	619a      	str	r2, [r3, #24]
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e267      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d075      	beq.n	8002946 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800285a:	4b88      	ldr	r3, [pc, #544]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b04      	cmp	r3, #4
 8002864:	d00c      	beq.n	8002880 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002866:	4b85      	ldr	r3, [pc, #532]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800286e:	2b08      	cmp	r3, #8
 8002870:	d112      	bne.n	8002898 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002872:	4b82      	ldr	r3, [pc, #520]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800287e:	d10b      	bne.n	8002898 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002880:	4b7e      	ldr	r3, [pc, #504]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d05b      	beq.n	8002944 <HAL_RCC_OscConfig+0x108>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d157      	bne.n	8002944 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e242      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a0:	d106      	bne.n	80028b0 <HAL_RCC_OscConfig+0x74>
 80028a2:	4b76      	ldr	r3, [pc, #472]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a75      	ldr	r2, [pc, #468]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e01d      	b.n	80028ec <HAL_RCC_OscConfig+0xb0>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x98>
 80028ba:	4b70      	ldr	r3, [pc, #448]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a6f      	ldr	r2, [pc, #444]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b6d      	ldr	r3, [pc, #436]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6c      	ldr	r2, [pc, #432]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0xb0>
 80028d4:	4b69      	ldr	r3, [pc, #420]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a68      	ldr	r2, [pc, #416]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b66      	ldr	r3, [pc, #408]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a65      	ldr	r2, [pc, #404]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d013      	beq.n	800291c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7ff fcea 	bl	80022cc <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028fc:	f7ff fce6 	bl	80022cc <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	; 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e207      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	4b5b      	ldr	r3, [pc, #364]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0xc0>
 800291a:	e014      	b.n	8002946 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7ff fcd6 	bl	80022cc <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002924:	f7ff fcd2 	bl	80022cc <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	; 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e1f3      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002936:	4b51      	ldr	r3, [pc, #324]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0xe8>
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d063      	beq.n	8002a1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002952:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800295e:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002966:	2b08      	cmp	r3, #8
 8002968:	d11c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296a:	4b44      	ldr	r3, [pc, #272]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d116      	bne.n	80029a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002976:	4b41      	ldr	r3, [pc, #260]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_RCC_OscConfig+0x152>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d001      	beq.n	800298e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e1c7      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298e:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4937      	ldr	r1, [pc, #220]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	e03a      	b.n	8002a1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ac:	4b34      	ldr	r3, [pc, #208]	; (8002a80 <HAL_RCC_OscConfig+0x244>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b2:	f7ff fc8b 	bl	80022cc <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ba:	f7ff fc87 	bl	80022cc <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e1a8      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029cc:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d8:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4925      	ldr	r1, [pc, #148]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]
 80029ec:	e015      	b.n	8002a1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ee:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <HAL_RCC_OscConfig+0x244>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7ff fc6a 	bl	80022cc <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029fc:	f7ff fc66 	bl	80022cc <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e187      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0e:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d036      	beq.n	8002a94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d016      	beq.n	8002a5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <HAL_RCC_OscConfig+0x248>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a34:	f7ff fc4a 	bl	80022cc <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a3c:	f7ff fc46 	bl	80022cc <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e167      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x200>
 8002a5a:	e01b      	b.n	8002a94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_RCC_OscConfig+0x248>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a62:	f7ff fc33 	bl	80022cc <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a68:	e00e      	b.n	8002a88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a6a:	f7ff fc2f 	bl	80022cc <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d907      	bls.n	8002a88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e150      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	42470000 	.word	0x42470000
 8002a84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a88:	4b88      	ldr	r3, [pc, #544]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1ea      	bne.n	8002a6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 8097 	beq.w	8002bd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa6:	4b81      	ldr	r3, [pc, #516]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10f      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	4b7d      	ldr	r3, [pc, #500]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a7c      	ldr	r2, [pc, #496]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac2:	4b7a      	ldr	r3, [pc, #488]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad2:	4b77      	ldr	r3, [pc, #476]	; (8002cb0 <HAL_RCC_OscConfig+0x474>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d118      	bne.n	8002b10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ade:	4b74      	ldr	r3, [pc, #464]	; (8002cb0 <HAL_RCC_OscConfig+0x474>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a73      	ldr	r2, [pc, #460]	; (8002cb0 <HAL_RCC_OscConfig+0x474>)
 8002ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aea:	f7ff fbef 	bl	80022cc <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af2:	f7ff fbeb 	bl	80022cc <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e10c      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b04:	4b6a      	ldr	r3, [pc, #424]	; (8002cb0 <HAL_RCC_OscConfig+0x474>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d106      	bne.n	8002b26 <HAL_RCC_OscConfig+0x2ea>
 8002b18:	4b64      	ldr	r3, [pc, #400]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	4a63      	ldr	r2, [pc, #396]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	6713      	str	r3, [r2, #112]	; 0x70
 8002b24:	e01c      	b.n	8002b60 <HAL_RCC_OscConfig+0x324>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b05      	cmp	r3, #5
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x30c>
 8002b2e:	4b5f      	ldr	r3, [pc, #380]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	4a5e      	ldr	r2, [pc, #376]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b34:	f043 0304 	orr.w	r3, r3, #4
 8002b38:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3a:	4b5c      	ldr	r3, [pc, #368]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	4a5b      	ldr	r2, [pc, #364]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	6713      	str	r3, [r2, #112]	; 0x70
 8002b46:	e00b      	b.n	8002b60 <HAL_RCC_OscConfig+0x324>
 8002b48:	4b58      	ldr	r3, [pc, #352]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4c:	4a57      	ldr	r2, [pc, #348]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b4e:	f023 0301 	bic.w	r3, r3, #1
 8002b52:	6713      	str	r3, [r2, #112]	; 0x70
 8002b54:	4b55      	ldr	r3, [pc, #340]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	4a54      	ldr	r2, [pc, #336]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b5a:	f023 0304 	bic.w	r3, r3, #4
 8002b5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d015      	beq.n	8002b94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b68:	f7ff fbb0 	bl	80022cc <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6e:	e00a      	b.n	8002b86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b70:	f7ff fbac 	bl	80022cc <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e0cb      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b86:	4b49      	ldr	r3, [pc, #292]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0ee      	beq.n	8002b70 <HAL_RCC_OscConfig+0x334>
 8002b92:	e014      	b.n	8002bbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b94:	f7ff fb9a 	bl	80022cc <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9c:	f7ff fb96 	bl	80022cc <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e0b5      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb2:	4b3e      	ldr	r3, [pc, #248]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1ee      	bne.n	8002b9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bbe:	7dfb      	ldrb	r3, [r7, #23]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d105      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc4:	4b39      	ldr	r3, [pc, #228]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	4a38      	ldr	r2, [pc, #224]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 80a1 	beq.w	8002d1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bda:	4b34      	ldr	r3, [pc, #208]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d05c      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d141      	bne.n	8002c72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bee:	4b31      	ldr	r3, [pc, #196]	; (8002cb4 <HAL_RCC_OscConfig+0x478>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7ff fb6a 	bl	80022cc <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfc:	f7ff fb66 	bl	80022cc <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e087      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0e:	4b27      	ldr	r3, [pc, #156]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69da      	ldr	r2, [r3, #28]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	019b      	lsls	r3, r3, #6
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	085b      	lsrs	r3, r3, #1
 8002c32:	3b01      	subs	r3, #1
 8002c34:	041b      	lsls	r3, r3, #16
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	061b      	lsls	r3, r3, #24
 8002c3e:	491b      	ldr	r1, [pc, #108]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c44:	4b1b      	ldr	r3, [pc, #108]	; (8002cb4 <HAL_RCC_OscConfig+0x478>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4a:	f7ff fb3f 	bl	80022cc <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c52:	f7ff fb3b 	bl	80022cc <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e05c      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x416>
 8002c70:	e054      	b.n	8002d1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <HAL_RCC_OscConfig+0x478>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7ff fb28 	bl	80022cc <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c80:	f7ff fb24 	bl	80022cc <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e045      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x444>
 8002c9e:	e03d      	b.n	8002d1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d107      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e038      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40007000 	.word	0x40007000
 8002cb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <HAL_RCC_OscConfig+0x4ec>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d028      	beq.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d121      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d11a      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ce8:	4013      	ands	r3, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d111      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	085b      	lsrs	r3, r3, #1
 8002d00:	3b01      	subs	r3, #1
 8002d02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d107      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40023800 	.word	0x40023800

08002d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0cc      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d40:	4b68      	ldr	r3, [pc, #416]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 030f 	and.w	r3, r3, #15
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d90c      	bls.n	8002d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0b8      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d020      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d80:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	4a58      	ldr	r2, [pc, #352]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d98:	4b53      	ldr	r3, [pc, #332]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a52      	ldr	r2, [pc, #328]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da4:	4b50      	ldr	r3, [pc, #320]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	494d      	ldr	r1, [pc, #308]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d044      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d119      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e07f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d003      	beq.n	8002dea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dea:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e06f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e067      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e0a:	4b37      	ldr	r3, [pc, #220]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f023 0203 	bic.w	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4934      	ldr	r1, [pc, #208]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e1c:	f7ff fa56 	bl	80022cc <HAL_GetTick>
 8002e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e24:	f7ff fa52 	bl	80022cc <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e04f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 020c 	and.w	r2, r3, #12
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d1eb      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d20c      	bcs.n	8002e74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e032      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e80:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4916      	ldr	r1, [pc, #88]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	490e      	ldr	r1, [pc, #56]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eb2:	f000 f821 	bl	8002ef8 <HAL_RCC_GetSysClockFreq>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	490a      	ldr	r1, [pc, #40]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	5ccb      	ldrb	r3, [r1, r3]
 8002ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eca:	4a09      	ldr	r2, [pc, #36]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff f9b6 	bl	8002244 <HAL_InitTick>

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023c00 	.word	0x40023c00
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	080092f4 	.word	0x080092f4
 8002ef0:	20000000 	.word	0x20000000
 8002ef4:	20000004 	.word	0x20000004

08002ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002efc:	b090      	sub	sp, #64	; 0x40
 8002efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
 8002f04:	2300      	movs	r3, #0
 8002f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f08:	2300      	movs	r3, #0
 8002f0a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f10:	4b59      	ldr	r3, [pc, #356]	; (8003078 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 030c 	and.w	r3, r3, #12
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d00d      	beq.n	8002f38 <HAL_RCC_GetSysClockFreq+0x40>
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	f200 80a1 	bhi.w	8003064 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <HAL_RCC_GetSysClockFreq+0x34>
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d003      	beq.n	8002f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f2a:	e09b      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f2c:	4b53      	ldr	r3, [pc, #332]	; (800307c <HAL_RCC_GetSysClockFreq+0x184>)
 8002f2e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002f30:	e09b      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f32:	4b53      	ldr	r3, [pc, #332]	; (8003080 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f36:	e098      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f38:	4b4f      	ldr	r3, [pc, #316]	; (8003078 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f40:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f42:	4b4d      	ldr	r3, [pc, #308]	; (8003078 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d028      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4e:	4b4a      	ldr	r3, [pc, #296]	; (8003078 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	099b      	lsrs	r3, r3, #6
 8002f54:	2200      	movs	r2, #0
 8002f56:	623b      	str	r3, [r7, #32]
 8002f58:	627a      	str	r2, [r7, #36]	; 0x24
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f60:	2100      	movs	r1, #0
 8002f62:	4b47      	ldr	r3, [pc, #284]	; (8003080 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f64:	fb03 f201 	mul.w	r2, r3, r1
 8002f68:	2300      	movs	r3, #0
 8002f6a:	fb00 f303 	mul.w	r3, r0, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	4a43      	ldr	r2, [pc, #268]	; (8003080 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f72:	fba0 1202 	umull	r1, r2, r0, r2
 8002f76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f78:	460a      	mov	r2, r1
 8002f7a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f7e:	4413      	add	r3, r2
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	2200      	movs	r2, #0
 8002f86:	61bb      	str	r3, [r7, #24]
 8002f88:	61fa      	str	r2, [r7, #28]
 8002f8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f92:	f7fd fe69 	bl	8000c68 <__aeabi_uldivmod>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f9e:	e053      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa0:	4b35      	ldr	r3, [pc, #212]	; (8003078 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	099b      	lsrs	r3, r3, #6
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	617a      	str	r2, [r7, #20]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002fb2:	f04f 0b00 	mov.w	fp, #0
 8002fb6:	4652      	mov	r2, sl
 8002fb8:	465b      	mov	r3, fp
 8002fba:	f04f 0000 	mov.w	r0, #0
 8002fbe:	f04f 0100 	mov.w	r1, #0
 8002fc2:	0159      	lsls	r1, r3, #5
 8002fc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc8:	0150      	lsls	r0, r2, #5
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	ebb2 080a 	subs.w	r8, r2, sl
 8002fd2:	eb63 090b 	sbc.w	r9, r3, fp
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002fe2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002fe6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002fea:	ebb2 0408 	subs.w	r4, r2, r8
 8002fee:	eb63 0509 	sbc.w	r5, r3, r9
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	00eb      	lsls	r3, r5, #3
 8002ffc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003000:	00e2      	lsls	r2, r4, #3
 8003002:	4614      	mov	r4, r2
 8003004:	461d      	mov	r5, r3
 8003006:	eb14 030a 	adds.w	r3, r4, sl
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	eb45 030b 	adc.w	r3, r5, fp
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800301e:	4629      	mov	r1, r5
 8003020:	028b      	lsls	r3, r1, #10
 8003022:	4621      	mov	r1, r4
 8003024:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003028:	4621      	mov	r1, r4
 800302a:	028a      	lsls	r2, r1, #10
 800302c:	4610      	mov	r0, r2
 800302e:	4619      	mov	r1, r3
 8003030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003032:	2200      	movs	r2, #0
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	60fa      	str	r2, [r7, #12]
 8003038:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800303c:	f7fd fe14 	bl	8000c68 <__aeabi_uldivmod>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4613      	mov	r3, r2
 8003046:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_RCC_GetSysClockFreq+0x180>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	0c1b      	lsrs	r3, r3, #16
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	3301      	adds	r3, #1
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003058:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003060:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003062:	e002      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <HAL_RCC_GetSysClockFreq+0x184>)
 8003066:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800306c:	4618      	mov	r0, r3
 800306e:	3740      	adds	r7, #64	; 0x40
 8003070:	46bd      	mov	sp, r7
 8003072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800
 800307c:	00f42400 	.word	0x00f42400
 8003080:	017d7840 	.word	0x017d7840

08003084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003088:	4b03      	ldr	r3, [pc, #12]	; (8003098 <HAL_RCC_GetHCLKFreq+0x14>)
 800308a:	681b      	ldr	r3, [r3, #0]
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	20000000 	.word	0x20000000

0800309c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030a0:	f7ff fff0 	bl	8003084 <HAL_RCC_GetHCLKFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b05      	ldr	r3, [pc, #20]	; (80030bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	0a9b      	lsrs	r3, r3, #10
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	4903      	ldr	r1, [pc, #12]	; (80030c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030b2:	5ccb      	ldrb	r3, [r1, r3]
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40023800 	.word	0x40023800
 80030c0:	08009304 	.word	0x08009304

080030c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030c8:	f7ff ffdc 	bl	8003084 <HAL_RCC_GetHCLKFreq>
 80030cc:	4602      	mov	r2, r0
 80030ce:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	0b5b      	lsrs	r3, r3, #13
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	4903      	ldr	r1, [pc, #12]	; (80030e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030da:	5ccb      	ldrb	r3, [r1, r3]
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40023800 	.word	0x40023800
 80030e8:	08009304 	.word	0x08009304

080030ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e041      	b.n	8003182 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fe fe28 	bl	8001d68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3304      	adds	r3, #4
 8003128:	4619      	mov	r1, r3
 800312a:	4610      	mov	r0, r2
 800312c:	f000 faec 	bl	8003708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <HAL_TIM_PWM_Start+0x24>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	bf14      	ite	ne
 80031a8:	2301      	movne	r3, #1
 80031aa:	2300      	moveq	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	e022      	b.n	80031f6 <HAL_TIM_PWM_Start+0x6a>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d109      	bne.n	80031ca <HAL_TIM_PWM_Start+0x3e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b01      	cmp	r3, #1
 80031c0:	bf14      	ite	ne
 80031c2:	2301      	movne	r3, #1
 80031c4:	2300      	moveq	r3, #0
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	e015      	b.n	80031f6 <HAL_TIM_PWM_Start+0x6a>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d109      	bne.n	80031e4 <HAL_TIM_PWM_Start+0x58>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	bf14      	ite	ne
 80031dc:	2301      	movne	r3, #1
 80031de:	2300      	moveq	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	e008      	b.n	80031f6 <HAL_TIM_PWM_Start+0x6a>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	bf14      	ite	ne
 80031f0:	2301      	movne	r3, #1
 80031f2:	2300      	moveq	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e07c      	b.n	80032f8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d104      	bne.n	800320e <HAL_TIM_PWM_Start+0x82>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800320c:	e013      	b.n	8003236 <HAL_TIM_PWM_Start+0xaa>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b04      	cmp	r3, #4
 8003212:	d104      	bne.n	800321e <HAL_TIM_PWM_Start+0x92>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800321c:	e00b      	b.n	8003236 <HAL_TIM_PWM_Start+0xaa>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b08      	cmp	r3, #8
 8003222:	d104      	bne.n	800322e <HAL_TIM_PWM_Start+0xa2>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800322c:	e003      	b.n	8003236 <HAL_TIM_PWM_Start+0xaa>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2202      	movs	r2, #2
 8003232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2201      	movs	r2, #1
 800323c:	6839      	ldr	r1, [r7, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fcb2 	bl	8003ba8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a2d      	ldr	r2, [pc, #180]	; (8003300 <HAL_TIM_PWM_Start+0x174>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d004      	beq.n	8003258 <HAL_TIM_PWM_Start+0xcc>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a2c      	ldr	r2, [pc, #176]	; (8003304 <HAL_TIM_PWM_Start+0x178>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d101      	bne.n	800325c <HAL_TIM_PWM_Start+0xd0>
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <HAL_TIM_PWM_Start+0xd2>
 800325c:	2300      	movs	r3, #0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d007      	beq.n	8003272 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003270:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a22      	ldr	r2, [pc, #136]	; (8003300 <HAL_TIM_PWM_Start+0x174>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d022      	beq.n	80032c2 <HAL_TIM_PWM_Start+0x136>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003284:	d01d      	beq.n	80032c2 <HAL_TIM_PWM_Start+0x136>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a1f      	ldr	r2, [pc, #124]	; (8003308 <HAL_TIM_PWM_Start+0x17c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d018      	beq.n	80032c2 <HAL_TIM_PWM_Start+0x136>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a1d      	ldr	r2, [pc, #116]	; (800330c <HAL_TIM_PWM_Start+0x180>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d013      	beq.n	80032c2 <HAL_TIM_PWM_Start+0x136>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a1c      	ldr	r2, [pc, #112]	; (8003310 <HAL_TIM_PWM_Start+0x184>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00e      	beq.n	80032c2 <HAL_TIM_PWM_Start+0x136>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a16      	ldr	r2, [pc, #88]	; (8003304 <HAL_TIM_PWM_Start+0x178>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d009      	beq.n	80032c2 <HAL_TIM_PWM_Start+0x136>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a18      	ldr	r2, [pc, #96]	; (8003314 <HAL_TIM_PWM_Start+0x188>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d004      	beq.n	80032c2 <HAL_TIM_PWM_Start+0x136>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a16      	ldr	r2, [pc, #88]	; (8003318 <HAL_TIM_PWM_Start+0x18c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d111      	bne.n	80032e6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b06      	cmp	r3, #6
 80032d2:	d010      	beq.n	80032f6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e4:	e007      	b.n	80032f6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0201 	orr.w	r2, r2, #1
 80032f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40010000 	.word	0x40010000
 8003304:	40010400 	.word	0x40010400
 8003308:	40000400 	.word	0x40000400
 800330c:	40000800 	.word	0x40000800
 8003310:	40000c00 	.word	0x40000c00
 8003314:	40014000 	.word	0x40014000
 8003318:	40001800 	.word	0x40001800

0800331c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e097      	b.n	8003460 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d106      	bne.n	800334a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7fe fd2f 	bl	8001da8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2202      	movs	r2, #2
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003360:	f023 0307 	bic.w	r3, r3, #7
 8003364:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3304      	adds	r3, #4
 800336e:	4619      	mov	r1, r3
 8003370:	4610      	mov	r0, r2
 8003372:	f000 f9c9 	bl	8003708 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800339e:	f023 0303 	bic.w	r3, r3, #3
 80033a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	021b      	lsls	r3, r3, #8
 80033ae:	4313      	orrs	r3, r2
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80033bc:	f023 030c 	bic.w	r3, r3, #12
 80033c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	4313      	orrs	r3, r2
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	011a      	lsls	r2, r3, #4
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	031b      	lsls	r3, r3, #12
 80033ec:	4313      	orrs	r3, r2
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80033fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003402:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	4313      	orrs	r3, r2
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003478:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003480:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003488:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003490:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d110      	bne.n	80034ba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003498:	7bfb      	ldrb	r3, [r7, #15]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d102      	bne.n	80034a4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800349e:	7b7b      	ldrb	r3, [r7, #13]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d001      	beq.n	80034a8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e069      	b.n	800357c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034b8:	e031      	b.n	800351e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d110      	bne.n	80034e2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034c0:	7bbb      	ldrb	r3, [r7, #14]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d102      	bne.n	80034cc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034c6:	7b3b      	ldrb	r3, [r7, #12]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d001      	beq.n	80034d0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e055      	b.n	800357c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034e0:	e01d      	b.n	800351e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d108      	bne.n	80034fa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034e8:	7bbb      	ldrb	r3, [r7, #14]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d105      	bne.n	80034fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034ee:	7b7b      	ldrb	r3, [r7, #13]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d102      	bne.n	80034fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034f4:	7b3b      	ldrb	r3, [r7, #12]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d001      	beq.n	80034fe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e03e      	b.n	800357c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2202      	movs	r2, #2
 8003502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2202      	movs	r2, #2
 800350a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2202      	movs	r2, #2
 8003512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2202      	movs	r2, #2
 800351a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_TIM_Encoder_Start+0xc4>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2b04      	cmp	r3, #4
 8003528:	d008      	beq.n	800353c <HAL_TIM_Encoder_Start+0xd4>
 800352a:	e00f      	b.n	800354c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2201      	movs	r2, #1
 8003532:	2100      	movs	r1, #0
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fb37 	bl	8003ba8 <TIM_CCxChannelCmd>
      break;
 800353a:	e016      	b.n	800356a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2201      	movs	r2, #1
 8003542:	2104      	movs	r1, #4
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fb2f 	bl	8003ba8 <TIM_CCxChannelCmd>
      break;
 800354a:	e00e      	b.n	800356a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2201      	movs	r2, #1
 8003552:	2100      	movs	r1, #0
 8003554:	4618      	mov	r0, r3
 8003556:	f000 fb27 	bl	8003ba8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2201      	movs	r2, #1
 8003560:	2104      	movs	r1, #4
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fb20 	bl	8003ba8 <TIM_CCxChannelCmd>
      break;
 8003568:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0201 	orr.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800359e:	2302      	movs	r3, #2
 80035a0:	e0ae      	b.n	8003700 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b0c      	cmp	r3, #12
 80035ae:	f200 809f 	bhi.w	80036f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80035b2:	a201      	add	r2, pc, #4	; (adr r2, 80035b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b8:	080035ed 	.word	0x080035ed
 80035bc:	080036f1 	.word	0x080036f1
 80035c0:	080036f1 	.word	0x080036f1
 80035c4:	080036f1 	.word	0x080036f1
 80035c8:	0800362d 	.word	0x0800362d
 80035cc:	080036f1 	.word	0x080036f1
 80035d0:	080036f1 	.word	0x080036f1
 80035d4:	080036f1 	.word	0x080036f1
 80035d8:	0800366f 	.word	0x0800366f
 80035dc:	080036f1 	.word	0x080036f1
 80035e0:	080036f1 	.word	0x080036f1
 80035e4:	080036f1 	.word	0x080036f1
 80035e8:	080036af 	.word	0x080036af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 f928 	bl	8003848 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699a      	ldr	r2, [r3, #24]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0208 	orr.w	r2, r2, #8
 8003606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0204 	bic.w	r2, r2, #4
 8003616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6999      	ldr	r1, [r3, #24]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	691a      	ldr	r2, [r3, #16]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	619a      	str	r2, [r3, #24]
      break;
 800362a:	e064      	b.n	80036f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	4618      	mov	r0, r3
 8003634:	f000 f978 	bl	8003928 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699a      	ldr	r2, [r3, #24]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699a      	ldr	r2, [r3, #24]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6999      	ldr	r1, [r3, #24]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	021a      	lsls	r2, r3, #8
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	619a      	str	r2, [r3, #24]
      break;
 800366c:	e043      	b.n	80036f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	4618      	mov	r0, r3
 8003676:	f000 f9cd 	bl	8003a14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	69da      	ldr	r2, [r3, #28]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0208 	orr.w	r2, r2, #8
 8003688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69da      	ldr	r2, [r3, #28]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0204 	bic.w	r2, r2, #4
 8003698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69d9      	ldr	r1, [r3, #28]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	61da      	str	r2, [r3, #28]
      break;
 80036ac:	e023      	b.n	80036f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68b9      	ldr	r1, [r7, #8]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 fa21 	bl	8003afc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	69da      	ldr	r2, [r3, #28]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69da      	ldr	r2, [r3, #28]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69d9      	ldr	r1, [r3, #28]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	021a      	lsls	r2, r3, #8
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	61da      	str	r2, [r3, #28]
      break;
 80036ee:	e002      	b.n	80036f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	75fb      	strb	r3, [r7, #23]
      break;
 80036f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a40      	ldr	r2, [pc, #256]	; (800381c <TIM_Base_SetConfig+0x114>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d013      	beq.n	8003748 <TIM_Base_SetConfig+0x40>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003726:	d00f      	beq.n	8003748 <TIM_Base_SetConfig+0x40>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a3d      	ldr	r2, [pc, #244]	; (8003820 <TIM_Base_SetConfig+0x118>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00b      	beq.n	8003748 <TIM_Base_SetConfig+0x40>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a3c      	ldr	r2, [pc, #240]	; (8003824 <TIM_Base_SetConfig+0x11c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d007      	beq.n	8003748 <TIM_Base_SetConfig+0x40>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a3b      	ldr	r2, [pc, #236]	; (8003828 <TIM_Base_SetConfig+0x120>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d003      	beq.n	8003748 <TIM_Base_SetConfig+0x40>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a3a      	ldr	r2, [pc, #232]	; (800382c <TIM_Base_SetConfig+0x124>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d108      	bne.n	800375a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a2f      	ldr	r2, [pc, #188]	; (800381c <TIM_Base_SetConfig+0x114>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d02b      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003768:	d027      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a2c      	ldr	r2, [pc, #176]	; (8003820 <TIM_Base_SetConfig+0x118>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d023      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a2b      	ldr	r2, [pc, #172]	; (8003824 <TIM_Base_SetConfig+0x11c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d01f      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a2a      	ldr	r2, [pc, #168]	; (8003828 <TIM_Base_SetConfig+0x120>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d01b      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a29      	ldr	r2, [pc, #164]	; (800382c <TIM_Base_SetConfig+0x124>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d017      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a28      	ldr	r2, [pc, #160]	; (8003830 <TIM_Base_SetConfig+0x128>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d013      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a27      	ldr	r2, [pc, #156]	; (8003834 <TIM_Base_SetConfig+0x12c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00f      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a26      	ldr	r2, [pc, #152]	; (8003838 <TIM_Base_SetConfig+0x130>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00b      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a25      	ldr	r2, [pc, #148]	; (800383c <TIM_Base_SetConfig+0x134>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d007      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a24      	ldr	r2, [pc, #144]	; (8003840 <TIM_Base_SetConfig+0x138>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d003      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a23      	ldr	r2, [pc, #140]	; (8003844 <TIM_Base_SetConfig+0x13c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d108      	bne.n	80037cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a0a      	ldr	r2, [pc, #40]	; (800381c <TIM_Base_SetConfig+0x114>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d003      	beq.n	8003800 <TIM_Base_SetConfig+0xf8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a0c      	ldr	r2, [pc, #48]	; (800382c <TIM_Base_SetConfig+0x124>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d103      	bne.n	8003808 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	615a      	str	r2, [r3, #20]
}
 800380e:	bf00      	nop
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40010000 	.word	0x40010000
 8003820:	40000400 	.word	0x40000400
 8003824:	40000800 	.word	0x40000800
 8003828:	40000c00 	.word	0x40000c00
 800382c:	40010400 	.word	0x40010400
 8003830:	40014000 	.word	0x40014000
 8003834:	40014400 	.word	0x40014400
 8003838:	40014800 	.word	0x40014800
 800383c:	40001800 	.word	0x40001800
 8003840:	40001c00 	.word	0x40001c00
 8003844:	40002000 	.word	0x40002000

08003848 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	f023 0201 	bic.w	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0303 	bic.w	r3, r3, #3
 800387e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f023 0302 	bic.w	r3, r3, #2
 8003890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a20      	ldr	r2, [pc, #128]	; (8003920 <TIM_OC1_SetConfig+0xd8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d003      	beq.n	80038ac <TIM_OC1_SetConfig+0x64>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a1f      	ldr	r2, [pc, #124]	; (8003924 <TIM_OC1_SetConfig+0xdc>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d10c      	bne.n	80038c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f023 0308 	bic.w	r3, r3, #8
 80038b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f023 0304 	bic.w	r3, r3, #4
 80038c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a15      	ldr	r2, [pc, #84]	; (8003920 <TIM_OC1_SetConfig+0xd8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d003      	beq.n	80038d6 <TIM_OC1_SetConfig+0x8e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a14      	ldr	r2, [pc, #80]	; (8003924 <TIM_OC1_SetConfig+0xdc>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d111      	bne.n	80038fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	621a      	str	r2, [r3, #32]
}
 8003914:	bf00      	nop
 8003916:	371c      	adds	r7, #28
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	40010000 	.word	0x40010000
 8003924:	40010400 	.word	0x40010400

08003928 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	f023 0210 	bic.w	r2, r3, #16
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800395e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	021b      	lsls	r3, r3, #8
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4313      	orrs	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f023 0320 	bic.w	r3, r3, #32
 8003972:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4313      	orrs	r3, r2
 800397e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a22      	ldr	r2, [pc, #136]	; (8003a0c <TIM_OC2_SetConfig+0xe4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d003      	beq.n	8003990 <TIM_OC2_SetConfig+0x68>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a21      	ldr	r2, [pc, #132]	; (8003a10 <TIM_OC2_SetConfig+0xe8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d10d      	bne.n	80039ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a17      	ldr	r2, [pc, #92]	; (8003a0c <TIM_OC2_SetConfig+0xe4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d003      	beq.n	80039bc <TIM_OC2_SetConfig+0x94>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a16      	ldr	r2, [pc, #88]	; (8003a10 <TIM_OC2_SetConfig+0xe8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d113      	bne.n	80039e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	621a      	str	r2, [r3, #32]
}
 80039fe:	bf00      	nop
 8003a00:	371c      	adds	r7, #28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40010000 	.word	0x40010000
 8003a10:	40010400 	.word	0x40010400

08003a14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0303 	bic.w	r3, r3, #3
 8003a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a21      	ldr	r2, [pc, #132]	; (8003af4 <TIM_OC3_SetConfig+0xe0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d003      	beq.n	8003a7a <TIM_OC3_SetConfig+0x66>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a20      	ldr	r2, [pc, #128]	; (8003af8 <TIM_OC3_SetConfig+0xe4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d10d      	bne.n	8003a96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a16      	ldr	r2, [pc, #88]	; (8003af4 <TIM_OC3_SetConfig+0xe0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d003      	beq.n	8003aa6 <TIM_OC3_SetConfig+0x92>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a15      	ldr	r2, [pc, #84]	; (8003af8 <TIM_OC3_SetConfig+0xe4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d113      	bne.n	8003ace <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	621a      	str	r2, [r3, #32]
}
 8003ae8:	bf00      	nop
 8003aea:	371c      	adds	r7, #28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	40010000 	.word	0x40010000
 8003af8:	40010400 	.word	0x40010400

08003afc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	021b      	lsls	r3, r3, #8
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	031b      	lsls	r3, r3, #12
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a12      	ldr	r2, [pc, #72]	; (8003ba0 <TIM_OC4_SetConfig+0xa4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d003      	beq.n	8003b64 <TIM_OC4_SetConfig+0x68>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a11      	ldr	r2, [pc, #68]	; (8003ba4 <TIM_OC4_SetConfig+0xa8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d109      	bne.n	8003b78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	019b      	lsls	r3, r3, #6
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	621a      	str	r2, [r3, #32]
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40010000 	.word	0x40010000
 8003ba4:	40010400 	.word	0x40010400

08003ba8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	2201      	movs	r2, #1
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a1a      	ldr	r2, [r3, #32]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	401a      	ands	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a1a      	ldr	r2, [r3, #32]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f003 031f 	and.w	r3, r3, #31
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	621a      	str	r2, [r3, #32]
}
 8003be6:	bf00      	nop
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e05a      	b.n	8003cc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a21      	ldr	r2, [pc, #132]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d022      	beq.n	8003c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c58:	d01d      	beq.n	8003c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1d      	ldr	r2, [pc, #116]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d018      	beq.n	8003c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a1b      	ldr	r2, [pc, #108]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d013      	beq.n	8003c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a1a      	ldr	r2, [pc, #104]	; (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00e      	beq.n	8003c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a18      	ldr	r2, [pc, #96]	; (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d009      	beq.n	8003c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a17      	ldr	r2, [pc, #92]	; (8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d004      	beq.n	8003c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a15      	ldr	r2, [pc, #84]	; (8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d10c      	bne.n	8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40010000 	.word	0x40010000
 8003cd4:	40000400 	.word	0x40000400
 8003cd8:	40000800 	.word	0x40000800
 8003cdc:	40000c00 	.word	0x40000c00
 8003ce0:	40010400 	.word	0x40010400
 8003ce4:	40014000 	.word	0x40014000
 8003ce8:	40001800 	.word	0x40001800

08003cec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e03f      	b.n	8003d7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fe f8fe 	bl	8001f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2224      	movs	r2, #36	; 0x24
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f929 	bl	8003f88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b08a      	sub	sp, #40	; 0x28
 8003d8a:	af02      	add	r7, sp, #8
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	603b      	str	r3, [r7, #0]
 8003d92:	4613      	mov	r3, r2
 8003d94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d17c      	bne.n	8003ea0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <HAL_UART_Transmit+0x2c>
 8003dac:	88fb      	ldrh	r3, [r7, #6]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e075      	b.n	8003ea2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HAL_UART_Transmit+0x3e>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e06e      	b.n	8003ea2 <HAL_UART_Transmit+0x11c>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2221      	movs	r2, #33	; 0x21
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dda:	f7fe fa77 	bl	80022cc <HAL_GetTick>
 8003dde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	88fa      	ldrh	r2, [r7, #6]
 8003de4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	88fa      	ldrh	r2, [r7, #6]
 8003dea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df4:	d108      	bne.n	8003e08 <HAL_UART_Transmit+0x82>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d104      	bne.n	8003e08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	e003      	b.n	8003e10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e18:	e02a      	b.n	8003e70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2200      	movs	r2, #0
 8003e22:	2180      	movs	r1, #128	; 0x80
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 f840 	bl	8003eaa <UART_WaitOnFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e036      	b.n	8003ea2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10b      	bne.n	8003e52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	3302      	adds	r3, #2
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	e007      	b.n	8003e62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	781a      	ldrb	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1cf      	bne.n	8003e1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2200      	movs	r2, #0
 8003e82:	2140      	movs	r1, #64	; 0x40
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f810 	bl	8003eaa <UART_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e006      	b.n	8003ea2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e000      	b.n	8003ea2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ea0:	2302      	movs	r3, #2
  }
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3720      	adds	r7, #32
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b090      	sub	sp, #64	; 0x40
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	603b      	str	r3, [r7, #0]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eba:	e050      	b.n	8003f5e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec2:	d04c      	beq.n	8003f5e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d007      	beq.n	8003eda <UART_WaitOnFlagUntilTimeout+0x30>
 8003eca:	f7fe f9ff 	bl	80022cc <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d241      	bcs.n	8003f5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	330c      	adds	r3, #12
 8003ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	330c      	adds	r3, #12
 8003ef8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003efa:	637a      	str	r2, [r7, #52]	; 0x34
 8003efc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e5      	bne.n	8003eda <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3314      	adds	r3, #20
 8003f14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	e853 3f00 	ldrex	r3, [r3]
 8003f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f023 0301 	bic.w	r3, r3, #1
 8003f24:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3314      	adds	r3, #20
 8003f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f2e:	623a      	str	r2, [r7, #32]
 8003f30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f32:	69f9      	ldr	r1, [r7, #28]
 8003f34:	6a3a      	ldr	r2, [r7, #32]
 8003f36:	e841 2300 	strex	r3, r2, [r1]
 8003f3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1e5      	bne.n	8003f0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e00f      	b.n	8003f7e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4013      	ands	r3, r2
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	bf0c      	ite	eq
 8003f6e:	2301      	moveq	r3, #1
 8003f70:	2300      	movne	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d09f      	beq.n	8003ebc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3740      	adds	r7, #64	; 0x40
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f8c:	b0c0      	sub	sp, #256	; 0x100
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa4:	68d9      	ldr	r1, [r3, #12]
 8003fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	ea40 0301 	orr.w	r3, r0, r1
 8003fb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fe0:	f021 010c 	bic.w	r1, r1, #12
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003fee:	430b      	orrs	r3, r1
 8003ff0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004002:	6999      	ldr	r1, [r3, #24]
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	ea40 0301 	orr.w	r3, r0, r1
 800400e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	4b8f      	ldr	r3, [pc, #572]	; (8004254 <UART_SetConfig+0x2cc>)
 8004018:	429a      	cmp	r2, r3
 800401a:	d005      	beq.n	8004028 <UART_SetConfig+0xa0>
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4b8d      	ldr	r3, [pc, #564]	; (8004258 <UART_SetConfig+0x2d0>)
 8004024:	429a      	cmp	r2, r3
 8004026:	d104      	bne.n	8004032 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004028:	f7ff f84c 	bl	80030c4 <HAL_RCC_GetPCLK2Freq>
 800402c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004030:	e003      	b.n	800403a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004032:	f7ff f833 	bl	800309c <HAL_RCC_GetPCLK1Freq>
 8004036:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004044:	f040 810c 	bne.w	8004260 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800404c:	2200      	movs	r2, #0
 800404e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004052:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004056:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800405a:	4622      	mov	r2, r4
 800405c:	462b      	mov	r3, r5
 800405e:	1891      	adds	r1, r2, r2
 8004060:	65b9      	str	r1, [r7, #88]	; 0x58
 8004062:	415b      	adcs	r3, r3
 8004064:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004066:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800406a:	4621      	mov	r1, r4
 800406c:	eb12 0801 	adds.w	r8, r2, r1
 8004070:	4629      	mov	r1, r5
 8004072:	eb43 0901 	adc.w	r9, r3, r1
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004082:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004086:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800408a:	4690      	mov	r8, r2
 800408c:	4699      	mov	r9, r3
 800408e:	4623      	mov	r3, r4
 8004090:	eb18 0303 	adds.w	r3, r8, r3
 8004094:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004098:	462b      	mov	r3, r5
 800409a:	eb49 0303 	adc.w	r3, r9, r3
 800409e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040b6:	460b      	mov	r3, r1
 80040b8:	18db      	adds	r3, r3, r3
 80040ba:	653b      	str	r3, [r7, #80]	; 0x50
 80040bc:	4613      	mov	r3, r2
 80040be:	eb42 0303 	adc.w	r3, r2, r3
 80040c2:	657b      	str	r3, [r7, #84]	; 0x54
 80040c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040cc:	f7fc fdcc 	bl	8000c68 <__aeabi_uldivmod>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4b61      	ldr	r3, [pc, #388]	; (800425c <UART_SetConfig+0x2d4>)
 80040d6:	fba3 2302 	umull	r2, r3, r3, r2
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	011c      	lsls	r4, r3, #4
 80040de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040f0:	4642      	mov	r2, r8
 80040f2:	464b      	mov	r3, r9
 80040f4:	1891      	adds	r1, r2, r2
 80040f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80040f8:	415b      	adcs	r3, r3
 80040fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004100:	4641      	mov	r1, r8
 8004102:	eb12 0a01 	adds.w	sl, r2, r1
 8004106:	4649      	mov	r1, r9
 8004108:	eb43 0b01 	adc.w	fp, r3, r1
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004118:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800411c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004120:	4692      	mov	sl, r2
 8004122:	469b      	mov	fp, r3
 8004124:	4643      	mov	r3, r8
 8004126:	eb1a 0303 	adds.w	r3, sl, r3
 800412a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800412e:	464b      	mov	r3, r9
 8004130:	eb4b 0303 	adc.w	r3, fp, r3
 8004134:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004144:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004148:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800414c:	460b      	mov	r3, r1
 800414e:	18db      	adds	r3, r3, r3
 8004150:	643b      	str	r3, [r7, #64]	; 0x40
 8004152:	4613      	mov	r3, r2
 8004154:	eb42 0303 	adc.w	r3, r2, r3
 8004158:	647b      	str	r3, [r7, #68]	; 0x44
 800415a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800415e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004162:	f7fc fd81 	bl	8000c68 <__aeabi_uldivmod>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4611      	mov	r1, r2
 800416c:	4b3b      	ldr	r3, [pc, #236]	; (800425c <UART_SetConfig+0x2d4>)
 800416e:	fba3 2301 	umull	r2, r3, r3, r1
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	2264      	movs	r2, #100	; 0x64
 8004176:	fb02 f303 	mul.w	r3, r2, r3
 800417a:	1acb      	subs	r3, r1, r3
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004182:	4b36      	ldr	r3, [pc, #216]	; (800425c <UART_SetConfig+0x2d4>)
 8004184:	fba3 2302 	umull	r2, r3, r3, r2
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004190:	441c      	add	r4, r3
 8004192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004196:	2200      	movs	r2, #0
 8004198:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800419c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041a4:	4642      	mov	r2, r8
 80041a6:	464b      	mov	r3, r9
 80041a8:	1891      	adds	r1, r2, r2
 80041aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80041ac:	415b      	adcs	r3, r3
 80041ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041b4:	4641      	mov	r1, r8
 80041b6:	1851      	adds	r1, r2, r1
 80041b8:	6339      	str	r1, [r7, #48]	; 0x30
 80041ba:	4649      	mov	r1, r9
 80041bc:	414b      	adcs	r3, r1
 80041be:	637b      	str	r3, [r7, #52]	; 0x34
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041cc:	4659      	mov	r1, fp
 80041ce:	00cb      	lsls	r3, r1, #3
 80041d0:	4651      	mov	r1, sl
 80041d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041d6:	4651      	mov	r1, sl
 80041d8:	00ca      	lsls	r2, r1, #3
 80041da:	4610      	mov	r0, r2
 80041dc:	4619      	mov	r1, r3
 80041de:	4603      	mov	r3, r0
 80041e0:	4642      	mov	r2, r8
 80041e2:	189b      	adds	r3, r3, r2
 80041e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041e8:	464b      	mov	r3, r9
 80041ea:	460a      	mov	r2, r1
 80041ec:	eb42 0303 	adc.w	r3, r2, r3
 80041f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004200:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004204:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004208:	460b      	mov	r3, r1
 800420a:	18db      	adds	r3, r3, r3
 800420c:	62bb      	str	r3, [r7, #40]	; 0x28
 800420e:	4613      	mov	r3, r2
 8004210:	eb42 0303 	adc.w	r3, r2, r3
 8004214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004216:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800421a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800421e:	f7fc fd23 	bl	8000c68 <__aeabi_uldivmod>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4b0d      	ldr	r3, [pc, #52]	; (800425c <UART_SetConfig+0x2d4>)
 8004228:	fba3 1302 	umull	r1, r3, r3, r2
 800422c:	095b      	lsrs	r3, r3, #5
 800422e:	2164      	movs	r1, #100	; 0x64
 8004230:	fb01 f303 	mul.w	r3, r1, r3
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	3332      	adds	r3, #50	; 0x32
 800423a:	4a08      	ldr	r2, [pc, #32]	; (800425c <UART_SetConfig+0x2d4>)
 800423c:	fba2 2303 	umull	r2, r3, r2, r3
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	f003 0207 	and.w	r2, r3, #7
 8004246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4422      	add	r2, r4
 800424e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004250:	e105      	b.n	800445e <UART_SetConfig+0x4d6>
 8004252:	bf00      	nop
 8004254:	40011000 	.word	0x40011000
 8004258:	40011400 	.word	0x40011400
 800425c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004264:	2200      	movs	r2, #0
 8004266:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800426a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800426e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004272:	4642      	mov	r2, r8
 8004274:	464b      	mov	r3, r9
 8004276:	1891      	adds	r1, r2, r2
 8004278:	6239      	str	r1, [r7, #32]
 800427a:	415b      	adcs	r3, r3
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
 800427e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004282:	4641      	mov	r1, r8
 8004284:	1854      	adds	r4, r2, r1
 8004286:	4649      	mov	r1, r9
 8004288:	eb43 0501 	adc.w	r5, r3, r1
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	f04f 0300 	mov.w	r3, #0
 8004294:	00eb      	lsls	r3, r5, #3
 8004296:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800429a:	00e2      	lsls	r2, r4, #3
 800429c:	4614      	mov	r4, r2
 800429e:	461d      	mov	r5, r3
 80042a0:	4643      	mov	r3, r8
 80042a2:	18e3      	adds	r3, r4, r3
 80042a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042a8:	464b      	mov	r3, r9
 80042aa:	eb45 0303 	adc.w	r3, r5, r3
 80042ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042ce:	4629      	mov	r1, r5
 80042d0:	008b      	lsls	r3, r1, #2
 80042d2:	4621      	mov	r1, r4
 80042d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042d8:	4621      	mov	r1, r4
 80042da:	008a      	lsls	r2, r1, #2
 80042dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042e0:	f7fc fcc2 	bl	8000c68 <__aeabi_uldivmod>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4b60      	ldr	r3, [pc, #384]	; (800446c <UART_SetConfig+0x4e4>)
 80042ea:	fba3 2302 	umull	r2, r3, r3, r2
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	011c      	lsls	r4, r3, #4
 80042f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004300:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004304:	4642      	mov	r2, r8
 8004306:	464b      	mov	r3, r9
 8004308:	1891      	adds	r1, r2, r2
 800430a:	61b9      	str	r1, [r7, #24]
 800430c:	415b      	adcs	r3, r3
 800430e:	61fb      	str	r3, [r7, #28]
 8004310:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004314:	4641      	mov	r1, r8
 8004316:	1851      	adds	r1, r2, r1
 8004318:	6139      	str	r1, [r7, #16]
 800431a:	4649      	mov	r1, r9
 800431c:	414b      	adcs	r3, r1
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800432c:	4659      	mov	r1, fp
 800432e:	00cb      	lsls	r3, r1, #3
 8004330:	4651      	mov	r1, sl
 8004332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004336:	4651      	mov	r1, sl
 8004338:	00ca      	lsls	r2, r1, #3
 800433a:	4610      	mov	r0, r2
 800433c:	4619      	mov	r1, r3
 800433e:	4603      	mov	r3, r0
 8004340:	4642      	mov	r2, r8
 8004342:	189b      	adds	r3, r3, r2
 8004344:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004348:	464b      	mov	r3, r9
 800434a:	460a      	mov	r2, r1
 800434c:	eb42 0303 	adc.w	r3, r2, r3
 8004350:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	67bb      	str	r3, [r7, #120]	; 0x78
 800435e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800436c:	4649      	mov	r1, r9
 800436e:	008b      	lsls	r3, r1, #2
 8004370:	4641      	mov	r1, r8
 8004372:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004376:	4641      	mov	r1, r8
 8004378:	008a      	lsls	r2, r1, #2
 800437a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800437e:	f7fc fc73 	bl	8000c68 <__aeabi_uldivmod>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4b39      	ldr	r3, [pc, #228]	; (800446c <UART_SetConfig+0x4e4>)
 8004388:	fba3 1302 	umull	r1, r3, r3, r2
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	2164      	movs	r1, #100	; 0x64
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	3332      	adds	r3, #50	; 0x32
 800439a:	4a34      	ldr	r2, [pc, #208]	; (800446c <UART_SetConfig+0x4e4>)
 800439c:	fba2 2303 	umull	r2, r3, r2, r3
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043a6:	441c      	add	r4, r3
 80043a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ac:	2200      	movs	r2, #0
 80043ae:	673b      	str	r3, [r7, #112]	; 0x70
 80043b0:	677a      	str	r2, [r7, #116]	; 0x74
 80043b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043b6:	4642      	mov	r2, r8
 80043b8:	464b      	mov	r3, r9
 80043ba:	1891      	adds	r1, r2, r2
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	415b      	adcs	r3, r3
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043c6:	4641      	mov	r1, r8
 80043c8:	1851      	adds	r1, r2, r1
 80043ca:	6039      	str	r1, [r7, #0]
 80043cc:	4649      	mov	r1, r9
 80043ce:	414b      	adcs	r3, r1
 80043d0:	607b      	str	r3, [r7, #4]
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043de:	4659      	mov	r1, fp
 80043e0:	00cb      	lsls	r3, r1, #3
 80043e2:	4651      	mov	r1, sl
 80043e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e8:	4651      	mov	r1, sl
 80043ea:	00ca      	lsls	r2, r1, #3
 80043ec:	4610      	mov	r0, r2
 80043ee:	4619      	mov	r1, r3
 80043f0:	4603      	mov	r3, r0
 80043f2:	4642      	mov	r2, r8
 80043f4:	189b      	adds	r3, r3, r2
 80043f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80043f8:	464b      	mov	r3, r9
 80043fa:	460a      	mov	r2, r1
 80043fc:	eb42 0303 	adc.w	r3, r2, r3
 8004400:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	663b      	str	r3, [r7, #96]	; 0x60
 800440c:	667a      	str	r2, [r7, #100]	; 0x64
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	f04f 0300 	mov.w	r3, #0
 8004416:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800441a:	4649      	mov	r1, r9
 800441c:	008b      	lsls	r3, r1, #2
 800441e:	4641      	mov	r1, r8
 8004420:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004424:	4641      	mov	r1, r8
 8004426:	008a      	lsls	r2, r1, #2
 8004428:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800442c:	f7fc fc1c 	bl	8000c68 <__aeabi_uldivmod>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4b0d      	ldr	r3, [pc, #52]	; (800446c <UART_SetConfig+0x4e4>)
 8004436:	fba3 1302 	umull	r1, r3, r3, r2
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	2164      	movs	r1, #100	; 0x64
 800443e:	fb01 f303 	mul.w	r3, r1, r3
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	3332      	adds	r3, #50	; 0x32
 8004448:	4a08      	ldr	r2, [pc, #32]	; (800446c <UART_SetConfig+0x4e4>)
 800444a:	fba2 2303 	umull	r2, r3, r2, r3
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	f003 020f 	and.w	r2, r3, #15
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4422      	add	r2, r4
 800445c:	609a      	str	r2, [r3, #8]
}
 800445e:	bf00      	nop
 8004460:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004464:	46bd      	mov	sp, r7
 8004466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800446a:	bf00      	nop
 800446c:	51eb851f 	.word	0x51eb851f

08004470 <__errno>:
 8004470:	4b01      	ldr	r3, [pc, #4]	; (8004478 <__errno+0x8>)
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	2000000c 	.word	0x2000000c

0800447c <__libc_init_array>:
 800447c:	b570      	push	{r4, r5, r6, lr}
 800447e:	4d0d      	ldr	r5, [pc, #52]	; (80044b4 <__libc_init_array+0x38>)
 8004480:	4c0d      	ldr	r4, [pc, #52]	; (80044b8 <__libc_init_array+0x3c>)
 8004482:	1b64      	subs	r4, r4, r5
 8004484:	10a4      	asrs	r4, r4, #2
 8004486:	2600      	movs	r6, #0
 8004488:	42a6      	cmp	r6, r4
 800448a:	d109      	bne.n	80044a0 <__libc_init_array+0x24>
 800448c:	4d0b      	ldr	r5, [pc, #44]	; (80044bc <__libc_init_array+0x40>)
 800448e:	4c0c      	ldr	r4, [pc, #48]	; (80044c0 <__libc_init_array+0x44>)
 8004490:	f004 ff18 	bl	80092c4 <_init>
 8004494:	1b64      	subs	r4, r4, r5
 8004496:	10a4      	asrs	r4, r4, #2
 8004498:	2600      	movs	r6, #0
 800449a:	42a6      	cmp	r6, r4
 800449c:	d105      	bne.n	80044aa <__libc_init_array+0x2e>
 800449e:	bd70      	pop	{r4, r5, r6, pc}
 80044a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a4:	4798      	blx	r3
 80044a6:	3601      	adds	r6, #1
 80044a8:	e7ee      	b.n	8004488 <__libc_init_array+0xc>
 80044aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ae:	4798      	blx	r3
 80044b0:	3601      	adds	r6, #1
 80044b2:	e7f2      	b.n	800449a <__libc_init_array+0x1e>
 80044b4:	08009908 	.word	0x08009908
 80044b8:	08009908 	.word	0x08009908
 80044bc:	08009908 	.word	0x08009908
 80044c0:	0800990c 	.word	0x0800990c

080044c4 <memset>:
 80044c4:	4402      	add	r2, r0
 80044c6:	4603      	mov	r3, r0
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d100      	bne.n	80044ce <memset+0xa>
 80044cc:	4770      	bx	lr
 80044ce:	f803 1b01 	strb.w	r1, [r3], #1
 80044d2:	e7f9      	b.n	80044c8 <memset+0x4>

080044d4 <__cvt>:
 80044d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044d8:	ec55 4b10 	vmov	r4, r5, d0
 80044dc:	2d00      	cmp	r5, #0
 80044de:	460e      	mov	r6, r1
 80044e0:	4619      	mov	r1, r3
 80044e2:	462b      	mov	r3, r5
 80044e4:	bfbb      	ittet	lt
 80044e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80044ea:	461d      	movlt	r5, r3
 80044ec:	2300      	movge	r3, #0
 80044ee:	232d      	movlt	r3, #45	; 0x2d
 80044f0:	700b      	strb	r3, [r1, #0]
 80044f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80044f8:	4691      	mov	r9, r2
 80044fa:	f023 0820 	bic.w	r8, r3, #32
 80044fe:	bfbc      	itt	lt
 8004500:	4622      	movlt	r2, r4
 8004502:	4614      	movlt	r4, r2
 8004504:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004508:	d005      	beq.n	8004516 <__cvt+0x42>
 800450a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800450e:	d100      	bne.n	8004512 <__cvt+0x3e>
 8004510:	3601      	adds	r6, #1
 8004512:	2102      	movs	r1, #2
 8004514:	e000      	b.n	8004518 <__cvt+0x44>
 8004516:	2103      	movs	r1, #3
 8004518:	ab03      	add	r3, sp, #12
 800451a:	9301      	str	r3, [sp, #4]
 800451c:	ab02      	add	r3, sp, #8
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	ec45 4b10 	vmov	d0, r4, r5
 8004524:	4653      	mov	r3, sl
 8004526:	4632      	mov	r2, r6
 8004528:	f000 fcea 	bl	8004f00 <_dtoa_r>
 800452c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004530:	4607      	mov	r7, r0
 8004532:	d102      	bne.n	800453a <__cvt+0x66>
 8004534:	f019 0f01 	tst.w	r9, #1
 8004538:	d022      	beq.n	8004580 <__cvt+0xac>
 800453a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800453e:	eb07 0906 	add.w	r9, r7, r6
 8004542:	d110      	bne.n	8004566 <__cvt+0x92>
 8004544:	783b      	ldrb	r3, [r7, #0]
 8004546:	2b30      	cmp	r3, #48	; 0x30
 8004548:	d10a      	bne.n	8004560 <__cvt+0x8c>
 800454a:	2200      	movs	r2, #0
 800454c:	2300      	movs	r3, #0
 800454e:	4620      	mov	r0, r4
 8004550:	4629      	mov	r1, r5
 8004552:	f7fc fac9 	bl	8000ae8 <__aeabi_dcmpeq>
 8004556:	b918      	cbnz	r0, 8004560 <__cvt+0x8c>
 8004558:	f1c6 0601 	rsb	r6, r6, #1
 800455c:	f8ca 6000 	str.w	r6, [sl]
 8004560:	f8da 3000 	ldr.w	r3, [sl]
 8004564:	4499      	add	r9, r3
 8004566:	2200      	movs	r2, #0
 8004568:	2300      	movs	r3, #0
 800456a:	4620      	mov	r0, r4
 800456c:	4629      	mov	r1, r5
 800456e:	f7fc fabb 	bl	8000ae8 <__aeabi_dcmpeq>
 8004572:	b108      	cbz	r0, 8004578 <__cvt+0xa4>
 8004574:	f8cd 900c 	str.w	r9, [sp, #12]
 8004578:	2230      	movs	r2, #48	; 0x30
 800457a:	9b03      	ldr	r3, [sp, #12]
 800457c:	454b      	cmp	r3, r9
 800457e:	d307      	bcc.n	8004590 <__cvt+0xbc>
 8004580:	9b03      	ldr	r3, [sp, #12]
 8004582:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004584:	1bdb      	subs	r3, r3, r7
 8004586:	4638      	mov	r0, r7
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	b004      	add	sp, #16
 800458c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004590:	1c59      	adds	r1, r3, #1
 8004592:	9103      	str	r1, [sp, #12]
 8004594:	701a      	strb	r2, [r3, #0]
 8004596:	e7f0      	b.n	800457a <__cvt+0xa6>

08004598 <__exponent>:
 8004598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800459a:	4603      	mov	r3, r0
 800459c:	2900      	cmp	r1, #0
 800459e:	bfb8      	it	lt
 80045a0:	4249      	neglt	r1, r1
 80045a2:	f803 2b02 	strb.w	r2, [r3], #2
 80045a6:	bfb4      	ite	lt
 80045a8:	222d      	movlt	r2, #45	; 0x2d
 80045aa:	222b      	movge	r2, #43	; 0x2b
 80045ac:	2909      	cmp	r1, #9
 80045ae:	7042      	strb	r2, [r0, #1]
 80045b0:	dd2a      	ble.n	8004608 <__exponent+0x70>
 80045b2:	f10d 0407 	add.w	r4, sp, #7
 80045b6:	46a4      	mov	ip, r4
 80045b8:	270a      	movs	r7, #10
 80045ba:	46a6      	mov	lr, r4
 80045bc:	460a      	mov	r2, r1
 80045be:	fb91 f6f7 	sdiv	r6, r1, r7
 80045c2:	fb07 1516 	mls	r5, r7, r6, r1
 80045c6:	3530      	adds	r5, #48	; 0x30
 80045c8:	2a63      	cmp	r2, #99	; 0x63
 80045ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80045ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80045d2:	4631      	mov	r1, r6
 80045d4:	dcf1      	bgt.n	80045ba <__exponent+0x22>
 80045d6:	3130      	adds	r1, #48	; 0x30
 80045d8:	f1ae 0502 	sub.w	r5, lr, #2
 80045dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80045e0:	1c44      	adds	r4, r0, #1
 80045e2:	4629      	mov	r1, r5
 80045e4:	4561      	cmp	r1, ip
 80045e6:	d30a      	bcc.n	80045fe <__exponent+0x66>
 80045e8:	f10d 0209 	add.w	r2, sp, #9
 80045ec:	eba2 020e 	sub.w	r2, r2, lr
 80045f0:	4565      	cmp	r5, ip
 80045f2:	bf88      	it	hi
 80045f4:	2200      	movhi	r2, #0
 80045f6:	4413      	add	r3, r2
 80045f8:	1a18      	subs	r0, r3, r0
 80045fa:	b003      	add	sp, #12
 80045fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004602:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004606:	e7ed      	b.n	80045e4 <__exponent+0x4c>
 8004608:	2330      	movs	r3, #48	; 0x30
 800460a:	3130      	adds	r1, #48	; 0x30
 800460c:	7083      	strb	r3, [r0, #2]
 800460e:	70c1      	strb	r1, [r0, #3]
 8004610:	1d03      	adds	r3, r0, #4
 8004612:	e7f1      	b.n	80045f8 <__exponent+0x60>

08004614 <_printf_float>:
 8004614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004618:	ed2d 8b02 	vpush	{d8}
 800461c:	b08d      	sub	sp, #52	; 0x34
 800461e:	460c      	mov	r4, r1
 8004620:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004624:	4616      	mov	r6, r2
 8004626:	461f      	mov	r7, r3
 8004628:	4605      	mov	r5, r0
 800462a:	f001 fa57 	bl	8005adc <_localeconv_r>
 800462e:	f8d0 a000 	ldr.w	sl, [r0]
 8004632:	4650      	mov	r0, sl
 8004634:	f7fb fddc 	bl	80001f0 <strlen>
 8004638:	2300      	movs	r3, #0
 800463a:	930a      	str	r3, [sp, #40]	; 0x28
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	9305      	str	r3, [sp, #20]
 8004640:	f8d8 3000 	ldr.w	r3, [r8]
 8004644:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004648:	3307      	adds	r3, #7
 800464a:	f023 0307 	bic.w	r3, r3, #7
 800464e:	f103 0208 	add.w	r2, r3, #8
 8004652:	f8c8 2000 	str.w	r2, [r8]
 8004656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800465e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004662:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004666:	9307      	str	r3, [sp, #28]
 8004668:	f8cd 8018 	str.w	r8, [sp, #24]
 800466c:	ee08 0a10 	vmov	s16, r0
 8004670:	4b9f      	ldr	r3, [pc, #636]	; (80048f0 <_printf_float+0x2dc>)
 8004672:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004676:	f04f 32ff 	mov.w	r2, #4294967295
 800467a:	f7fc fa67 	bl	8000b4c <__aeabi_dcmpun>
 800467e:	bb88      	cbnz	r0, 80046e4 <_printf_float+0xd0>
 8004680:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004684:	4b9a      	ldr	r3, [pc, #616]	; (80048f0 <_printf_float+0x2dc>)
 8004686:	f04f 32ff 	mov.w	r2, #4294967295
 800468a:	f7fc fa41 	bl	8000b10 <__aeabi_dcmple>
 800468e:	bb48      	cbnz	r0, 80046e4 <_printf_float+0xd0>
 8004690:	2200      	movs	r2, #0
 8004692:	2300      	movs	r3, #0
 8004694:	4640      	mov	r0, r8
 8004696:	4649      	mov	r1, r9
 8004698:	f7fc fa30 	bl	8000afc <__aeabi_dcmplt>
 800469c:	b110      	cbz	r0, 80046a4 <_printf_float+0x90>
 800469e:	232d      	movs	r3, #45	; 0x2d
 80046a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046a4:	4b93      	ldr	r3, [pc, #588]	; (80048f4 <_printf_float+0x2e0>)
 80046a6:	4894      	ldr	r0, [pc, #592]	; (80048f8 <_printf_float+0x2e4>)
 80046a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80046ac:	bf94      	ite	ls
 80046ae:	4698      	movls	r8, r3
 80046b0:	4680      	movhi	r8, r0
 80046b2:	2303      	movs	r3, #3
 80046b4:	6123      	str	r3, [r4, #16]
 80046b6:	9b05      	ldr	r3, [sp, #20]
 80046b8:	f023 0204 	bic.w	r2, r3, #4
 80046bc:	6022      	str	r2, [r4, #0]
 80046be:	f04f 0900 	mov.w	r9, #0
 80046c2:	9700      	str	r7, [sp, #0]
 80046c4:	4633      	mov	r3, r6
 80046c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80046c8:	4621      	mov	r1, r4
 80046ca:	4628      	mov	r0, r5
 80046cc:	f000 f9d8 	bl	8004a80 <_printf_common>
 80046d0:	3001      	adds	r0, #1
 80046d2:	f040 8090 	bne.w	80047f6 <_printf_float+0x1e2>
 80046d6:	f04f 30ff 	mov.w	r0, #4294967295
 80046da:	b00d      	add	sp, #52	; 0x34
 80046dc:	ecbd 8b02 	vpop	{d8}
 80046e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e4:	4642      	mov	r2, r8
 80046e6:	464b      	mov	r3, r9
 80046e8:	4640      	mov	r0, r8
 80046ea:	4649      	mov	r1, r9
 80046ec:	f7fc fa2e 	bl	8000b4c <__aeabi_dcmpun>
 80046f0:	b140      	cbz	r0, 8004704 <_printf_float+0xf0>
 80046f2:	464b      	mov	r3, r9
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	bfbc      	itt	lt
 80046f8:	232d      	movlt	r3, #45	; 0x2d
 80046fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80046fe:	487f      	ldr	r0, [pc, #508]	; (80048fc <_printf_float+0x2e8>)
 8004700:	4b7f      	ldr	r3, [pc, #508]	; (8004900 <_printf_float+0x2ec>)
 8004702:	e7d1      	b.n	80046a8 <_printf_float+0x94>
 8004704:	6863      	ldr	r3, [r4, #4]
 8004706:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800470a:	9206      	str	r2, [sp, #24]
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	d13f      	bne.n	8004790 <_printf_float+0x17c>
 8004710:	2306      	movs	r3, #6
 8004712:	6063      	str	r3, [r4, #4]
 8004714:	9b05      	ldr	r3, [sp, #20]
 8004716:	6861      	ldr	r1, [r4, #4]
 8004718:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800471c:	2300      	movs	r3, #0
 800471e:	9303      	str	r3, [sp, #12]
 8004720:	ab0a      	add	r3, sp, #40	; 0x28
 8004722:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004726:	ab09      	add	r3, sp, #36	; 0x24
 8004728:	ec49 8b10 	vmov	d0, r8, r9
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	6022      	str	r2, [r4, #0]
 8004730:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004734:	4628      	mov	r0, r5
 8004736:	f7ff fecd 	bl	80044d4 <__cvt>
 800473a:	9b06      	ldr	r3, [sp, #24]
 800473c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800473e:	2b47      	cmp	r3, #71	; 0x47
 8004740:	4680      	mov	r8, r0
 8004742:	d108      	bne.n	8004756 <_printf_float+0x142>
 8004744:	1cc8      	adds	r0, r1, #3
 8004746:	db02      	blt.n	800474e <_printf_float+0x13a>
 8004748:	6863      	ldr	r3, [r4, #4]
 800474a:	4299      	cmp	r1, r3
 800474c:	dd41      	ble.n	80047d2 <_printf_float+0x1be>
 800474e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004752:	fa5f fb8b 	uxtb.w	fp, fp
 8004756:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800475a:	d820      	bhi.n	800479e <_printf_float+0x18a>
 800475c:	3901      	subs	r1, #1
 800475e:	465a      	mov	r2, fp
 8004760:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004764:	9109      	str	r1, [sp, #36]	; 0x24
 8004766:	f7ff ff17 	bl	8004598 <__exponent>
 800476a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800476c:	1813      	adds	r3, r2, r0
 800476e:	2a01      	cmp	r2, #1
 8004770:	4681      	mov	r9, r0
 8004772:	6123      	str	r3, [r4, #16]
 8004774:	dc02      	bgt.n	800477c <_printf_float+0x168>
 8004776:	6822      	ldr	r2, [r4, #0]
 8004778:	07d2      	lsls	r2, r2, #31
 800477a:	d501      	bpl.n	8004780 <_printf_float+0x16c>
 800477c:	3301      	adds	r3, #1
 800477e:	6123      	str	r3, [r4, #16]
 8004780:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004784:	2b00      	cmp	r3, #0
 8004786:	d09c      	beq.n	80046c2 <_printf_float+0xae>
 8004788:	232d      	movs	r3, #45	; 0x2d
 800478a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800478e:	e798      	b.n	80046c2 <_printf_float+0xae>
 8004790:	9a06      	ldr	r2, [sp, #24]
 8004792:	2a47      	cmp	r2, #71	; 0x47
 8004794:	d1be      	bne.n	8004714 <_printf_float+0x100>
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1bc      	bne.n	8004714 <_printf_float+0x100>
 800479a:	2301      	movs	r3, #1
 800479c:	e7b9      	b.n	8004712 <_printf_float+0xfe>
 800479e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80047a2:	d118      	bne.n	80047d6 <_printf_float+0x1c2>
 80047a4:	2900      	cmp	r1, #0
 80047a6:	6863      	ldr	r3, [r4, #4]
 80047a8:	dd0b      	ble.n	80047c2 <_printf_float+0x1ae>
 80047aa:	6121      	str	r1, [r4, #16]
 80047ac:	b913      	cbnz	r3, 80047b4 <_printf_float+0x1a0>
 80047ae:	6822      	ldr	r2, [r4, #0]
 80047b0:	07d0      	lsls	r0, r2, #31
 80047b2:	d502      	bpl.n	80047ba <_printf_float+0x1a6>
 80047b4:	3301      	adds	r3, #1
 80047b6:	440b      	add	r3, r1
 80047b8:	6123      	str	r3, [r4, #16]
 80047ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80047bc:	f04f 0900 	mov.w	r9, #0
 80047c0:	e7de      	b.n	8004780 <_printf_float+0x16c>
 80047c2:	b913      	cbnz	r3, 80047ca <_printf_float+0x1b6>
 80047c4:	6822      	ldr	r2, [r4, #0]
 80047c6:	07d2      	lsls	r2, r2, #31
 80047c8:	d501      	bpl.n	80047ce <_printf_float+0x1ba>
 80047ca:	3302      	adds	r3, #2
 80047cc:	e7f4      	b.n	80047b8 <_printf_float+0x1a4>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e7f2      	b.n	80047b8 <_printf_float+0x1a4>
 80047d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80047d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047d8:	4299      	cmp	r1, r3
 80047da:	db05      	blt.n	80047e8 <_printf_float+0x1d4>
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	6121      	str	r1, [r4, #16]
 80047e0:	07d8      	lsls	r0, r3, #31
 80047e2:	d5ea      	bpl.n	80047ba <_printf_float+0x1a6>
 80047e4:	1c4b      	adds	r3, r1, #1
 80047e6:	e7e7      	b.n	80047b8 <_printf_float+0x1a4>
 80047e8:	2900      	cmp	r1, #0
 80047ea:	bfd4      	ite	le
 80047ec:	f1c1 0202 	rsble	r2, r1, #2
 80047f0:	2201      	movgt	r2, #1
 80047f2:	4413      	add	r3, r2
 80047f4:	e7e0      	b.n	80047b8 <_printf_float+0x1a4>
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	055a      	lsls	r2, r3, #21
 80047fa:	d407      	bmi.n	800480c <_printf_float+0x1f8>
 80047fc:	6923      	ldr	r3, [r4, #16]
 80047fe:	4642      	mov	r2, r8
 8004800:	4631      	mov	r1, r6
 8004802:	4628      	mov	r0, r5
 8004804:	47b8      	blx	r7
 8004806:	3001      	adds	r0, #1
 8004808:	d12c      	bne.n	8004864 <_printf_float+0x250>
 800480a:	e764      	b.n	80046d6 <_printf_float+0xc2>
 800480c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004810:	f240 80e0 	bls.w	80049d4 <_printf_float+0x3c0>
 8004814:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004818:	2200      	movs	r2, #0
 800481a:	2300      	movs	r3, #0
 800481c:	f7fc f964 	bl	8000ae8 <__aeabi_dcmpeq>
 8004820:	2800      	cmp	r0, #0
 8004822:	d034      	beq.n	800488e <_printf_float+0x27a>
 8004824:	4a37      	ldr	r2, [pc, #220]	; (8004904 <_printf_float+0x2f0>)
 8004826:	2301      	movs	r3, #1
 8004828:	4631      	mov	r1, r6
 800482a:	4628      	mov	r0, r5
 800482c:	47b8      	blx	r7
 800482e:	3001      	adds	r0, #1
 8004830:	f43f af51 	beq.w	80046d6 <_printf_float+0xc2>
 8004834:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004838:	429a      	cmp	r2, r3
 800483a:	db02      	blt.n	8004842 <_printf_float+0x22e>
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	07d8      	lsls	r0, r3, #31
 8004840:	d510      	bpl.n	8004864 <_printf_float+0x250>
 8004842:	ee18 3a10 	vmov	r3, s16
 8004846:	4652      	mov	r2, sl
 8004848:	4631      	mov	r1, r6
 800484a:	4628      	mov	r0, r5
 800484c:	47b8      	blx	r7
 800484e:	3001      	adds	r0, #1
 8004850:	f43f af41 	beq.w	80046d6 <_printf_float+0xc2>
 8004854:	f04f 0800 	mov.w	r8, #0
 8004858:	f104 091a 	add.w	r9, r4, #26
 800485c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800485e:	3b01      	subs	r3, #1
 8004860:	4543      	cmp	r3, r8
 8004862:	dc09      	bgt.n	8004878 <_printf_float+0x264>
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	079b      	lsls	r3, r3, #30
 8004868:	f100 8105 	bmi.w	8004a76 <_printf_float+0x462>
 800486c:	68e0      	ldr	r0, [r4, #12]
 800486e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004870:	4298      	cmp	r0, r3
 8004872:	bfb8      	it	lt
 8004874:	4618      	movlt	r0, r3
 8004876:	e730      	b.n	80046da <_printf_float+0xc6>
 8004878:	2301      	movs	r3, #1
 800487a:	464a      	mov	r2, r9
 800487c:	4631      	mov	r1, r6
 800487e:	4628      	mov	r0, r5
 8004880:	47b8      	blx	r7
 8004882:	3001      	adds	r0, #1
 8004884:	f43f af27 	beq.w	80046d6 <_printf_float+0xc2>
 8004888:	f108 0801 	add.w	r8, r8, #1
 800488c:	e7e6      	b.n	800485c <_printf_float+0x248>
 800488e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004890:	2b00      	cmp	r3, #0
 8004892:	dc39      	bgt.n	8004908 <_printf_float+0x2f4>
 8004894:	4a1b      	ldr	r2, [pc, #108]	; (8004904 <_printf_float+0x2f0>)
 8004896:	2301      	movs	r3, #1
 8004898:	4631      	mov	r1, r6
 800489a:	4628      	mov	r0, r5
 800489c:	47b8      	blx	r7
 800489e:	3001      	adds	r0, #1
 80048a0:	f43f af19 	beq.w	80046d6 <_printf_float+0xc2>
 80048a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048a8:	4313      	orrs	r3, r2
 80048aa:	d102      	bne.n	80048b2 <_printf_float+0x29e>
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	07d9      	lsls	r1, r3, #31
 80048b0:	d5d8      	bpl.n	8004864 <_printf_float+0x250>
 80048b2:	ee18 3a10 	vmov	r3, s16
 80048b6:	4652      	mov	r2, sl
 80048b8:	4631      	mov	r1, r6
 80048ba:	4628      	mov	r0, r5
 80048bc:	47b8      	blx	r7
 80048be:	3001      	adds	r0, #1
 80048c0:	f43f af09 	beq.w	80046d6 <_printf_float+0xc2>
 80048c4:	f04f 0900 	mov.w	r9, #0
 80048c8:	f104 0a1a 	add.w	sl, r4, #26
 80048cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ce:	425b      	negs	r3, r3
 80048d0:	454b      	cmp	r3, r9
 80048d2:	dc01      	bgt.n	80048d8 <_printf_float+0x2c4>
 80048d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048d6:	e792      	b.n	80047fe <_printf_float+0x1ea>
 80048d8:	2301      	movs	r3, #1
 80048da:	4652      	mov	r2, sl
 80048dc:	4631      	mov	r1, r6
 80048de:	4628      	mov	r0, r5
 80048e0:	47b8      	blx	r7
 80048e2:	3001      	adds	r0, #1
 80048e4:	f43f aef7 	beq.w	80046d6 <_printf_float+0xc2>
 80048e8:	f109 0901 	add.w	r9, r9, #1
 80048ec:	e7ee      	b.n	80048cc <_printf_float+0x2b8>
 80048ee:	bf00      	nop
 80048f0:	7fefffff 	.word	0x7fefffff
 80048f4:	08009310 	.word	0x08009310
 80048f8:	08009314 	.word	0x08009314
 80048fc:	0800931c 	.word	0x0800931c
 8004900:	08009318 	.word	0x08009318
 8004904:	08009320 	.word	0x08009320
 8004908:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800490a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800490c:	429a      	cmp	r2, r3
 800490e:	bfa8      	it	ge
 8004910:	461a      	movge	r2, r3
 8004912:	2a00      	cmp	r2, #0
 8004914:	4691      	mov	r9, r2
 8004916:	dc37      	bgt.n	8004988 <_printf_float+0x374>
 8004918:	f04f 0b00 	mov.w	fp, #0
 800491c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004920:	f104 021a 	add.w	r2, r4, #26
 8004924:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004926:	9305      	str	r3, [sp, #20]
 8004928:	eba3 0309 	sub.w	r3, r3, r9
 800492c:	455b      	cmp	r3, fp
 800492e:	dc33      	bgt.n	8004998 <_printf_float+0x384>
 8004930:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004934:	429a      	cmp	r2, r3
 8004936:	db3b      	blt.n	80049b0 <_printf_float+0x39c>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	07da      	lsls	r2, r3, #31
 800493c:	d438      	bmi.n	80049b0 <_printf_float+0x39c>
 800493e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004940:	9a05      	ldr	r2, [sp, #20]
 8004942:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004944:	1a9a      	subs	r2, r3, r2
 8004946:	eba3 0901 	sub.w	r9, r3, r1
 800494a:	4591      	cmp	r9, r2
 800494c:	bfa8      	it	ge
 800494e:	4691      	movge	r9, r2
 8004950:	f1b9 0f00 	cmp.w	r9, #0
 8004954:	dc35      	bgt.n	80049c2 <_printf_float+0x3ae>
 8004956:	f04f 0800 	mov.w	r8, #0
 800495a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800495e:	f104 0a1a 	add.w	sl, r4, #26
 8004962:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004966:	1a9b      	subs	r3, r3, r2
 8004968:	eba3 0309 	sub.w	r3, r3, r9
 800496c:	4543      	cmp	r3, r8
 800496e:	f77f af79 	ble.w	8004864 <_printf_float+0x250>
 8004972:	2301      	movs	r3, #1
 8004974:	4652      	mov	r2, sl
 8004976:	4631      	mov	r1, r6
 8004978:	4628      	mov	r0, r5
 800497a:	47b8      	blx	r7
 800497c:	3001      	adds	r0, #1
 800497e:	f43f aeaa 	beq.w	80046d6 <_printf_float+0xc2>
 8004982:	f108 0801 	add.w	r8, r8, #1
 8004986:	e7ec      	b.n	8004962 <_printf_float+0x34e>
 8004988:	4613      	mov	r3, r2
 800498a:	4631      	mov	r1, r6
 800498c:	4642      	mov	r2, r8
 800498e:	4628      	mov	r0, r5
 8004990:	47b8      	blx	r7
 8004992:	3001      	adds	r0, #1
 8004994:	d1c0      	bne.n	8004918 <_printf_float+0x304>
 8004996:	e69e      	b.n	80046d6 <_printf_float+0xc2>
 8004998:	2301      	movs	r3, #1
 800499a:	4631      	mov	r1, r6
 800499c:	4628      	mov	r0, r5
 800499e:	9205      	str	r2, [sp, #20]
 80049a0:	47b8      	blx	r7
 80049a2:	3001      	adds	r0, #1
 80049a4:	f43f ae97 	beq.w	80046d6 <_printf_float+0xc2>
 80049a8:	9a05      	ldr	r2, [sp, #20]
 80049aa:	f10b 0b01 	add.w	fp, fp, #1
 80049ae:	e7b9      	b.n	8004924 <_printf_float+0x310>
 80049b0:	ee18 3a10 	vmov	r3, s16
 80049b4:	4652      	mov	r2, sl
 80049b6:	4631      	mov	r1, r6
 80049b8:	4628      	mov	r0, r5
 80049ba:	47b8      	blx	r7
 80049bc:	3001      	adds	r0, #1
 80049be:	d1be      	bne.n	800493e <_printf_float+0x32a>
 80049c0:	e689      	b.n	80046d6 <_printf_float+0xc2>
 80049c2:	9a05      	ldr	r2, [sp, #20]
 80049c4:	464b      	mov	r3, r9
 80049c6:	4442      	add	r2, r8
 80049c8:	4631      	mov	r1, r6
 80049ca:	4628      	mov	r0, r5
 80049cc:	47b8      	blx	r7
 80049ce:	3001      	adds	r0, #1
 80049d0:	d1c1      	bne.n	8004956 <_printf_float+0x342>
 80049d2:	e680      	b.n	80046d6 <_printf_float+0xc2>
 80049d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049d6:	2a01      	cmp	r2, #1
 80049d8:	dc01      	bgt.n	80049de <_printf_float+0x3ca>
 80049da:	07db      	lsls	r3, r3, #31
 80049dc:	d538      	bpl.n	8004a50 <_printf_float+0x43c>
 80049de:	2301      	movs	r3, #1
 80049e0:	4642      	mov	r2, r8
 80049e2:	4631      	mov	r1, r6
 80049e4:	4628      	mov	r0, r5
 80049e6:	47b8      	blx	r7
 80049e8:	3001      	adds	r0, #1
 80049ea:	f43f ae74 	beq.w	80046d6 <_printf_float+0xc2>
 80049ee:	ee18 3a10 	vmov	r3, s16
 80049f2:	4652      	mov	r2, sl
 80049f4:	4631      	mov	r1, r6
 80049f6:	4628      	mov	r0, r5
 80049f8:	47b8      	blx	r7
 80049fa:	3001      	adds	r0, #1
 80049fc:	f43f ae6b 	beq.w	80046d6 <_printf_float+0xc2>
 8004a00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a04:	2200      	movs	r2, #0
 8004a06:	2300      	movs	r3, #0
 8004a08:	f7fc f86e 	bl	8000ae8 <__aeabi_dcmpeq>
 8004a0c:	b9d8      	cbnz	r0, 8004a46 <_printf_float+0x432>
 8004a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a10:	f108 0201 	add.w	r2, r8, #1
 8004a14:	3b01      	subs	r3, #1
 8004a16:	4631      	mov	r1, r6
 8004a18:	4628      	mov	r0, r5
 8004a1a:	47b8      	blx	r7
 8004a1c:	3001      	adds	r0, #1
 8004a1e:	d10e      	bne.n	8004a3e <_printf_float+0x42a>
 8004a20:	e659      	b.n	80046d6 <_printf_float+0xc2>
 8004a22:	2301      	movs	r3, #1
 8004a24:	4652      	mov	r2, sl
 8004a26:	4631      	mov	r1, r6
 8004a28:	4628      	mov	r0, r5
 8004a2a:	47b8      	blx	r7
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	f43f ae52 	beq.w	80046d6 <_printf_float+0xc2>
 8004a32:	f108 0801 	add.w	r8, r8, #1
 8004a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	4543      	cmp	r3, r8
 8004a3c:	dcf1      	bgt.n	8004a22 <_printf_float+0x40e>
 8004a3e:	464b      	mov	r3, r9
 8004a40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a44:	e6dc      	b.n	8004800 <_printf_float+0x1ec>
 8004a46:	f04f 0800 	mov.w	r8, #0
 8004a4a:	f104 0a1a 	add.w	sl, r4, #26
 8004a4e:	e7f2      	b.n	8004a36 <_printf_float+0x422>
 8004a50:	2301      	movs	r3, #1
 8004a52:	4642      	mov	r2, r8
 8004a54:	e7df      	b.n	8004a16 <_printf_float+0x402>
 8004a56:	2301      	movs	r3, #1
 8004a58:	464a      	mov	r2, r9
 8004a5a:	4631      	mov	r1, r6
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	47b8      	blx	r7
 8004a60:	3001      	adds	r0, #1
 8004a62:	f43f ae38 	beq.w	80046d6 <_printf_float+0xc2>
 8004a66:	f108 0801 	add.w	r8, r8, #1
 8004a6a:	68e3      	ldr	r3, [r4, #12]
 8004a6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a6e:	1a5b      	subs	r3, r3, r1
 8004a70:	4543      	cmp	r3, r8
 8004a72:	dcf0      	bgt.n	8004a56 <_printf_float+0x442>
 8004a74:	e6fa      	b.n	800486c <_printf_float+0x258>
 8004a76:	f04f 0800 	mov.w	r8, #0
 8004a7a:	f104 0919 	add.w	r9, r4, #25
 8004a7e:	e7f4      	b.n	8004a6a <_printf_float+0x456>

08004a80 <_printf_common>:
 8004a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a84:	4616      	mov	r6, r2
 8004a86:	4699      	mov	r9, r3
 8004a88:	688a      	ldr	r2, [r1, #8]
 8004a8a:	690b      	ldr	r3, [r1, #16]
 8004a8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a90:	4293      	cmp	r3, r2
 8004a92:	bfb8      	it	lt
 8004a94:	4613      	movlt	r3, r2
 8004a96:	6033      	str	r3, [r6, #0]
 8004a98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a9c:	4607      	mov	r7, r0
 8004a9e:	460c      	mov	r4, r1
 8004aa0:	b10a      	cbz	r2, 8004aa6 <_printf_common+0x26>
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	6033      	str	r3, [r6, #0]
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	0699      	lsls	r1, r3, #26
 8004aaa:	bf42      	ittt	mi
 8004aac:	6833      	ldrmi	r3, [r6, #0]
 8004aae:	3302      	addmi	r3, #2
 8004ab0:	6033      	strmi	r3, [r6, #0]
 8004ab2:	6825      	ldr	r5, [r4, #0]
 8004ab4:	f015 0506 	ands.w	r5, r5, #6
 8004ab8:	d106      	bne.n	8004ac8 <_printf_common+0x48>
 8004aba:	f104 0a19 	add.w	sl, r4, #25
 8004abe:	68e3      	ldr	r3, [r4, #12]
 8004ac0:	6832      	ldr	r2, [r6, #0]
 8004ac2:	1a9b      	subs	r3, r3, r2
 8004ac4:	42ab      	cmp	r3, r5
 8004ac6:	dc26      	bgt.n	8004b16 <_printf_common+0x96>
 8004ac8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004acc:	1e13      	subs	r3, r2, #0
 8004ace:	6822      	ldr	r2, [r4, #0]
 8004ad0:	bf18      	it	ne
 8004ad2:	2301      	movne	r3, #1
 8004ad4:	0692      	lsls	r2, r2, #26
 8004ad6:	d42b      	bmi.n	8004b30 <_printf_common+0xb0>
 8004ad8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004adc:	4649      	mov	r1, r9
 8004ade:	4638      	mov	r0, r7
 8004ae0:	47c0      	blx	r8
 8004ae2:	3001      	adds	r0, #1
 8004ae4:	d01e      	beq.n	8004b24 <_printf_common+0xa4>
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	68e5      	ldr	r5, [r4, #12]
 8004aea:	6832      	ldr	r2, [r6, #0]
 8004aec:	f003 0306 	and.w	r3, r3, #6
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	bf08      	it	eq
 8004af4:	1aad      	subeq	r5, r5, r2
 8004af6:	68a3      	ldr	r3, [r4, #8]
 8004af8:	6922      	ldr	r2, [r4, #16]
 8004afa:	bf0c      	ite	eq
 8004afc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b00:	2500      	movne	r5, #0
 8004b02:	4293      	cmp	r3, r2
 8004b04:	bfc4      	itt	gt
 8004b06:	1a9b      	subgt	r3, r3, r2
 8004b08:	18ed      	addgt	r5, r5, r3
 8004b0a:	2600      	movs	r6, #0
 8004b0c:	341a      	adds	r4, #26
 8004b0e:	42b5      	cmp	r5, r6
 8004b10:	d11a      	bne.n	8004b48 <_printf_common+0xc8>
 8004b12:	2000      	movs	r0, #0
 8004b14:	e008      	b.n	8004b28 <_printf_common+0xa8>
 8004b16:	2301      	movs	r3, #1
 8004b18:	4652      	mov	r2, sl
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	4638      	mov	r0, r7
 8004b1e:	47c0      	blx	r8
 8004b20:	3001      	adds	r0, #1
 8004b22:	d103      	bne.n	8004b2c <_printf_common+0xac>
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295
 8004b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2c:	3501      	adds	r5, #1
 8004b2e:	e7c6      	b.n	8004abe <_printf_common+0x3e>
 8004b30:	18e1      	adds	r1, r4, r3
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	2030      	movs	r0, #48	; 0x30
 8004b36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b3a:	4422      	add	r2, r4
 8004b3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b44:	3302      	adds	r3, #2
 8004b46:	e7c7      	b.n	8004ad8 <_printf_common+0x58>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	4622      	mov	r2, r4
 8004b4c:	4649      	mov	r1, r9
 8004b4e:	4638      	mov	r0, r7
 8004b50:	47c0      	blx	r8
 8004b52:	3001      	adds	r0, #1
 8004b54:	d0e6      	beq.n	8004b24 <_printf_common+0xa4>
 8004b56:	3601      	adds	r6, #1
 8004b58:	e7d9      	b.n	8004b0e <_printf_common+0x8e>
	...

08004b5c <_printf_i>:
 8004b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b60:	7e0f      	ldrb	r7, [r1, #24]
 8004b62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b64:	2f78      	cmp	r7, #120	; 0x78
 8004b66:	4691      	mov	r9, r2
 8004b68:	4680      	mov	r8, r0
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	469a      	mov	sl, r3
 8004b6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b72:	d807      	bhi.n	8004b84 <_printf_i+0x28>
 8004b74:	2f62      	cmp	r7, #98	; 0x62
 8004b76:	d80a      	bhi.n	8004b8e <_printf_i+0x32>
 8004b78:	2f00      	cmp	r7, #0
 8004b7a:	f000 80d8 	beq.w	8004d2e <_printf_i+0x1d2>
 8004b7e:	2f58      	cmp	r7, #88	; 0x58
 8004b80:	f000 80a3 	beq.w	8004cca <_printf_i+0x16e>
 8004b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b8c:	e03a      	b.n	8004c04 <_printf_i+0xa8>
 8004b8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b92:	2b15      	cmp	r3, #21
 8004b94:	d8f6      	bhi.n	8004b84 <_printf_i+0x28>
 8004b96:	a101      	add	r1, pc, #4	; (adr r1, 8004b9c <_printf_i+0x40>)
 8004b98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b9c:	08004bf5 	.word	0x08004bf5
 8004ba0:	08004c09 	.word	0x08004c09
 8004ba4:	08004b85 	.word	0x08004b85
 8004ba8:	08004b85 	.word	0x08004b85
 8004bac:	08004b85 	.word	0x08004b85
 8004bb0:	08004b85 	.word	0x08004b85
 8004bb4:	08004c09 	.word	0x08004c09
 8004bb8:	08004b85 	.word	0x08004b85
 8004bbc:	08004b85 	.word	0x08004b85
 8004bc0:	08004b85 	.word	0x08004b85
 8004bc4:	08004b85 	.word	0x08004b85
 8004bc8:	08004d15 	.word	0x08004d15
 8004bcc:	08004c39 	.word	0x08004c39
 8004bd0:	08004cf7 	.word	0x08004cf7
 8004bd4:	08004b85 	.word	0x08004b85
 8004bd8:	08004b85 	.word	0x08004b85
 8004bdc:	08004d37 	.word	0x08004d37
 8004be0:	08004b85 	.word	0x08004b85
 8004be4:	08004c39 	.word	0x08004c39
 8004be8:	08004b85 	.word	0x08004b85
 8004bec:	08004b85 	.word	0x08004b85
 8004bf0:	08004cff 	.word	0x08004cff
 8004bf4:	682b      	ldr	r3, [r5, #0]
 8004bf6:	1d1a      	adds	r2, r3, #4
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	602a      	str	r2, [r5, #0]
 8004bfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0a3      	b.n	8004d50 <_printf_i+0x1f4>
 8004c08:	6820      	ldr	r0, [r4, #0]
 8004c0a:	6829      	ldr	r1, [r5, #0]
 8004c0c:	0606      	lsls	r6, r0, #24
 8004c0e:	f101 0304 	add.w	r3, r1, #4
 8004c12:	d50a      	bpl.n	8004c2a <_printf_i+0xce>
 8004c14:	680e      	ldr	r6, [r1, #0]
 8004c16:	602b      	str	r3, [r5, #0]
 8004c18:	2e00      	cmp	r6, #0
 8004c1a:	da03      	bge.n	8004c24 <_printf_i+0xc8>
 8004c1c:	232d      	movs	r3, #45	; 0x2d
 8004c1e:	4276      	negs	r6, r6
 8004c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c24:	485e      	ldr	r0, [pc, #376]	; (8004da0 <_printf_i+0x244>)
 8004c26:	230a      	movs	r3, #10
 8004c28:	e019      	b.n	8004c5e <_printf_i+0x102>
 8004c2a:	680e      	ldr	r6, [r1, #0]
 8004c2c:	602b      	str	r3, [r5, #0]
 8004c2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c32:	bf18      	it	ne
 8004c34:	b236      	sxthne	r6, r6
 8004c36:	e7ef      	b.n	8004c18 <_printf_i+0xbc>
 8004c38:	682b      	ldr	r3, [r5, #0]
 8004c3a:	6820      	ldr	r0, [r4, #0]
 8004c3c:	1d19      	adds	r1, r3, #4
 8004c3e:	6029      	str	r1, [r5, #0]
 8004c40:	0601      	lsls	r1, r0, #24
 8004c42:	d501      	bpl.n	8004c48 <_printf_i+0xec>
 8004c44:	681e      	ldr	r6, [r3, #0]
 8004c46:	e002      	b.n	8004c4e <_printf_i+0xf2>
 8004c48:	0646      	lsls	r6, r0, #25
 8004c4a:	d5fb      	bpl.n	8004c44 <_printf_i+0xe8>
 8004c4c:	881e      	ldrh	r6, [r3, #0]
 8004c4e:	4854      	ldr	r0, [pc, #336]	; (8004da0 <_printf_i+0x244>)
 8004c50:	2f6f      	cmp	r7, #111	; 0x6f
 8004c52:	bf0c      	ite	eq
 8004c54:	2308      	moveq	r3, #8
 8004c56:	230a      	movne	r3, #10
 8004c58:	2100      	movs	r1, #0
 8004c5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c5e:	6865      	ldr	r5, [r4, #4]
 8004c60:	60a5      	str	r5, [r4, #8]
 8004c62:	2d00      	cmp	r5, #0
 8004c64:	bfa2      	ittt	ge
 8004c66:	6821      	ldrge	r1, [r4, #0]
 8004c68:	f021 0104 	bicge.w	r1, r1, #4
 8004c6c:	6021      	strge	r1, [r4, #0]
 8004c6e:	b90e      	cbnz	r6, 8004c74 <_printf_i+0x118>
 8004c70:	2d00      	cmp	r5, #0
 8004c72:	d04d      	beq.n	8004d10 <_printf_i+0x1b4>
 8004c74:	4615      	mov	r5, r2
 8004c76:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c7a:	fb03 6711 	mls	r7, r3, r1, r6
 8004c7e:	5dc7      	ldrb	r7, [r0, r7]
 8004c80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c84:	4637      	mov	r7, r6
 8004c86:	42bb      	cmp	r3, r7
 8004c88:	460e      	mov	r6, r1
 8004c8a:	d9f4      	bls.n	8004c76 <_printf_i+0x11a>
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d10b      	bne.n	8004ca8 <_printf_i+0x14c>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	07de      	lsls	r6, r3, #31
 8004c94:	d508      	bpl.n	8004ca8 <_printf_i+0x14c>
 8004c96:	6923      	ldr	r3, [r4, #16]
 8004c98:	6861      	ldr	r1, [r4, #4]
 8004c9a:	4299      	cmp	r1, r3
 8004c9c:	bfde      	ittt	le
 8004c9e:	2330      	movle	r3, #48	; 0x30
 8004ca0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ca4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ca8:	1b52      	subs	r2, r2, r5
 8004caa:	6122      	str	r2, [r4, #16]
 8004cac:	f8cd a000 	str.w	sl, [sp]
 8004cb0:	464b      	mov	r3, r9
 8004cb2:	aa03      	add	r2, sp, #12
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	4640      	mov	r0, r8
 8004cb8:	f7ff fee2 	bl	8004a80 <_printf_common>
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d14c      	bne.n	8004d5a <_printf_i+0x1fe>
 8004cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc4:	b004      	add	sp, #16
 8004cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cca:	4835      	ldr	r0, [pc, #212]	; (8004da0 <_printf_i+0x244>)
 8004ccc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004cd0:	6829      	ldr	r1, [r5, #0]
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cd8:	6029      	str	r1, [r5, #0]
 8004cda:	061d      	lsls	r5, r3, #24
 8004cdc:	d514      	bpl.n	8004d08 <_printf_i+0x1ac>
 8004cde:	07df      	lsls	r7, r3, #31
 8004ce0:	bf44      	itt	mi
 8004ce2:	f043 0320 	orrmi.w	r3, r3, #32
 8004ce6:	6023      	strmi	r3, [r4, #0]
 8004ce8:	b91e      	cbnz	r6, 8004cf2 <_printf_i+0x196>
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	f023 0320 	bic.w	r3, r3, #32
 8004cf0:	6023      	str	r3, [r4, #0]
 8004cf2:	2310      	movs	r3, #16
 8004cf4:	e7b0      	b.n	8004c58 <_printf_i+0xfc>
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	f043 0320 	orr.w	r3, r3, #32
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	2378      	movs	r3, #120	; 0x78
 8004d00:	4828      	ldr	r0, [pc, #160]	; (8004da4 <_printf_i+0x248>)
 8004d02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d06:	e7e3      	b.n	8004cd0 <_printf_i+0x174>
 8004d08:	0659      	lsls	r1, r3, #25
 8004d0a:	bf48      	it	mi
 8004d0c:	b2b6      	uxthmi	r6, r6
 8004d0e:	e7e6      	b.n	8004cde <_printf_i+0x182>
 8004d10:	4615      	mov	r5, r2
 8004d12:	e7bb      	b.n	8004c8c <_printf_i+0x130>
 8004d14:	682b      	ldr	r3, [r5, #0]
 8004d16:	6826      	ldr	r6, [r4, #0]
 8004d18:	6961      	ldr	r1, [r4, #20]
 8004d1a:	1d18      	adds	r0, r3, #4
 8004d1c:	6028      	str	r0, [r5, #0]
 8004d1e:	0635      	lsls	r5, r6, #24
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	d501      	bpl.n	8004d28 <_printf_i+0x1cc>
 8004d24:	6019      	str	r1, [r3, #0]
 8004d26:	e002      	b.n	8004d2e <_printf_i+0x1d2>
 8004d28:	0670      	lsls	r0, r6, #25
 8004d2a:	d5fb      	bpl.n	8004d24 <_printf_i+0x1c8>
 8004d2c:	8019      	strh	r1, [r3, #0]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	6123      	str	r3, [r4, #16]
 8004d32:	4615      	mov	r5, r2
 8004d34:	e7ba      	b.n	8004cac <_printf_i+0x150>
 8004d36:	682b      	ldr	r3, [r5, #0]
 8004d38:	1d1a      	adds	r2, r3, #4
 8004d3a:	602a      	str	r2, [r5, #0]
 8004d3c:	681d      	ldr	r5, [r3, #0]
 8004d3e:	6862      	ldr	r2, [r4, #4]
 8004d40:	2100      	movs	r1, #0
 8004d42:	4628      	mov	r0, r5
 8004d44:	f7fb fa5c 	bl	8000200 <memchr>
 8004d48:	b108      	cbz	r0, 8004d4e <_printf_i+0x1f2>
 8004d4a:	1b40      	subs	r0, r0, r5
 8004d4c:	6060      	str	r0, [r4, #4]
 8004d4e:	6863      	ldr	r3, [r4, #4]
 8004d50:	6123      	str	r3, [r4, #16]
 8004d52:	2300      	movs	r3, #0
 8004d54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d58:	e7a8      	b.n	8004cac <_printf_i+0x150>
 8004d5a:	6923      	ldr	r3, [r4, #16]
 8004d5c:	462a      	mov	r2, r5
 8004d5e:	4649      	mov	r1, r9
 8004d60:	4640      	mov	r0, r8
 8004d62:	47d0      	blx	sl
 8004d64:	3001      	adds	r0, #1
 8004d66:	d0ab      	beq.n	8004cc0 <_printf_i+0x164>
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	079b      	lsls	r3, r3, #30
 8004d6c:	d413      	bmi.n	8004d96 <_printf_i+0x23a>
 8004d6e:	68e0      	ldr	r0, [r4, #12]
 8004d70:	9b03      	ldr	r3, [sp, #12]
 8004d72:	4298      	cmp	r0, r3
 8004d74:	bfb8      	it	lt
 8004d76:	4618      	movlt	r0, r3
 8004d78:	e7a4      	b.n	8004cc4 <_printf_i+0x168>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	4632      	mov	r2, r6
 8004d7e:	4649      	mov	r1, r9
 8004d80:	4640      	mov	r0, r8
 8004d82:	47d0      	blx	sl
 8004d84:	3001      	adds	r0, #1
 8004d86:	d09b      	beq.n	8004cc0 <_printf_i+0x164>
 8004d88:	3501      	adds	r5, #1
 8004d8a:	68e3      	ldr	r3, [r4, #12]
 8004d8c:	9903      	ldr	r1, [sp, #12]
 8004d8e:	1a5b      	subs	r3, r3, r1
 8004d90:	42ab      	cmp	r3, r5
 8004d92:	dcf2      	bgt.n	8004d7a <_printf_i+0x21e>
 8004d94:	e7eb      	b.n	8004d6e <_printf_i+0x212>
 8004d96:	2500      	movs	r5, #0
 8004d98:	f104 0619 	add.w	r6, r4, #25
 8004d9c:	e7f5      	b.n	8004d8a <_printf_i+0x22e>
 8004d9e:	bf00      	nop
 8004da0:	08009322 	.word	0x08009322
 8004da4:	08009333 	.word	0x08009333

08004da8 <siprintf>:
 8004da8:	b40e      	push	{r1, r2, r3}
 8004daa:	b500      	push	{lr}
 8004dac:	b09c      	sub	sp, #112	; 0x70
 8004dae:	ab1d      	add	r3, sp, #116	; 0x74
 8004db0:	9002      	str	r0, [sp, #8]
 8004db2:	9006      	str	r0, [sp, #24]
 8004db4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004db8:	4809      	ldr	r0, [pc, #36]	; (8004de0 <siprintf+0x38>)
 8004dba:	9107      	str	r1, [sp, #28]
 8004dbc:	9104      	str	r1, [sp, #16]
 8004dbe:	4909      	ldr	r1, [pc, #36]	; (8004de4 <siprintf+0x3c>)
 8004dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dc4:	9105      	str	r1, [sp, #20]
 8004dc6:	6800      	ldr	r0, [r0, #0]
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	a902      	add	r1, sp, #8
 8004dcc:	f001 fb76 	bl	80064bc <_svfiprintf_r>
 8004dd0:	9b02      	ldr	r3, [sp, #8]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	701a      	strb	r2, [r3, #0]
 8004dd6:	b01c      	add	sp, #112	; 0x70
 8004dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ddc:	b003      	add	sp, #12
 8004dde:	4770      	bx	lr
 8004de0:	2000000c 	.word	0x2000000c
 8004de4:	ffff0208 	.word	0xffff0208

08004de8 <quorem>:
 8004de8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dec:	6903      	ldr	r3, [r0, #16]
 8004dee:	690c      	ldr	r4, [r1, #16]
 8004df0:	42a3      	cmp	r3, r4
 8004df2:	4607      	mov	r7, r0
 8004df4:	f2c0 8081 	blt.w	8004efa <quorem+0x112>
 8004df8:	3c01      	subs	r4, #1
 8004dfa:	f101 0814 	add.w	r8, r1, #20
 8004dfe:	f100 0514 	add.w	r5, r0, #20
 8004e02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e06:	9301      	str	r3, [sp, #4]
 8004e08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e10:	3301      	adds	r3, #1
 8004e12:	429a      	cmp	r2, r3
 8004e14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e20:	d331      	bcc.n	8004e86 <quorem+0x9e>
 8004e22:	f04f 0e00 	mov.w	lr, #0
 8004e26:	4640      	mov	r0, r8
 8004e28:	46ac      	mov	ip, r5
 8004e2a:	46f2      	mov	sl, lr
 8004e2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e30:	b293      	uxth	r3, r2
 8004e32:	fb06 e303 	mla	r3, r6, r3, lr
 8004e36:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	ebaa 0303 	sub.w	r3, sl, r3
 8004e40:	f8dc a000 	ldr.w	sl, [ip]
 8004e44:	0c12      	lsrs	r2, r2, #16
 8004e46:	fa13 f38a 	uxtah	r3, r3, sl
 8004e4a:	fb06 e202 	mla	r2, r6, r2, lr
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	9b00      	ldr	r3, [sp, #0]
 8004e52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e56:	b292      	uxth	r2, r2
 8004e58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004e5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e60:	f8bd 3000 	ldrh.w	r3, [sp]
 8004e64:	4581      	cmp	r9, r0
 8004e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e6a:	f84c 3b04 	str.w	r3, [ip], #4
 8004e6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004e72:	d2db      	bcs.n	8004e2c <quorem+0x44>
 8004e74:	f855 300b 	ldr.w	r3, [r5, fp]
 8004e78:	b92b      	cbnz	r3, 8004e86 <quorem+0x9e>
 8004e7a:	9b01      	ldr	r3, [sp, #4]
 8004e7c:	3b04      	subs	r3, #4
 8004e7e:	429d      	cmp	r5, r3
 8004e80:	461a      	mov	r2, r3
 8004e82:	d32e      	bcc.n	8004ee2 <quorem+0xfa>
 8004e84:	613c      	str	r4, [r7, #16]
 8004e86:	4638      	mov	r0, r7
 8004e88:	f001 f8c4 	bl	8006014 <__mcmp>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	db24      	blt.n	8004eda <quorem+0xf2>
 8004e90:	3601      	adds	r6, #1
 8004e92:	4628      	mov	r0, r5
 8004e94:	f04f 0c00 	mov.w	ip, #0
 8004e98:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e9c:	f8d0 e000 	ldr.w	lr, [r0]
 8004ea0:	b293      	uxth	r3, r2
 8004ea2:	ebac 0303 	sub.w	r3, ip, r3
 8004ea6:	0c12      	lsrs	r2, r2, #16
 8004ea8:	fa13 f38e 	uxtah	r3, r3, lr
 8004eac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004eb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004eba:	45c1      	cmp	r9, r8
 8004ebc:	f840 3b04 	str.w	r3, [r0], #4
 8004ec0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ec4:	d2e8      	bcs.n	8004e98 <quorem+0xb0>
 8004ec6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004eca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ece:	b922      	cbnz	r2, 8004eda <quorem+0xf2>
 8004ed0:	3b04      	subs	r3, #4
 8004ed2:	429d      	cmp	r5, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	d30a      	bcc.n	8004eee <quorem+0x106>
 8004ed8:	613c      	str	r4, [r7, #16]
 8004eda:	4630      	mov	r0, r6
 8004edc:	b003      	add	sp, #12
 8004ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ee2:	6812      	ldr	r2, [r2, #0]
 8004ee4:	3b04      	subs	r3, #4
 8004ee6:	2a00      	cmp	r2, #0
 8004ee8:	d1cc      	bne.n	8004e84 <quorem+0x9c>
 8004eea:	3c01      	subs	r4, #1
 8004eec:	e7c7      	b.n	8004e7e <quorem+0x96>
 8004eee:	6812      	ldr	r2, [r2, #0]
 8004ef0:	3b04      	subs	r3, #4
 8004ef2:	2a00      	cmp	r2, #0
 8004ef4:	d1f0      	bne.n	8004ed8 <quorem+0xf0>
 8004ef6:	3c01      	subs	r4, #1
 8004ef8:	e7eb      	b.n	8004ed2 <quorem+0xea>
 8004efa:	2000      	movs	r0, #0
 8004efc:	e7ee      	b.n	8004edc <quorem+0xf4>
	...

08004f00 <_dtoa_r>:
 8004f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f04:	ed2d 8b04 	vpush	{d8-d9}
 8004f08:	ec57 6b10 	vmov	r6, r7, d0
 8004f0c:	b093      	sub	sp, #76	; 0x4c
 8004f0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f14:	9106      	str	r1, [sp, #24]
 8004f16:	ee10 aa10 	vmov	sl, s0
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	9209      	str	r2, [sp, #36]	; 0x24
 8004f1e:	930c      	str	r3, [sp, #48]	; 0x30
 8004f20:	46bb      	mov	fp, r7
 8004f22:	b975      	cbnz	r5, 8004f42 <_dtoa_r+0x42>
 8004f24:	2010      	movs	r0, #16
 8004f26:	f000 fddd 	bl	8005ae4 <malloc>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	6260      	str	r0, [r4, #36]	; 0x24
 8004f2e:	b920      	cbnz	r0, 8004f3a <_dtoa_r+0x3a>
 8004f30:	4ba7      	ldr	r3, [pc, #668]	; (80051d0 <_dtoa_r+0x2d0>)
 8004f32:	21ea      	movs	r1, #234	; 0xea
 8004f34:	48a7      	ldr	r0, [pc, #668]	; (80051d4 <_dtoa_r+0x2d4>)
 8004f36:	f001 fbd1 	bl	80066dc <__assert_func>
 8004f3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f3e:	6005      	str	r5, [r0, #0]
 8004f40:	60c5      	str	r5, [r0, #12]
 8004f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f44:	6819      	ldr	r1, [r3, #0]
 8004f46:	b151      	cbz	r1, 8004f5e <_dtoa_r+0x5e>
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	604a      	str	r2, [r1, #4]
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	4093      	lsls	r3, r2
 8004f50:	608b      	str	r3, [r1, #8]
 8004f52:	4620      	mov	r0, r4
 8004f54:	f000 fe1c 	bl	8005b90 <_Bfree>
 8004f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	1e3b      	subs	r3, r7, #0
 8004f60:	bfaa      	itet	ge
 8004f62:	2300      	movge	r3, #0
 8004f64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004f68:	f8c8 3000 	strge.w	r3, [r8]
 8004f6c:	4b9a      	ldr	r3, [pc, #616]	; (80051d8 <_dtoa_r+0x2d8>)
 8004f6e:	bfbc      	itt	lt
 8004f70:	2201      	movlt	r2, #1
 8004f72:	f8c8 2000 	strlt.w	r2, [r8]
 8004f76:	ea33 030b 	bics.w	r3, r3, fp
 8004f7a:	d11b      	bne.n	8004fb4 <_dtoa_r+0xb4>
 8004f7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f7e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004f88:	4333      	orrs	r3, r6
 8004f8a:	f000 8592 	beq.w	8005ab2 <_dtoa_r+0xbb2>
 8004f8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f90:	b963      	cbnz	r3, 8004fac <_dtoa_r+0xac>
 8004f92:	4b92      	ldr	r3, [pc, #584]	; (80051dc <_dtoa_r+0x2dc>)
 8004f94:	e022      	b.n	8004fdc <_dtoa_r+0xdc>
 8004f96:	4b92      	ldr	r3, [pc, #584]	; (80051e0 <_dtoa_r+0x2e0>)
 8004f98:	9301      	str	r3, [sp, #4]
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	9801      	ldr	r0, [sp, #4]
 8004fa2:	b013      	add	sp, #76	; 0x4c
 8004fa4:	ecbd 8b04 	vpop	{d8-d9}
 8004fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fac:	4b8b      	ldr	r3, [pc, #556]	; (80051dc <_dtoa_r+0x2dc>)
 8004fae:	9301      	str	r3, [sp, #4]
 8004fb0:	3303      	adds	r3, #3
 8004fb2:	e7f3      	b.n	8004f9c <_dtoa_r+0x9c>
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	4650      	mov	r0, sl
 8004fba:	4659      	mov	r1, fp
 8004fbc:	f7fb fd94 	bl	8000ae8 <__aeabi_dcmpeq>
 8004fc0:	ec4b ab19 	vmov	d9, sl, fp
 8004fc4:	4680      	mov	r8, r0
 8004fc6:	b158      	cbz	r0, 8004fe0 <_dtoa_r+0xe0>
 8004fc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fca:	2301      	movs	r3, #1
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 856b 	beq.w	8005aac <_dtoa_r+0xbac>
 8004fd6:	4883      	ldr	r0, [pc, #524]	; (80051e4 <_dtoa_r+0x2e4>)
 8004fd8:	6018      	str	r0, [r3, #0]
 8004fda:	1e43      	subs	r3, r0, #1
 8004fdc:	9301      	str	r3, [sp, #4]
 8004fde:	e7df      	b.n	8004fa0 <_dtoa_r+0xa0>
 8004fe0:	ec4b ab10 	vmov	d0, sl, fp
 8004fe4:	aa10      	add	r2, sp, #64	; 0x40
 8004fe6:	a911      	add	r1, sp, #68	; 0x44
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f001 f8b9 	bl	8006160 <__d2b>
 8004fee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004ff2:	ee08 0a10 	vmov	s16, r0
 8004ff6:	2d00      	cmp	r5, #0
 8004ff8:	f000 8084 	beq.w	8005104 <_dtoa_r+0x204>
 8004ffc:	ee19 3a90 	vmov	r3, s19
 8005000:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005004:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005008:	4656      	mov	r6, sl
 800500a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800500e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005012:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005016:	4b74      	ldr	r3, [pc, #464]	; (80051e8 <_dtoa_r+0x2e8>)
 8005018:	2200      	movs	r2, #0
 800501a:	4630      	mov	r0, r6
 800501c:	4639      	mov	r1, r7
 800501e:	f7fb f943 	bl	80002a8 <__aeabi_dsub>
 8005022:	a365      	add	r3, pc, #404	; (adr r3, 80051b8 <_dtoa_r+0x2b8>)
 8005024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005028:	f7fb faf6 	bl	8000618 <__aeabi_dmul>
 800502c:	a364      	add	r3, pc, #400	; (adr r3, 80051c0 <_dtoa_r+0x2c0>)
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	f7fb f93b 	bl	80002ac <__adddf3>
 8005036:	4606      	mov	r6, r0
 8005038:	4628      	mov	r0, r5
 800503a:	460f      	mov	r7, r1
 800503c:	f7fb fa82 	bl	8000544 <__aeabi_i2d>
 8005040:	a361      	add	r3, pc, #388	; (adr r3, 80051c8 <_dtoa_r+0x2c8>)
 8005042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005046:	f7fb fae7 	bl	8000618 <__aeabi_dmul>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4630      	mov	r0, r6
 8005050:	4639      	mov	r1, r7
 8005052:	f7fb f92b 	bl	80002ac <__adddf3>
 8005056:	4606      	mov	r6, r0
 8005058:	460f      	mov	r7, r1
 800505a:	f7fb fd8d 	bl	8000b78 <__aeabi_d2iz>
 800505e:	2200      	movs	r2, #0
 8005060:	9000      	str	r0, [sp, #0]
 8005062:	2300      	movs	r3, #0
 8005064:	4630      	mov	r0, r6
 8005066:	4639      	mov	r1, r7
 8005068:	f7fb fd48 	bl	8000afc <__aeabi_dcmplt>
 800506c:	b150      	cbz	r0, 8005084 <_dtoa_r+0x184>
 800506e:	9800      	ldr	r0, [sp, #0]
 8005070:	f7fb fa68 	bl	8000544 <__aeabi_i2d>
 8005074:	4632      	mov	r2, r6
 8005076:	463b      	mov	r3, r7
 8005078:	f7fb fd36 	bl	8000ae8 <__aeabi_dcmpeq>
 800507c:	b910      	cbnz	r0, 8005084 <_dtoa_r+0x184>
 800507e:	9b00      	ldr	r3, [sp, #0]
 8005080:	3b01      	subs	r3, #1
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	9b00      	ldr	r3, [sp, #0]
 8005086:	2b16      	cmp	r3, #22
 8005088:	d85a      	bhi.n	8005140 <_dtoa_r+0x240>
 800508a:	9a00      	ldr	r2, [sp, #0]
 800508c:	4b57      	ldr	r3, [pc, #348]	; (80051ec <_dtoa_r+0x2ec>)
 800508e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005096:	ec51 0b19 	vmov	r0, r1, d9
 800509a:	f7fb fd2f 	bl	8000afc <__aeabi_dcmplt>
 800509e:	2800      	cmp	r0, #0
 80050a0:	d050      	beq.n	8005144 <_dtoa_r+0x244>
 80050a2:	9b00      	ldr	r3, [sp, #0]
 80050a4:	3b01      	subs	r3, #1
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	2300      	movs	r3, #0
 80050aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80050ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050ae:	1b5d      	subs	r5, r3, r5
 80050b0:	1e6b      	subs	r3, r5, #1
 80050b2:	9305      	str	r3, [sp, #20]
 80050b4:	bf45      	ittet	mi
 80050b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80050ba:	9304      	strmi	r3, [sp, #16]
 80050bc:	2300      	movpl	r3, #0
 80050be:	2300      	movmi	r3, #0
 80050c0:	bf4c      	ite	mi
 80050c2:	9305      	strmi	r3, [sp, #20]
 80050c4:	9304      	strpl	r3, [sp, #16]
 80050c6:	9b00      	ldr	r3, [sp, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	db3d      	blt.n	8005148 <_dtoa_r+0x248>
 80050cc:	9b05      	ldr	r3, [sp, #20]
 80050ce:	9a00      	ldr	r2, [sp, #0]
 80050d0:	920a      	str	r2, [sp, #40]	; 0x28
 80050d2:	4413      	add	r3, r2
 80050d4:	9305      	str	r3, [sp, #20]
 80050d6:	2300      	movs	r3, #0
 80050d8:	9307      	str	r3, [sp, #28]
 80050da:	9b06      	ldr	r3, [sp, #24]
 80050dc:	2b09      	cmp	r3, #9
 80050de:	f200 8089 	bhi.w	80051f4 <_dtoa_r+0x2f4>
 80050e2:	2b05      	cmp	r3, #5
 80050e4:	bfc4      	itt	gt
 80050e6:	3b04      	subgt	r3, #4
 80050e8:	9306      	strgt	r3, [sp, #24]
 80050ea:	9b06      	ldr	r3, [sp, #24]
 80050ec:	f1a3 0302 	sub.w	r3, r3, #2
 80050f0:	bfcc      	ite	gt
 80050f2:	2500      	movgt	r5, #0
 80050f4:	2501      	movle	r5, #1
 80050f6:	2b03      	cmp	r3, #3
 80050f8:	f200 8087 	bhi.w	800520a <_dtoa_r+0x30a>
 80050fc:	e8df f003 	tbb	[pc, r3]
 8005100:	59383a2d 	.word	0x59383a2d
 8005104:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005108:	441d      	add	r5, r3
 800510a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800510e:	2b20      	cmp	r3, #32
 8005110:	bfc1      	itttt	gt
 8005112:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005116:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800511a:	fa0b f303 	lslgt.w	r3, fp, r3
 800511e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005122:	bfda      	itte	le
 8005124:	f1c3 0320 	rsble	r3, r3, #32
 8005128:	fa06 f003 	lslle.w	r0, r6, r3
 800512c:	4318      	orrgt	r0, r3
 800512e:	f7fb f9f9 	bl	8000524 <__aeabi_ui2d>
 8005132:	2301      	movs	r3, #1
 8005134:	4606      	mov	r6, r0
 8005136:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800513a:	3d01      	subs	r5, #1
 800513c:	930e      	str	r3, [sp, #56]	; 0x38
 800513e:	e76a      	b.n	8005016 <_dtoa_r+0x116>
 8005140:	2301      	movs	r3, #1
 8005142:	e7b2      	b.n	80050aa <_dtoa_r+0x1aa>
 8005144:	900b      	str	r0, [sp, #44]	; 0x2c
 8005146:	e7b1      	b.n	80050ac <_dtoa_r+0x1ac>
 8005148:	9b04      	ldr	r3, [sp, #16]
 800514a:	9a00      	ldr	r2, [sp, #0]
 800514c:	1a9b      	subs	r3, r3, r2
 800514e:	9304      	str	r3, [sp, #16]
 8005150:	4253      	negs	r3, r2
 8005152:	9307      	str	r3, [sp, #28]
 8005154:	2300      	movs	r3, #0
 8005156:	930a      	str	r3, [sp, #40]	; 0x28
 8005158:	e7bf      	b.n	80050da <_dtoa_r+0x1da>
 800515a:	2300      	movs	r3, #0
 800515c:	9308      	str	r3, [sp, #32]
 800515e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005160:	2b00      	cmp	r3, #0
 8005162:	dc55      	bgt.n	8005210 <_dtoa_r+0x310>
 8005164:	2301      	movs	r3, #1
 8005166:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800516a:	461a      	mov	r2, r3
 800516c:	9209      	str	r2, [sp, #36]	; 0x24
 800516e:	e00c      	b.n	800518a <_dtoa_r+0x28a>
 8005170:	2301      	movs	r3, #1
 8005172:	e7f3      	b.n	800515c <_dtoa_r+0x25c>
 8005174:	2300      	movs	r3, #0
 8005176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005178:	9308      	str	r3, [sp, #32]
 800517a:	9b00      	ldr	r3, [sp, #0]
 800517c:	4413      	add	r3, r2
 800517e:	9302      	str	r3, [sp, #8]
 8005180:	3301      	adds	r3, #1
 8005182:	2b01      	cmp	r3, #1
 8005184:	9303      	str	r3, [sp, #12]
 8005186:	bfb8      	it	lt
 8005188:	2301      	movlt	r3, #1
 800518a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800518c:	2200      	movs	r2, #0
 800518e:	6042      	str	r2, [r0, #4]
 8005190:	2204      	movs	r2, #4
 8005192:	f102 0614 	add.w	r6, r2, #20
 8005196:	429e      	cmp	r6, r3
 8005198:	6841      	ldr	r1, [r0, #4]
 800519a:	d93d      	bls.n	8005218 <_dtoa_r+0x318>
 800519c:	4620      	mov	r0, r4
 800519e:	f000 fcb7 	bl	8005b10 <_Balloc>
 80051a2:	9001      	str	r0, [sp, #4]
 80051a4:	2800      	cmp	r0, #0
 80051a6:	d13b      	bne.n	8005220 <_dtoa_r+0x320>
 80051a8:	4b11      	ldr	r3, [pc, #68]	; (80051f0 <_dtoa_r+0x2f0>)
 80051aa:	4602      	mov	r2, r0
 80051ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80051b0:	e6c0      	b.n	8004f34 <_dtoa_r+0x34>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e7df      	b.n	8005176 <_dtoa_r+0x276>
 80051b6:	bf00      	nop
 80051b8:	636f4361 	.word	0x636f4361
 80051bc:	3fd287a7 	.word	0x3fd287a7
 80051c0:	8b60c8b3 	.word	0x8b60c8b3
 80051c4:	3fc68a28 	.word	0x3fc68a28
 80051c8:	509f79fb 	.word	0x509f79fb
 80051cc:	3fd34413 	.word	0x3fd34413
 80051d0:	08009351 	.word	0x08009351
 80051d4:	08009368 	.word	0x08009368
 80051d8:	7ff00000 	.word	0x7ff00000
 80051dc:	0800934d 	.word	0x0800934d
 80051e0:	08009344 	.word	0x08009344
 80051e4:	08009321 	.word	0x08009321
 80051e8:	3ff80000 	.word	0x3ff80000
 80051ec:	08009458 	.word	0x08009458
 80051f0:	080093c3 	.word	0x080093c3
 80051f4:	2501      	movs	r5, #1
 80051f6:	2300      	movs	r3, #0
 80051f8:	9306      	str	r3, [sp, #24]
 80051fa:	9508      	str	r5, [sp, #32]
 80051fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005200:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005204:	2200      	movs	r2, #0
 8005206:	2312      	movs	r3, #18
 8005208:	e7b0      	b.n	800516c <_dtoa_r+0x26c>
 800520a:	2301      	movs	r3, #1
 800520c:	9308      	str	r3, [sp, #32]
 800520e:	e7f5      	b.n	80051fc <_dtoa_r+0x2fc>
 8005210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005212:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005216:	e7b8      	b.n	800518a <_dtoa_r+0x28a>
 8005218:	3101      	adds	r1, #1
 800521a:	6041      	str	r1, [r0, #4]
 800521c:	0052      	lsls	r2, r2, #1
 800521e:	e7b8      	b.n	8005192 <_dtoa_r+0x292>
 8005220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005222:	9a01      	ldr	r2, [sp, #4]
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	9b03      	ldr	r3, [sp, #12]
 8005228:	2b0e      	cmp	r3, #14
 800522a:	f200 809d 	bhi.w	8005368 <_dtoa_r+0x468>
 800522e:	2d00      	cmp	r5, #0
 8005230:	f000 809a 	beq.w	8005368 <_dtoa_r+0x468>
 8005234:	9b00      	ldr	r3, [sp, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	dd32      	ble.n	80052a0 <_dtoa_r+0x3a0>
 800523a:	4ab7      	ldr	r2, [pc, #732]	; (8005518 <_dtoa_r+0x618>)
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005244:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005248:	9b00      	ldr	r3, [sp, #0]
 800524a:	05d8      	lsls	r0, r3, #23
 800524c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005250:	d516      	bpl.n	8005280 <_dtoa_r+0x380>
 8005252:	4bb2      	ldr	r3, [pc, #712]	; (800551c <_dtoa_r+0x61c>)
 8005254:	ec51 0b19 	vmov	r0, r1, d9
 8005258:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800525c:	f7fb fb06 	bl	800086c <__aeabi_ddiv>
 8005260:	f007 070f 	and.w	r7, r7, #15
 8005264:	4682      	mov	sl, r0
 8005266:	468b      	mov	fp, r1
 8005268:	2503      	movs	r5, #3
 800526a:	4eac      	ldr	r6, [pc, #688]	; (800551c <_dtoa_r+0x61c>)
 800526c:	b957      	cbnz	r7, 8005284 <_dtoa_r+0x384>
 800526e:	4642      	mov	r2, r8
 8005270:	464b      	mov	r3, r9
 8005272:	4650      	mov	r0, sl
 8005274:	4659      	mov	r1, fp
 8005276:	f7fb faf9 	bl	800086c <__aeabi_ddiv>
 800527a:	4682      	mov	sl, r0
 800527c:	468b      	mov	fp, r1
 800527e:	e028      	b.n	80052d2 <_dtoa_r+0x3d2>
 8005280:	2502      	movs	r5, #2
 8005282:	e7f2      	b.n	800526a <_dtoa_r+0x36a>
 8005284:	07f9      	lsls	r1, r7, #31
 8005286:	d508      	bpl.n	800529a <_dtoa_r+0x39a>
 8005288:	4640      	mov	r0, r8
 800528a:	4649      	mov	r1, r9
 800528c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005290:	f7fb f9c2 	bl	8000618 <__aeabi_dmul>
 8005294:	3501      	adds	r5, #1
 8005296:	4680      	mov	r8, r0
 8005298:	4689      	mov	r9, r1
 800529a:	107f      	asrs	r7, r7, #1
 800529c:	3608      	adds	r6, #8
 800529e:	e7e5      	b.n	800526c <_dtoa_r+0x36c>
 80052a0:	f000 809b 	beq.w	80053da <_dtoa_r+0x4da>
 80052a4:	9b00      	ldr	r3, [sp, #0]
 80052a6:	4f9d      	ldr	r7, [pc, #628]	; (800551c <_dtoa_r+0x61c>)
 80052a8:	425e      	negs	r6, r3
 80052aa:	4b9b      	ldr	r3, [pc, #620]	; (8005518 <_dtoa_r+0x618>)
 80052ac:	f006 020f 	and.w	r2, r6, #15
 80052b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	ec51 0b19 	vmov	r0, r1, d9
 80052bc:	f7fb f9ac 	bl	8000618 <__aeabi_dmul>
 80052c0:	1136      	asrs	r6, r6, #4
 80052c2:	4682      	mov	sl, r0
 80052c4:	468b      	mov	fp, r1
 80052c6:	2300      	movs	r3, #0
 80052c8:	2502      	movs	r5, #2
 80052ca:	2e00      	cmp	r6, #0
 80052cc:	d17a      	bne.n	80053c4 <_dtoa_r+0x4c4>
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1d3      	bne.n	800527a <_dtoa_r+0x37a>
 80052d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 8082 	beq.w	80053de <_dtoa_r+0x4de>
 80052da:	4b91      	ldr	r3, [pc, #580]	; (8005520 <_dtoa_r+0x620>)
 80052dc:	2200      	movs	r2, #0
 80052de:	4650      	mov	r0, sl
 80052e0:	4659      	mov	r1, fp
 80052e2:	f7fb fc0b 	bl	8000afc <__aeabi_dcmplt>
 80052e6:	2800      	cmp	r0, #0
 80052e8:	d079      	beq.n	80053de <_dtoa_r+0x4de>
 80052ea:	9b03      	ldr	r3, [sp, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d076      	beq.n	80053de <_dtoa_r+0x4de>
 80052f0:	9b02      	ldr	r3, [sp, #8]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	dd36      	ble.n	8005364 <_dtoa_r+0x464>
 80052f6:	9b00      	ldr	r3, [sp, #0]
 80052f8:	4650      	mov	r0, sl
 80052fa:	4659      	mov	r1, fp
 80052fc:	1e5f      	subs	r7, r3, #1
 80052fe:	2200      	movs	r2, #0
 8005300:	4b88      	ldr	r3, [pc, #544]	; (8005524 <_dtoa_r+0x624>)
 8005302:	f7fb f989 	bl	8000618 <__aeabi_dmul>
 8005306:	9e02      	ldr	r6, [sp, #8]
 8005308:	4682      	mov	sl, r0
 800530a:	468b      	mov	fp, r1
 800530c:	3501      	adds	r5, #1
 800530e:	4628      	mov	r0, r5
 8005310:	f7fb f918 	bl	8000544 <__aeabi_i2d>
 8005314:	4652      	mov	r2, sl
 8005316:	465b      	mov	r3, fp
 8005318:	f7fb f97e 	bl	8000618 <__aeabi_dmul>
 800531c:	4b82      	ldr	r3, [pc, #520]	; (8005528 <_dtoa_r+0x628>)
 800531e:	2200      	movs	r2, #0
 8005320:	f7fa ffc4 	bl	80002ac <__adddf3>
 8005324:	46d0      	mov	r8, sl
 8005326:	46d9      	mov	r9, fp
 8005328:	4682      	mov	sl, r0
 800532a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800532e:	2e00      	cmp	r6, #0
 8005330:	d158      	bne.n	80053e4 <_dtoa_r+0x4e4>
 8005332:	4b7e      	ldr	r3, [pc, #504]	; (800552c <_dtoa_r+0x62c>)
 8005334:	2200      	movs	r2, #0
 8005336:	4640      	mov	r0, r8
 8005338:	4649      	mov	r1, r9
 800533a:	f7fa ffb5 	bl	80002a8 <__aeabi_dsub>
 800533e:	4652      	mov	r2, sl
 8005340:	465b      	mov	r3, fp
 8005342:	4680      	mov	r8, r0
 8005344:	4689      	mov	r9, r1
 8005346:	f7fb fbf7 	bl	8000b38 <__aeabi_dcmpgt>
 800534a:	2800      	cmp	r0, #0
 800534c:	f040 8295 	bne.w	800587a <_dtoa_r+0x97a>
 8005350:	4652      	mov	r2, sl
 8005352:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005356:	4640      	mov	r0, r8
 8005358:	4649      	mov	r1, r9
 800535a:	f7fb fbcf 	bl	8000afc <__aeabi_dcmplt>
 800535e:	2800      	cmp	r0, #0
 8005360:	f040 8289 	bne.w	8005876 <_dtoa_r+0x976>
 8005364:	ec5b ab19 	vmov	sl, fp, d9
 8005368:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800536a:	2b00      	cmp	r3, #0
 800536c:	f2c0 8148 	blt.w	8005600 <_dtoa_r+0x700>
 8005370:	9a00      	ldr	r2, [sp, #0]
 8005372:	2a0e      	cmp	r2, #14
 8005374:	f300 8144 	bgt.w	8005600 <_dtoa_r+0x700>
 8005378:	4b67      	ldr	r3, [pc, #412]	; (8005518 <_dtoa_r+0x618>)
 800537a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800537e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005384:	2b00      	cmp	r3, #0
 8005386:	f280 80d5 	bge.w	8005534 <_dtoa_r+0x634>
 800538a:	9b03      	ldr	r3, [sp, #12]
 800538c:	2b00      	cmp	r3, #0
 800538e:	f300 80d1 	bgt.w	8005534 <_dtoa_r+0x634>
 8005392:	f040 826f 	bne.w	8005874 <_dtoa_r+0x974>
 8005396:	4b65      	ldr	r3, [pc, #404]	; (800552c <_dtoa_r+0x62c>)
 8005398:	2200      	movs	r2, #0
 800539a:	4640      	mov	r0, r8
 800539c:	4649      	mov	r1, r9
 800539e:	f7fb f93b 	bl	8000618 <__aeabi_dmul>
 80053a2:	4652      	mov	r2, sl
 80053a4:	465b      	mov	r3, fp
 80053a6:	f7fb fbbd 	bl	8000b24 <__aeabi_dcmpge>
 80053aa:	9e03      	ldr	r6, [sp, #12]
 80053ac:	4637      	mov	r7, r6
 80053ae:	2800      	cmp	r0, #0
 80053b0:	f040 8245 	bne.w	800583e <_dtoa_r+0x93e>
 80053b4:	9d01      	ldr	r5, [sp, #4]
 80053b6:	2331      	movs	r3, #49	; 0x31
 80053b8:	f805 3b01 	strb.w	r3, [r5], #1
 80053bc:	9b00      	ldr	r3, [sp, #0]
 80053be:	3301      	adds	r3, #1
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	e240      	b.n	8005846 <_dtoa_r+0x946>
 80053c4:	07f2      	lsls	r2, r6, #31
 80053c6:	d505      	bpl.n	80053d4 <_dtoa_r+0x4d4>
 80053c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053cc:	f7fb f924 	bl	8000618 <__aeabi_dmul>
 80053d0:	3501      	adds	r5, #1
 80053d2:	2301      	movs	r3, #1
 80053d4:	1076      	asrs	r6, r6, #1
 80053d6:	3708      	adds	r7, #8
 80053d8:	e777      	b.n	80052ca <_dtoa_r+0x3ca>
 80053da:	2502      	movs	r5, #2
 80053dc:	e779      	b.n	80052d2 <_dtoa_r+0x3d2>
 80053de:	9f00      	ldr	r7, [sp, #0]
 80053e0:	9e03      	ldr	r6, [sp, #12]
 80053e2:	e794      	b.n	800530e <_dtoa_r+0x40e>
 80053e4:	9901      	ldr	r1, [sp, #4]
 80053e6:	4b4c      	ldr	r3, [pc, #304]	; (8005518 <_dtoa_r+0x618>)
 80053e8:	4431      	add	r1, r6
 80053ea:	910d      	str	r1, [sp, #52]	; 0x34
 80053ec:	9908      	ldr	r1, [sp, #32]
 80053ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80053f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80053f6:	2900      	cmp	r1, #0
 80053f8:	d043      	beq.n	8005482 <_dtoa_r+0x582>
 80053fa:	494d      	ldr	r1, [pc, #308]	; (8005530 <_dtoa_r+0x630>)
 80053fc:	2000      	movs	r0, #0
 80053fe:	f7fb fa35 	bl	800086c <__aeabi_ddiv>
 8005402:	4652      	mov	r2, sl
 8005404:	465b      	mov	r3, fp
 8005406:	f7fa ff4f 	bl	80002a8 <__aeabi_dsub>
 800540a:	9d01      	ldr	r5, [sp, #4]
 800540c:	4682      	mov	sl, r0
 800540e:	468b      	mov	fp, r1
 8005410:	4649      	mov	r1, r9
 8005412:	4640      	mov	r0, r8
 8005414:	f7fb fbb0 	bl	8000b78 <__aeabi_d2iz>
 8005418:	4606      	mov	r6, r0
 800541a:	f7fb f893 	bl	8000544 <__aeabi_i2d>
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	4640      	mov	r0, r8
 8005424:	4649      	mov	r1, r9
 8005426:	f7fa ff3f 	bl	80002a8 <__aeabi_dsub>
 800542a:	3630      	adds	r6, #48	; 0x30
 800542c:	f805 6b01 	strb.w	r6, [r5], #1
 8005430:	4652      	mov	r2, sl
 8005432:	465b      	mov	r3, fp
 8005434:	4680      	mov	r8, r0
 8005436:	4689      	mov	r9, r1
 8005438:	f7fb fb60 	bl	8000afc <__aeabi_dcmplt>
 800543c:	2800      	cmp	r0, #0
 800543e:	d163      	bne.n	8005508 <_dtoa_r+0x608>
 8005440:	4642      	mov	r2, r8
 8005442:	464b      	mov	r3, r9
 8005444:	4936      	ldr	r1, [pc, #216]	; (8005520 <_dtoa_r+0x620>)
 8005446:	2000      	movs	r0, #0
 8005448:	f7fa ff2e 	bl	80002a8 <__aeabi_dsub>
 800544c:	4652      	mov	r2, sl
 800544e:	465b      	mov	r3, fp
 8005450:	f7fb fb54 	bl	8000afc <__aeabi_dcmplt>
 8005454:	2800      	cmp	r0, #0
 8005456:	f040 80b5 	bne.w	80055c4 <_dtoa_r+0x6c4>
 800545a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800545c:	429d      	cmp	r5, r3
 800545e:	d081      	beq.n	8005364 <_dtoa_r+0x464>
 8005460:	4b30      	ldr	r3, [pc, #192]	; (8005524 <_dtoa_r+0x624>)
 8005462:	2200      	movs	r2, #0
 8005464:	4650      	mov	r0, sl
 8005466:	4659      	mov	r1, fp
 8005468:	f7fb f8d6 	bl	8000618 <__aeabi_dmul>
 800546c:	4b2d      	ldr	r3, [pc, #180]	; (8005524 <_dtoa_r+0x624>)
 800546e:	4682      	mov	sl, r0
 8005470:	468b      	mov	fp, r1
 8005472:	4640      	mov	r0, r8
 8005474:	4649      	mov	r1, r9
 8005476:	2200      	movs	r2, #0
 8005478:	f7fb f8ce 	bl	8000618 <__aeabi_dmul>
 800547c:	4680      	mov	r8, r0
 800547e:	4689      	mov	r9, r1
 8005480:	e7c6      	b.n	8005410 <_dtoa_r+0x510>
 8005482:	4650      	mov	r0, sl
 8005484:	4659      	mov	r1, fp
 8005486:	f7fb f8c7 	bl	8000618 <__aeabi_dmul>
 800548a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800548c:	9d01      	ldr	r5, [sp, #4]
 800548e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005490:	4682      	mov	sl, r0
 8005492:	468b      	mov	fp, r1
 8005494:	4649      	mov	r1, r9
 8005496:	4640      	mov	r0, r8
 8005498:	f7fb fb6e 	bl	8000b78 <__aeabi_d2iz>
 800549c:	4606      	mov	r6, r0
 800549e:	f7fb f851 	bl	8000544 <__aeabi_i2d>
 80054a2:	3630      	adds	r6, #48	; 0x30
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	4640      	mov	r0, r8
 80054aa:	4649      	mov	r1, r9
 80054ac:	f7fa fefc 	bl	80002a8 <__aeabi_dsub>
 80054b0:	f805 6b01 	strb.w	r6, [r5], #1
 80054b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054b6:	429d      	cmp	r5, r3
 80054b8:	4680      	mov	r8, r0
 80054ba:	4689      	mov	r9, r1
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	d124      	bne.n	800550c <_dtoa_r+0x60c>
 80054c2:	4b1b      	ldr	r3, [pc, #108]	; (8005530 <_dtoa_r+0x630>)
 80054c4:	4650      	mov	r0, sl
 80054c6:	4659      	mov	r1, fp
 80054c8:	f7fa fef0 	bl	80002ac <__adddf3>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4640      	mov	r0, r8
 80054d2:	4649      	mov	r1, r9
 80054d4:	f7fb fb30 	bl	8000b38 <__aeabi_dcmpgt>
 80054d8:	2800      	cmp	r0, #0
 80054da:	d173      	bne.n	80055c4 <_dtoa_r+0x6c4>
 80054dc:	4652      	mov	r2, sl
 80054de:	465b      	mov	r3, fp
 80054e0:	4913      	ldr	r1, [pc, #76]	; (8005530 <_dtoa_r+0x630>)
 80054e2:	2000      	movs	r0, #0
 80054e4:	f7fa fee0 	bl	80002a8 <__aeabi_dsub>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	4640      	mov	r0, r8
 80054ee:	4649      	mov	r1, r9
 80054f0:	f7fb fb04 	bl	8000afc <__aeabi_dcmplt>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	f43f af35 	beq.w	8005364 <_dtoa_r+0x464>
 80054fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80054fc:	1e6b      	subs	r3, r5, #1
 80054fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005500:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005504:	2b30      	cmp	r3, #48	; 0x30
 8005506:	d0f8      	beq.n	80054fa <_dtoa_r+0x5fa>
 8005508:	9700      	str	r7, [sp, #0]
 800550a:	e049      	b.n	80055a0 <_dtoa_r+0x6a0>
 800550c:	4b05      	ldr	r3, [pc, #20]	; (8005524 <_dtoa_r+0x624>)
 800550e:	f7fb f883 	bl	8000618 <__aeabi_dmul>
 8005512:	4680      	mov	r8, r0
 8005514:	4689      	mov	r9, r1
 8005516:	e7bd      	b.n	8005494 <_dtoa_r+0x594>
 8005518:	08009458 	.word	0x08009458
 800551c:	08009430 	.word	0x08009430
 8005520:	3ff00000 	.word	0x3ff00000
 8005524:	40240000 	.word	0x40240000
 8005528:	401c0000 	.word	0x401c0000
 800552c:	40140000 	.word	0x40140000
 8005530:	3fe00000 	.word	0x3fe00000
 8005534:	9d01      	ldr	r5, [sp, #4]
 8005536:	4656      	mov	r6, sl
 8005538:	465f      	mov	r7, fp
 800553a:	4642      	mov	r2, r8
 800553c:	464b      	mov	r3, r9
 800553e:	4630      	mov	r0, r6
 8005540:	4639      	mov	r1, r7
 8005542:	f7fb f993 	bl	800086c <__aeabi_ddiv>
 8005546:	f7fb fb17 	bl	8000b78 <__aeabi_d2iz>
 800554a:	4682      	mov	sl, r0
 800554c:	f7fa fffa 	bl	8000544 <__aeabi_i2d>
 8005550:	4642      	mov	r2, r8
 8005552:	464b      	mov	r3, r9
 8005554:	f7fb f860 	bl	8000618 <__aeabi_dmul>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4630      	mov	r0, r6
 800555e:	4639      	mov	r1, r7
 8005560:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005564:	f7fa fea0 	bl	80002a8 <__aeabi_dsub>
 8005568:	f805 6b01 	strb.w	r6, [r5], #1
 800556c:	9e01      	ldr	r6, [sp, #4]
 800556e:	9f03      	ldr	r7, [sp, #12]
 8005570:	1bae      	subs	r6, r5, r6
 8005572:	42b7      	cmp	r7, r6
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	d135      	bne.n	80055e6 <_dtoa_r+0x6e6>
 800557a:	f7fa fe97 	bl	80002ac <__adddf3>
 800557e:	4642      	mov	r2, r8
 8005580:	464b      	mov	r3, r9
 8005582:	4606      	mov	r6, r0
 8005584:	460f      	mov	r7, r1
 8005586:	f7fb fad7 	bl	8000b38 <__aeabi_dcmpgt>
 800558a:	b9d0      	cbnz	r0, 80055c2 <_dtoa_r+0x6c2>
 800558c:	4642      	mov	r2, r8
 800558e:	464b      	mov	r3, r9
 8005590:	4630      	mov	r0, r6
 8005592:	4639      	mov	r1, r7
 8005594:	f7fb faa8 	bl	8000ae8 <__aeabi_dcmpeq>
 8005598:	b110      	cbz	r0, 80055a0 <_dtoa_r+0x6a0>
 800559a:	f01a 0f01 	tst.w	sl, #1
 800559e:	d110      	bne.n	80055c2 <_dtoa_r+0x6c2>
 80055a0:	4620      	mov	r0, r4
 80055a2:	ee18 1a10 	vmov	r1, s16
 80055a6:	f000 faf3 	bl	8005b90 <_Bfree>
 80055aa:	2300      	movs	r3, #0
 80055ac:	9800      	ldr	r0, [sp, #0]
 80055ae:	702b      	strb	r3, [r5, #0]
 80055b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055b2:	3001      	adds	r0, #1
 80055b4:	6018      	str	r0, [r3, #0]
 80055b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f43f acf1 	beq.w	8004fa0 <_dtoa_r+0xa0>
 80055be:	601d      	str	r5, [r3, #0]
 80055c0:	e4ee      	b.n	8004fa0 <_dtoa_r+0xa0>
 80055c2:	9f00      	ldr	r7, [sp, #0]
 80055c4:	462b      	mov	r3, r5
 80055c6:	461d      	mov	r5, r3
 80055c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055cc:	2a39      	cmp	r2, #57	; 0x39
 80055ce:	d106      	bne.n	80055de <_dtoa_r+0x6de>
 80055d0:	9a01      	ldr	r2, [sp, #4]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d1f7      	bne.n	80055c6 <_dtoa_r+0x6c6>
 80055d6:	9901      	ldr	r1, [sp, #4]
 80055d8:	2230      	movs	r2, #48	; 0x30
 80055da:	3701      	adds	r7, #1
 80055dc:	700a      	strb	r2, [r1, #0]
 80055de:	781a      	ldrb	r2, [r3, #0]
 80055e0:	3201      	adds	r2, #1
 80055e2:	701a      	strb	r2, [r3, #0]
 80055e4:	e790      	b.n	8005508 <_dtoa_r+0x608>
 80055e6:	4ba6      	ldr	r3, [pc, #664]	; (8005880 <_dtoa_r+0x980>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	f7fb f815 	bl	8000618 <__aeabi_dmul>
 80055ee:	2200      	movs	r2, #0
 80055f0:	2300      	movs	r3, #0
 80055f2:	4606      	mov	r6, r0
 80055f4:	460f      	mov	r7, r1
 80055f6:	f7fb fa77 	bl	8000ae8 <__aeabi_dcmpeq>
 80055fa:	2800      	cmp	r0, #0
 80055fc:	d09d      	beq.n	800553a <_dtoa_r+0x63a>
 80055fe:	e7cf      	b.n	80055a0 <_dtoa_r+0x6a0>
 8005600:	9a08      	ldr	r2, [sp, #32]
 8005602:	2a00      	cmp	r2, #0
 8005604:	f000 80d7 	beq.w	80057b6 <_dtoa_r+0x8b6>
 8005608:	9a06      	ldr	r2, [sp, #24]
 800560a:	2a01      	cmp	r2, #1
 800560c:	f300 80ba 	bgt.w	8005784 <_dtoa_r+0x884>
 8005610:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005612:	2a00      	cmp	r2, #0
 8005614:	f000 80b2 	beq.w	800577c <_dtoa_r+0x87c>
 8005618:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800561c:	9e07      	ldr	r6, [sp, #28]
 800561e:	9d04      	ldr	r5, [sp, #16]
 8005620:	9a04      	ldr	r2, [sp, #16]
 8005622:	441a      	add	r2, r3
 8005624:	9204      	str	r2, [sp, #16]
 8005626:	9a05      	ldr	r2, [sp, #20]
 8005628:	2101      	movs	r1, #1
 800562a:	441a      	add	r2, r3
 800562c:	4620      	mov	r0, r4
 800562e:	9205      	str	r2, [sp, #20]
 8005630:	f000 fb66 	bl	8005d00 <__i2b>
 8005634:	4607      	mov	r7, r0
 8005636:	2d00      	cmp	r5, #0
 8005638:	dd0c      	ble.n	8005654 <_dtoa_r+0x754>
 800563a:	9b05      	ldr	r3, [sp, #20]
 800563c:	2b00      	cmp	r3, #0
 800563e:	dd09      	ble.n	8005654 <_dtoa_r+0x754>
 8005640:	42ab      	cmp	r3, r5
 8005642:	9a04      	ldr	r2, [sp, #16]
 8005644:	bfa8      	it	ge
 8005646:	462b      	movge	r3, r5
 8005648:	1ad2      	subs	r2, r2, r3
 800564a:	9204      	str	r2, [sp, #16]
 800564c:	9a05      	ldr	r2, [sp, #20]
 800564e:	1aed      	subs	r5, r5, r3
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	9305      	str	r3, [sp, #20]
 8005654:	9b07      	ldr	r3, [sp, #28]
 8005656:	b31b      	cbz	r3, 80056a0 <_dtoa_r+0x7a0>
 8005658:	9b08      	ldr	r3, [sp, #32]
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 80af 	beq.w	80057be <_dtoa_r+0x8be>
 8005660:	2e00      	cmp	r6, #0
 8005662:	dd13      	ble.n	800568c <_dtoa_r+0x78c>
 8005664:	4639      	mov	r1, r7
 8005666:	4632      	mov	r2, r6
 8005668:	4620      	mov	r0, r4
 800566a:	f000 fc09 	bl	8005e80 <__pow5mult>
 800566e:	ee18 2a10 	vmov	r2, s16
 8005672:	4601      	mov	r1, r0
 8005674:	4607      	mov	r7, r0
 8005676:	4620      	mov	r0, r4
 8005678:	f000 fb58 	bl	8005d2c <__multiply>
 800567c:	ee18 1a10 	vmov	r1, s16
 8005680:	4680      	mov	r8, r0
 8005682:	4620      	mov	r0, r4
 8005684:	f000 fa84 	bl	8005b90 <_Bfree>
 8005688:	ee08 8a10 	vmov	s16, r8
 800568c:	9b07      	ldr	r3, [sp, #28]
 800568e:	1b9a      	subs	r2, r3, r6
 8005690:	d006      	beq.n	80056a0 <_dtoa_r+0x7a0>
 8005692:	ee18 1a10 	vmov	r1, s16
 8005696:	4620      	mov	r0, r4
 8005698:	f000 fbf2 	bl	8005e80 <__pow5mult>
 800569c:	ee08 0a10 	vmov	s16, r0
 80056a0:	2101      	movs	r1, #1
 80056a2:	4620      	mov	r0, r4
 80056a4:	f000 fb2c 	bl	8005d00 <__i2b>
 80056a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	4606      	mov	r6, r0
 80056ae:	f340 8088 	ble.w	80057c2 <_dtoa_r+0x8c2>
 80056b2:	461a      	mov	r2, r3
 80056b4:	4601      	mov	r1, r0
 80056b6:	4620      	mov	r0, r4
 80056b8:	f000 fbe2 	bl	8005e80 <__pow5mult>
 80056bc:	9b06      	ldr	r3, [sp, #24]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	4606      	mov	r6, r0
 80056c2:	f340 8081 	ble.w	80057c8 <_dtoa_r+0x8c8>
 80056c6:	f04f 0800 	mov.w	r8, #0
 80056ca:	6933      	ldr	r3, [r6, #16]
 80056cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80056d0:	6918      	ldr	r0, [r3, #16]
 80056d2:	f000 fac5 	bl	8005c60 <__hi0bits>
 80056d6:	f1c0 0020 	rsb	r0, r0, #32
 80056da:	9b05      	ldr	r3, [sp, #20]
 80056dc:	4418      	add	r0, r3
 80056de:	f010 001f 	ands.w	r0, r0, #31
 80056e2:	f000 8092 	beq.w	800580a <_dtoa_r+0x90a>
 80056e6:	f1c0 0320 	rsb	r3, r0, #32
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	f340 808a 	ble.w	8005804 <_dtoa_r+0x904>
 80056f0:	f1c0 001c 	rsb	r0, r0, #28
 80056f4:	9b04      	ldr	r3, [sp, #16]
 80056f6:	4403      	add	r3, r0
 80056f8:	9304      	str	r3, [sp, #16]
 80056fa:	9b05      	ldr	r3, [sp, #20]
 80056fc:	4403      	add	r3, r0
 80056fe:	4405      	add	r5, r0
 8005700:	9305      	str	r3, [sp, #20]
 8005702:	9b04      	ldr	r3, [sp, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	dd07      	ble.n	8005718 <_dtoa_r+0x818>
 8005708:	ee18 1a10 	vmov	r1, s16
 800570c:	461a      	mov	r2, r3
 800570e:	4620      	mov	r0, r4
 8005710:	f000 fc10 	bl	8005f34 <__lshift>
 8005714:	ee08 0a10 	vmov	s16, r0
 8005718:	9b05      	ldr	r3, [sp, #20]
 800571a:	2b00      	cmp	r3, #0
 800571c:	dd05      	ble.n	800572a <_dtoa_r+0x82a>
 800571e:	4631      	mov	r1, r6
 8005720:	461a      	mov	r2, r3
 8005722:	4620      	mov	r0, r4
 8005724:	f000 fc06 	bl	8005f34 <__lshift>
 8005728:	4606      	mov	r6, r0
 800572a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800572c:	2b00      	cmp	r3, #0
 800572e:	d06e      	beq.n	800580e <_dtoa_r+0x90e>
 8005730:	ee18 0a10 	vmov	r0, s16
 8005734:	4631      	mov	r1, r6
 8005736:	f000 fc6d 	bl	8006014 <__mcmp>
 800573a:	2800      	cmp	r0, #0
 800573c:	da67      	bge.n	800580e <_dtoa_r+0x90e>
 800573e:	9b00      	ldr	r3, [sp, #0]
 8005740:	3b01      	subs	r3, #1
 8005742:	ee18 1a10 	vmov	r1, s16
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	220a      	movs	r2, #10
 800574a:	2300      	movs	r3, #0
 800574c:	4620      	mov	r0, r4
 800574e:	f000 fa41 	bl	8005bd4 <__multadd>
 8005752:	9b08      	ldr	r3, [sp, #32]
 8005754:	ee08 0a10 	vmov	s16, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 81b1 	beq.w	8005ac0 <_dtoa_r+0xbc0>
 800575e:	2300      	movs	r3, #0
 8005760:	4639      	mov	r1, r7
 8005762:	220a      	movs	r2, #10
 8005764:	4620      	mov	r0, r4
 8005766:	f000 fa35 	bl	8005bd4 <__multadd>
 800576a:	9b02      	ldr	r3, [sp, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	4607      	mov	r7, r0
 8005770:	f300 808e 	bgt.w	8005890 <_dtoa_r+0x990>
 8005774:	9b06      	ldr	r3, [sp, #24]
 8005776:	2b02      	cmp	r3, #2
 8005778:	dc51      	bgt.n	800581e <_dtoa_r+0x91e>
 800577a:	e089      	b.n	8005890 <_dtoa_r+0x990>
 800577c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800577e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005782:	e74b      	b.n	800561c <_dtoa_r+0x71c>
 8005784:	9b03      	ldr	r3, [sp, #12]
 8005786:	1e5e      	subs	r6, r3, #1
 8005788:	9b07      	ldr	r3, [sp, #28]
 800578a:	42b3      	cmp	r3, r6
 800578c:	bfbf      	itttt	lt
 800578e:	9b07      	ldrlt	r3, [sp, #28]
 8005790:	9607      	strlt	r6, [sp, #28]
 8005792:	1af2      	sublt	r2, r6, r3
 8005794:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005796:	bfb6      	itet	lt
 8005798:	189b      	addlt	r3, r3, r2
 800579a:	1b9e      	subge	r6, r3, r6
 800579c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800579e:	9b03      	ldr	r3, [sp, #12]
 80057a0:	bfb8      	it	lt
 80057a2:	2600      	movlt	r6, #0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	bfb7      	itett	lt
 80057a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80057ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80057b0:	1a9d      	sublt	r5, r3, r2
 80057b2:	2300      	movlt	r3, #0
 80057b4:	e734      	b.n	8005620 <_dtoa_r+0x720>
 80057b6:	9e07      	ldr	r6, [sp, #28]
 80057b8:	9d04      	ldr	r5, [sp, #16]
 80057ba:	9f08      	ldr	r7, [sp, #32]
 80057bc:	e73b      	b.n	8005636 <_dtoa_r+0x736>
 80057be:	9a07      	ldr	r2, [sp, #28]
 80057c0:	e767      	b.n	8005692 <_dtoa_r+0x792>
 80057c2:	9b06      	ldr	r3, [sp, #24]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	dc18      	bgt.n	80057fa <_dtoa_r+0x8fa>
 80057c8:	f1ba 0f00 	cmp.w	sl, #0
 80057cc:	d115      	bne.n	80057fa <_dtoa_r+0x8fa>
 80057ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80057d2:	b993      	cbnz	r3, 80057fa <_dtoa_r+0x8fa>
 80057d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80057d8:	0d1b      	lsrs	r3, r3, #20
 80057da:	051b      	lsls	r3, r3, #20
 80057dc:	b183      	cbz	r3, 8005800 <_dtoa_r+0x900>
 80057de:	9b04      	ldr	r3, [sp, #16]
 80057e0:	3301      	adds	r3, #1
 80057e2:	9304      	str	r3, [sp, #16]
 80057e4:	9b05      	ldr	r3, [sp, #20]
 80057e6:	3301      	adds	r3, #1
 80057e8:	9305      	str	r3, [sp, #20]
 80057ea:	f04f 0801 	mov.w	r8, #1
 80057ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f47f af6a 	bne.w	80056ca <_dtoa_r+0x7ca>
 80057f6:	2001      	movs	r0, #1
 80057f8:	e76f      	b.n	80056da <_dtoa_r+0x7da>
 80057fa:	f04f 0800 	mov.w	r8, #0
 80057fe:	e7f6      	b.n	80057ee <_dtoa_r+0x8ee>
 8005800:	4698      	mov	r8, r3
 8005802:	e7f4      	b.n	80057ee <_dtoa_r+0x8ee>
 8005804:	f43f af7d 	beq.w	8005702 <_dtoa_r+0x802>
 8005808:	4618      	mov	r0, r3
 800580a:	301c      	adds	r0, #28
 800580c:	e772      	b.n	80056f4 <_dtoa_r+0x7f4>
 800580e:	9b03      	ldr	r3, [sp, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	dc37      	bgt.n	8005884 <_dtoa_r+0x984>
 8005814:	9b06      	ldr	r3, [sp, #24]
 8005816:	2b02      	cmp	r3, #2
 8005818:	dd34      	ble.n	8005884 <_dtoa_r+0x984>
 800581a:	9b03      	ldr	r3, [sp, #12]
 800581c:	9302      	str	r3, [sp, #8]
 800581e:	9b02      	ldr	r3, [sp, #8]
 8005820:	b96b      	cbnz	r3, 800583e <_dtoa_r+0x93e>
 8005822:	4631      	mov	r1, r6
 8005824:	2205      	movs	r2, #5
 8005826:	4620      	mov	r0, r4
 8005828:	f000 f9d4 	bl	8005bd4 <__multadd>
 800582c:	4601      	mov	r1, r0
 800582e:	4606      	mov	r6, r0
 8005830:	ee18 0a10 	vmov	r0, s16
 8005834:	f000 fbee 	bl	8006014 <__mcmp>
 8005838:	2800      	cmp	r0, #0
 800583a:	f73f adbb 	bgt.w	80053b4 <_dtoa_r+0x4b4>
 800583e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005840:	9d01      	ldr	r5, [sp, #4]
 8005842:	43db      	mvns	r3, r3
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	f04f 0800 	mov.w	r8, #0
 800584a:	4631      	mov	r1, r6
 800584c:	4620      	mov	r0, r4
 800584e:	f000 f99f 	bl	8005b90 <_Bfree>
 8005852:	2f00      	cmp	r7, #0
 8005854:	f43f aea4 	beq.w	80055a0 <_dtoa_r+0x6a0>
 8005858:	f1b8 0f00 	cmp.w	r8, #0
 800585c:	d005      	beq.n	800586a <_dtoa_r+0x96a>
 800585e:	45b8      	cmp	r8, r7
 8005860:	d003      	beq.n	800586a <_dtoa_r+0x96a>
 8005862:	4641      	mov	r1, r8
 8005864:	4620      	mov	r0, r4
 8005866:	f000 f993 	bl	8005b90 <_Bfree>
 800586a:	4639      	mov	r1, r7
 800586c:	4620      	mov	r0, r4
 800586e:	f000 f98f 	bl	8005b90 <_Bfree>
 8005872:	e695      	b.n	80055a0 <_dtoa_r+0x6a0>
 8005874:	2600      	movs	r6, #0
 8005876:	4637      	mov	r7, r6
 8005878:	e7e1      	b.n	800583e <_dtoa_r+0x93e>
 800587a:	9700      	str	r7, [sp, #0]
 800587c:	4637      	mov	r7, r6
 800587e:	e599      	b.n	80053b4 <_dtoa_r+0x4b4>
 8005880:	40240000 	.word	0x40240000
 8005884:	9b08      	ldr	r3, [sp, #32]
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 80ca 	beq.w	8005a20 <_dtoa_r+0xb20>
 800588c:	9b03      	ldr	r3, [sp, #12]
 800588e:	9302      	str	r3, [sp, #8]
 8005890:	2d00      	cmp	r5, #0
 8005892:	dd05      	ble.n	80058a0 <_dtoa_r+0x9a0>
 8005894:	4639      	mov	r1, r7
 8005896:	462a      	mov	r2, r5
 8005898:	4620      	mov	r0, r4
 800589a:	f000 fb4b 	bl	8005f34 <__lshift>
 800589e:	4607      	mov	r7, r0
 80058a0:	f1b8 0f00 	cmp.w	r8, #0
 80058a4:	d05b      	beq.n	800595e <_dtoa_r+0xa5e>
 80058a6:	6879      	ldr	r1, [r7, #4]
 80058a8:	4620      	mov	r0, r4
 80058aa:	f000 f931 	bl	8005b10 <_Balloc>
 80058ae:	4605      	mov	r5, r0
 80058b0:	b928      	cbnz	r0, 80058be <_dtoa_r+0x9be>
 80058b2:	4b87      	ldr	r3, [pc, #540]	; (8005ad0 <_dtoa_r+0xbd0>)
 80058b4:	4602      	mov	r2, r0
 80058b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80058ba:	f7ff bb3b 	b.w	8004f34 <_dtoa_r+0x34>
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	3202      	adds	r2, #2
 80058c2:	0092      	lsls	r2, r2, #2
 80058c4:	f107 010c 	add.w	r1, r7, #12
 80058c8:	300c      	adds	r0, #12
 80058ca:	f000 f913 	bl	8005af4 <memcpy>
 80058ce:	2201      	movs	r2, #1
 80058d0:	4629      	mov	r1, r5
 80058d2:	4620      	mov	r0, r4
 80058d4:	f000 fb2e 	bl	8005f34 <__lshift>
 80058d8:	9b01      	ldr	r3, [sp, #4]
 80058da:	f103 0901 	add.w	r9, r3, #1
 80058de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80058e2:	4413      	add	r3, r2
 80058e4:	9305      	str	r3, [sp, #20]
 80058e6:	f00a 0301 	and.w	r3, sl, #1
 80058ea:	46b8      	mov	r8, r7
 80058ec:	9304      	str	r3, [sp, #16]
 80058ee:	4607      	mov	r7, r0
 80058f0:	4631      	mov	r1, r6
 80058f2:	ee18 0a10 	vmov	r0, s16
 80058f6:	f7ff fa77 	bl	8004de8 <quorem>
 80058fa:	4641      	mov	r1, r8
 80058fc:	9002      	str	r0, [sp, #8]
 80058fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005902:	ee18 0a10 	vmov	r0, s16
 8005906:	f000 fb85 	bl	8006014 <__mcmp>
 800590a:	463a      	mov	r2, r7
 800590c:	9003      	str	r0, [sp, #12]
 800590e:	4631      	mov	r1, r6
 8005910:	4620      	mov	r0, r4
 8005912:	f000 fb9b 	bl	800604c <__mdiff>
 8005916:	68c2      	ldr	r2, [r0, #12]
 8005918:	f109 3bff 	add.w	fp, r9, #4294967295
 800591c:	4605      	mov	r5, r0
 800591e:	bb02      	cbnz	r2, 8005962 <_dtoa_r+0xa62>
 8005920:	4601      	mov	r1, r0
 8005922:	ee18 0a10 	vmov	r0, s16
 8005926:	f000 fb75 	bl	8006014 <__mcmp>
 800592a:	4602      	mov	r2, r0
 800592c:	4629      	mov	r1, r5
 800592e:	4620      	mov	r0, r4
 8005930:	9207      	str	r2, [sp, #28]
 8005932:	f000 f92d 	bl	8005b90 <_Bfree>
 8005936:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800593a:	ea43 0102 	orr.w	r1, r3, r2
 800593e:	9b04      	ldr	r3, [sp, #16]
 8005940:	430b      	orrs	r3, r1
 8005942:	464d      	mov	r5, r9
 8005944:	d10f      	bne.n	8005966 <_dtoa_r+0xa66>
 8005946:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800594a:	d02a      	beq.n	80059a2 <_dtoa_r+0xaa2>
 800594c:	9b03      	ldr	r3, [sp, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	dd02      	ble.n	8005958 <_dtoa_r+0xa58>
 8005952:	9b02      	ldr	r3, [sp, #8]
 8005954:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005958:	f88b a000 	strb.w	sl, [fp]
 800595c:	e775      	b.n	800584a <_dtoa_r+0x94a>
 800595e:	4638      	mov	r0, r7
 8005960:	e7ba      	b.n	80058d8 <_dtoa_r+0x9d8>
 8005962:	2201      	movs	r2, #1
 8005964:	e7e2      	b.n	800592c <_dtoa_r+0xa2c>
 8005966:	9b03      	ldr	r3, [sp, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	db04      	blt.n	8005976 <_dtoa_r+0xa76>
 800596c:	9906      	ldr	r1, [sp, #24]
 800596e:	430b      	orrs	r3, r1
 8005970:	9904      	ldr	r1, [sp, #16]
 8005972:	430b      	orrs	r3, r1
 8005974:	d122      	bne.n	80059bc <_dtoa_r+0xabc>
 8005976:	2a00      	cmp	r2, #0
 8005978:	ddee      	ble.n	8005958 <_dtoa_r+0xa58>
 800597a:	ee18 1a10 	vmov	r1, s16
 800597e:	2201      	movs	r2, #1
 8005980:	4620      	mov	r0, r4
 8005982:	f000 fad7 	bl	8005f34 <__lshift>
 8005986:	4631      	mov	r1, r6
 8005988:	ee08 0a10 	vmov	s16, r0
 800598c:	f000 fb42 	bl	8006014 <__mcmp>
 8005990:	2800      	cmp	r0, #0
 8005992:	dc03      	bgt.n	800599c <_dtoa_r+0xa9c>
 8005994:	d1e0      	bne.n	8005958 <_dtoa_r+0xa58>
 8005996:	f01a 0f01 	tst.w	sl, #1
 800599a:	d0dd      	beq.n	8005958 <_dtoa_r+0xa58>
 800599c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80059a0:	d1d7      	bne.n	8005952 <_dtoa_r+0xa52>
 80059a2:	2339      	movs	r3, #57	; 0x39
 80059a4:	f88b 3000 	strb.w	r3, [fp]
 80059a8:	462b      	mov	r3, r5
 80059aa:	461d      	mov	r5, r3
 80059ac:	3b01      	subs	r3, #1
 80059ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80059b2:	2a39      	cmp	r2, #57	; 0x39
 80059b4:	d071      	beq.n	8005a9a <_dtoa_r+0xb9a>
 80059b6:	3201      	adds	r2, #1
 80059b8:	701a      	strb	r2, [r3, #0]
 80059ba:	e746      	b.n	800584a <_dtoa_r+0x94a>
 80059bc:	2a00      	cmp	r2, #0
 80059be:	dd07      	ble.n	80059d0 <_dtoa_r+0xad0>
 80059c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80059c4:	d0ed      	beq.n	80059a2 <_dtoa_r+0xaa2>
 80059c6:	f10a 0301 	add.w	r3, sl, #1
 80059ca:	f88b 3000 	strb.w	r3, [fp]
 80059ce:	e73c      	b.n	800584a <_dtoa_r+0x94a>
 80059d0:	9b05      	ldr	r3, [sp, #20]
 80059d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80059d6:	4599      	cmp	r9, r3
 80059d8:	d047      	beq.n	8005a6a <_dtoa_r+0xb6a>
 80059da:	ee18 1a10 	vmov	r1, s16
 80059de:	2300      	movs	r3, #0
 80059e0:	220a      	movs	r2, #10
 80059e2:	4620      	mov	r0, r4
 80059e4:	f000 f8f6 	bl	8005bd4 <__multadd>
 80059e8:	45b8      	cmp	r8, r7
 80059ea:	ee08 0a10 	vmov	s16, r0
 80059ee:	f04f 0300 	mov.w	r3, #0
 80059f2:	f04f 020a 	mov.w	r2, #10
 80059f6:	4641      	mov	r1, r8
 80059f8:	4620      	mov	r0, r4
 80059fa:	d106      	bne.n	8005a0a <_dtoa_r+0xb0a>
 80059fc:	f000 f8ea 	bl	8005bd4 <__multadd>
 8005a00:	4680      	mov	r8, r0
 8005a02:	4607      	mov	r7, r0
 8005a04:	f109 0901 	add.w	r9, r9, #1
 8005a08:	e772      	b.n	80058f0 <_dtoa_r+0x9f0>
 8005a0a:	f000 f8e3 	bl	8005bd4 <__multadd>
 8005a0e:	4639      	mov	r1, r7
 8005a10:	4680      	mov	r8, r0
 8005a12:	2300      	movs	r3, #0
 8005a14:	220a      	movs	r2, #10
 8005a16:	4620      	mov	r0, r4
 8005a18:	f000 f8dc 	bl	8005bd4 <__multadd>
 8005a1c:	4607      	mov	r7, r0
 8005a1e:	e7f1      	b.n	8005a04 <_dtoa_r+0xb04>
 8005a20:	9b03      	ldr	r3, [sp, #12]
 8005a22:	9302      	str	r3, [sp, #8]
 8005a24:	9d01      	ldr	r5, [sp, #4]
 8005a26:	ee18 0a10 	vmov	r0, s16
 8005a2a:	4631      	mov	r1, r6
 8005a2c:	f7ff f9dc 	bl	8004de8 <quorem>
 8005a30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005a34:	9b01      	ldr	r3, [sp, #4]
 8005a36:	f805 ab01 	strb.w	sl, [r5], #1
 8005a3a:	1aea      	subs	r2, r5, r3
 8005a3c:	9b02      	ldr	r3, [sp, #8]
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	dd09      	ble.n	8005a56 <_dtoa_r+0xb56>
 8005a42:	ee18 1a10 	vmov	r1, s16
 8005a46:	2300      	movs	r3, #0
 8005a48:	220a      	movs	r2, #10
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f000 f8c2 	bl	8005bd4 <__multadd>
 8005a50:	ee08 0a10 	vmov	s16, r0
 8005a54:	e7e7      	b.n	8005a26 <_dtoa_r+0xb26>
 8005a56:	9b02      	ldr	r3, [sp, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	bfc8      	it	gt
 8005a5c:	461d      	movgt	r5, r3
 8005a5e:	9b01      	ldr	r3, [sp, #4]
 8005a60:	bfd8      	it	le
 8005a62:	2501      	movle	r5, #1
 8005a64:	441d      	add	r5, r3
 8005a66:	f04f 0800 	mov.w	r8, #0
 8005a6a:	ee18 1a10 	vmov	r1, s16
 8005a6e:	2201      	movs	r2, #1
 8005a70:	4620      	mov	r0, r4
 8005a72:	f000 fa5f 	bl	8005f34 <__lshift>
 8005a76:	4631      	mov	r1, r6
 8005a78:	ee08 0a10 	vmov	s16, r0
 8005a7c:	f000 faca 	bl	8006014 <__mcmp>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	dc91      	bgt.n	80059a8 <_dtoa_r+0xaa8>
 8005a84:	d102      	bne.n	8005a8c <_dtoa_r+0xb8c>
 8005a86:	f01a 0f01 	tst.w	sl, #1
 8005a8a:	d18d      	bne.n	80059a8 <_dtoa_r+0xaa8>
 8005a8c:	462b      	mov	r3, r5
 8005a8e:	461d      	mov	r5, r3
 8005a90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a94:	2a30      	cmp	r2, #48	; 0x30
 8005a96:	d0fa      	beq.n	8005a8e <_dtoa_r+0xb8e>
 8005a98:	e6d7      	b.n	800584a <_dtoa_r+0x94a>
 8005a9a:	9a01      	ldr	r2, [sp, #4]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d184      	bne.n	80059aa <_dtoa_r+0xaaa>
 8005aa0:	9b00      	ldr	r3, [sp, #0]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	2331      	movs	r3, #49	; 0x31
 8005aa8:	7013      	strb	r3, [r2, #0]
 8005aaa:	e6ce      	b.n	800584a <_dtoa_r+0x94a>
 8005aac:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <_dtoa_r+0xbd4>)
 8005aae:	f7ff ba95 	b.w	8004fdc <_dtoa_r+0xdc>
 8005ab2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f47f aa6e 	bne.w	8004f96 <_dtoa_r+0x96>
 8005aba:	4b07      	ldr	r3, [pc, #28]	; (8005ad8 <_dtoa_r+0xbd8>)
 8005abc:	f7ff ba8e 	b.w	8004fdc <_dtoa_r+0xdc>
 8005ac0:	9b02      	ldr	r3, [sp, #8]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	dcae      	bgt.n	8005a24 <_dtoa_r+0xb24>
 8005ac6:	9b06      	ldr	r3, [sp, #24]
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	f73f aea8 	bgt.w	800581e <_dtoa_r+0x91e>
 8005ace:	e7a9      	b.n	8005a24 <_dtoa_r+0xb24>
 8005ad0:	080093c3 	.word	0x080093c3
 8005ad4:	08009320 	.word	0x08009320
 8005ad8:	08009344 	.word	0x08009344

08005adc <_localeconv_r>:
 8005adc:	4800      	ldr	r0, [pc, #0]	; (8005ae0 <_localeconv_r+0x4>)
 8005ade:	4770      	bx	lr
 8005ae0:	20000160 	.word	0x20000160

08005ae4 <malloc>:
 8005ae4:	4b02      	ldr	r3, [pc, #8]	; (8005af0 <malloc+0xc>)
 8005ae6:	4601      	mov	r1, r0
 8005ae8:	6818      	ldr	r0, [r3, #0]
 8005aea:	f000 bc17 	b.w	800631c <_malloc_r>
 8005aee:	bf00      	nop
 8005af0:	2000000c 	.word	0x2000000c

08005af4 <memcpy>:
 8005af4:	440a      	add	r2, r1
 8005af6:	4291      	cmp	r1, r2
 8005af8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005afc:	d100      	bne.n	8005b00 <memcpy+0xc>
 8005afe:	4770      	bx	lr
 8005b00:	b510      	push	{r4, lr}
 8005b02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b0a:	4291      	cmp	r1, r2
 8005b0c:	d1f9      	bne.n	8005b02 <memcpy+0xe>
 8005b0e:	bd10      	pop	{r4, pc}

08005b10 <_Balloc>:
 8005b10:	b570      	push	{r4, r5, r6, lr}
 8005b12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b14:	4604      	mov	r4, r0
 8005b16:	460d      	mov	r5, r1
 8005b18:	b976      	cbnz	r6, 8005b38 <_Balloc+0x28>
 8005b1a:	2010      	movs	r0, #16
 8005b1c:	f7ff ffe2 	bl	8005ae4 <malloc>
 8005b20:	4602      	mov	r2, r0
 8005b22:	6260      	str	r0, [r4, #36]	; 0x24
 8005b24:	b920      	cbnz	r0, 8005b30 <_Balloc+0x20>
 8005b26:	4b18      	ldr	r3, [pc, #96]	; (8005b88 <_Balloc+0x78>)
 8005b28:	4818      	ldr	r0, [pc, #96]	; (8005b8c <_Balloc+0x7c>)
 8005b2a:	2166      	movs	r1, #102	; 0x66
 8005b2c:	f000 fdd6 	bl	80066dc <__assert_func>
 8005b30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b34:	6006      	str	r6, [r0, #0]
 8005b36:	60c6      	str	r6, [r0, #12]
 8005b38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005b3a:	68f3      	ldr	r3, [r6, #12]
 8005b3c:	b183      	cbz	r3, 8005b60 <_Balloc+0x50>
 8005b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b46:	b9b8      	cbnz	r0, 8005b78 <_Balloc+0x68>
 8005b48:	2101      	movs	r1, #1
 8005b4a:	fa01 f605 	lsl.w	r6, r1, r5
 8005b4e:	1d72      	adds	r2, r6, #5
 8005b50:	0092      	lsls	r2, r2, #2
 8005b52:	4620      	mov	r0, r4
 8005b54:	f000 fb60 	bl	8006218 <_calloc_r>
 8005b58:	b160      	cbz	r0, 8005b74 <_Balloc+0x64>
 8005b5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005b5e:	e00e      	b.n	8005b7e <_Balloc+0x6e>
 8005b60:	2221      	movs	r2, #33	; 0x21
 8005b62:	2104      	movs	r1, #4
 8005b64:	4620      	mov	r0, r4
 8005b66:	f000 fb57 	bl	8006218 <_calloc_r>
 8005b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b6c:	60f0      	str	r0, [r6, #12]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e4      	bne.n	8005b3e <_Balloc+0x2e>
 8005b74:	2000      	movs	r0, #0
 8005b76:	bd70      	pop	{r4, r5, r6, pc}
 8005b78:	6802      	ldr	r2, [r0, #0]
 8005b7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b84:	e7f7      	b.n	8005b76 <_Balloc+0x66>
 8005b86:	bf00      	nop
 8005b88:	08009351 	.word	0x08009351
 8005b8c:	080093d4 	.word	0x080093d4

08005b90 <_Bfree>:
 8005b90:	b570      	push	{r4, r5, r6, lr}
 8005b92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b94:	4605      	mov	r5, r0
 8005b96:	460c      	mov	r4, r1
 8005b98:	b976      	cbnz	r6, 8005bb8 <_Bfree+0x28>
 8005b9a:	2010      	movs	r0, #16
 8005b9c:	f7ff ffa2 	bl	8005ae4 <malloc>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	6268      	str	r0, [r5, #36]	; 0x24
 8005ba4:	b920      	cbnz	r0, 8005bb0 <_Bfree+0x20>
 8005ba6:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <_Bfree+0x3c>)
 8005ba8:	4809      	ldr	r0, [pc, #36]	; (8005bd0 <_Bfree+0x40>)
 8005baa:	218a      	movs	r1, #138	; 0x8a
 8005bac:	f000 fd96 	bl	80066dc <__assert_func>
 8005bb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005bb4:	6006      	str	r6, [r0, #0]
 8005bb6:	60c6      	str	r6, [r0, #12]
 8005bb8:	b13c      	cbz	r4, 8005bca <_Bfree+0x3a>
 8005bba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005bbc:	6862      	ldr	r2, [r4, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bc4:	6021      	str	r1, [r4, #0]
 8005bc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005bca:	bd70      	pop	{r4, r5, r6, pc}
 8005bcc:	08009351 	.word	0x08009351
 8005bd0:	080093d4 	.word	0x080093d4

08005bd4 <__multadd>:
 8005bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd8:	690d      	ldr	r5, [r1, #16]
 8005bda:	4607      	mov	r7, r0
 8005bdc:	460c      	mov	r4, r1
 8005bde:	461e      	mov	r6, r3
 8005be0:	f101 0c14 	add.w	ip, r1, #20
 8005be4:	2000      	movs	r0, #0
 8005be6:	f8dc 3000 	ldr.w	r3, [ip]
 8005bea:	b299      	uxth	r1, r3
 8005bec:	fb02 6101 	mla	r1, r2, r1, r6
 8005bf0:	0c1e      	lsrs	r6, r3, #16
 8005bf2:	0c0b      	lsrs	r3, r1, #16
 8005bf4:	fb02 3306 	mla	r3, r2, r6, r3
 8005bf8:	b289      	uxth	r1, r1
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005c00:	4285      	cmp	r5, r0
 8005c02:	f84c 1b04 	str.w	r1, [ip], #4
 8005c06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005c0a:	dcec      	bgt.n	8005be6 <__multadd+0x12>
 8005c0c:	b30e      	cbz	r6, 8005c52 <__multadd+0x7e>
 8005c0e:	68a3      	ldr	r3, [r4, #8]
 8005c10:	42ab      	cmp	r3, r5
 8005c12:	dc19      	bgt.n	8005c48 <__multadd+0x74>
 8005c14:	6861      	ldr	r1, [r4, #4]
 8005c16:	4638      	mov	r0, r7
 8005c18:	3101      	adds	r1, #1
 8005c1a:	f7ff ff79 	bl	8005b10 <_Balloc>
 8005c1e:	4680      	mov	r8, r0
 8005c20:	b928      	cbnz	r0, 8005c2e <__multadd+0x5a>
 8005c22:	4602      	mov	r2, r0
 8005c24:	4b0c      	ldr	r3, [pc, #48]	; (8005c58 <__multadd+0x84>)
 8005c26:	480d      	ldr	r0, [pc, #52]	; (8005c5c <__multadd+0x88>)
 8005c28:	21b5      	movs	r1, #181	; 0xb5
 8005c2a:	f000 fd57 	bl	80066dc <__assert_func>
 8005c2e:	6922      	ldr	r2, [r4, #16]
 8005c30:	3202      	adds	r2, #2
 8005c32:	f104 010c 	add.w	r1, r4, #12
 8005c36:	0092      	lsls	r2, r2, #2
 8005c38:	300c      	adds	r0, #12
 8005c3a:	f7ff ff5b 	bl	8005af4 <memcpy>
 8005c3e:	4621      	mov	r1, r4
 8005c40:	4638      	mov	r0, r7
 8005c42:	f7ff ffa5 	bl	8005b90 <_Bfree>
 8005c46:	4644      	mov	r4, r8
 8005c48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005c4c:	3501      	adds	r5, #1
 8005c4e:	615e      	str	r6, [r3, #20]
 8005c50:	6125      	str	r5, [r4, #16]
 8005c52:	4620      	mov	r0, r4
 8005c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c58:	080093c3 	.word	0x080093c3
 8005c5c:	080093d4 	.word	0x080093d4

08005c60 <__hi0bits>:
 8005c60:	0c03      	lsrs	r3, r0, #16
 8005c62:	041b      	lsls	r3, r3, #16
 8005c64:	b9d3      	cbnz	r3, 8005c9c <__hi0bits+0x3c>
 8005c66:	0400      	lsls	r0, r0, #16
 8005c68:	2310      	movs	r3, #16
 8005c6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005c6e:	bf04      	itt	eq
 8005c70:	0200      	lsleq	r0, r0, #8
 8005c72:	3308      	addeq	r3, #8
 8005c74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005c78:	bf04      	itt	eq
 8005c7a:	0100      	lsleq	r0, r0, #4
 8005c7c:	3304      	addeq	r3, #4
 8005c7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005c82:	bf04      	itt	eq
 8005c84:	0080      	lsleq	r0, r0, #2
 8005c86:	3302      	addeq	r3, #2
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	db05      	blt.n	8005c98 <__hi0bits+0x38>
 8005c8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005c90:	f103 0301 	add.w	r3, r3, #1
 8005c94:	bf08      	it	eq
 8005c96:	2320      	moveq	r3, #32
 8005c98:	4618      	mov	r0, r3
 8005c9a:	4770      	bx	lr
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	e7e4      	b.n	8005c6a <__hi0bits+0xa>

08005ca0 <__lo0bits>:
 8005ca0:	6803      	ldr	r3, [r0, #0]
 8005ca2:	f013 0207 	ands.w	r2, r3, #7
 8005ca6:	4601      	mov	r1, r0
 8005ca8:	d00b      	beq.n	8005cc2 <__lo0bits+0x22>
 8005caa:	07da      	lsls	r2, r3, #31
 8005cac:	d423      	bmi.n	8005cf6 <__lo0bits+0x56>
 8005cae:	0798      	lsls	r0, r3, #30
 8005cb0:	bf49      	itett	mi
 8005cb2:	085b      	lsrmi	r3, r3, #1
 8005cb4:	089b      	lsrpl	r3, r3, #2
 8005cb6:	2001      	movmi	r0, #1
 8005cb8:	600b      	strmi	r3, [r1, #0]
 8005cba:	bf5c      	itt	pl
 8005cbc:	600b      	strpl	r3, [r1, #0]
 8005cbe:	2002      	movpl	r0, #2
 8005cc0:	4770      	bx	lr
 8005cc2:	b298      	uxth	r0, r3
 8005cc4:	b9a8      	cbnz	r0, 8005cf2 <__lo0bits+0x52>
 8005cc6:	0c1b      	lsrs	r3, r3, #16
 8005cc8:	2010      	movs	r0, #16
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	b90a      	cbnz	r2, 8005cd2 <__lo0bits+0x32>
 8005cce:	3008      	adds	r0, #8
 8005cd0:	0a1b      	lsrs	r3, r3, #8
 8005cd2:	071a      	lsls	r2, r3, #28
 8005cd4:	bf04      	itt	eq
 8005cd6:	091b      	lsreq	r3, r3, #4
 8005cd8:	3004      	addeq	r0, #4
 8005cda:	079a      	lsls	r2, r3, #30
 8005cdc:	bf04      	itt	eq
 8005cde:	089b      	lsreq	r3, r3, #2
 8005ce0:	3002      	addeq	r0, #2
 8005ce2:	07da      	lsls	r2, r3, #31
 8005ce4:	d403      	bmi.n	8005cee <__lo0bits+0x4e>
 8005ce6:	085b      	lsrs	r3, r3, #1
 8005ce8:	f100 0001 	add.w	r0, r0, #1
 8005cec:	d005      	beq.n	8005cfa <__lo0bits+0x5a>
 8005cee:	600b      	str	r3, [r1, #0]
 8005cf0:	4770      	bx	lr
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	e7e9      	b.n	8005cca <__lo0bits+0x2a>
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	4770      	bx	lr
 8005cfa:	2020      	movs	r0, #32
 8005cfc:	4770      	bx	lr
	...

08005d00 <__i2b>:
 8005d00:	b510      	push	{r4, lr}
 8005d02:	460c      	mov	r4, r1
 8005d04:	2101      	movs	r1, #1
 8005d06:	f7ff ff03 	bl	8005b10 <_Balloc>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	b928      	cbnz	r0, 8005d1a <__i2b+0x1a>
 8005d0e:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <__i2b+0x24>)
 8005d10:	4805      	ldr	r0, [pc, #20]	; (8005d28 <__i2b+0x28>)
 8005d12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005d16:	f000 fce1 	bl	80066dc <__assert_func>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	6144      	str	r4, [r0, #20]
 8005d1e:	6103      	str	r3, [r0, #16]
 8005d20:	bd10      	pop	{r4, pc}
 8005d22:	bf00      	nop
 8005d24:	080093c3 	.word	0x080093c3
 8005d28:	080093d4 	.word	0x080093d4

08005d2c <__multiply>:
 8005d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d30:	4691      	mov	r9, r2
 8005d32:	690a      	ldr	r2, [r1, #16]
 8005d34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	bfb8      	it	lt
 8005d3c:	460b      	movlt	r3, r1
 8005d3e:	460c      	mov	r4, r1
 8005d40:	bfbc      	itt	lt
 8005d42:	464c      	movlt	r4, r9
 8005d44:	4699      	movlt	r9, r3
 8005d46:	6927      	ldr	r7, [r4, #16]
 8005d48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005d4c:	68a3      	ldr	r3, [r4, #8]
 8005d4e:	6861      	ldr	r1, [r4, #4]
 8005d50:	eb07 060a 	add.w	r6, r7, sl
 8005d54:	42b3      	cmp	r3, r6
 8005d56:	b085      	sub	sp, #20
 8005d58:	bfb8      	it	lt
 8005d5a:	3101      	addlt	r1, #1
 8005d5c:	f7ff fed8 	bl	8005b10 <_Balloc>
 8005d60:	b930      	cbnz	r0, 8005d70 <__multiply+0x44>
 8005d62:	4602      	mov	r2, r0
 8005d64:	4b44      	ldr	r3, [pc, #272]	; (8005e78 <__multiply+0x14c>)
 8005d66:	4845      	ldr	r0, [pc, #276]	; (8005e7c <__multiply+0x150>)
 8005d68:	f240 115d 	movw	r1, #349	; 0x15d
 8005d6c:	f000 fcb6 	bl	80066dc <__assert_func>
 8005d70:	f100 0514 	add.w	r5, r0, #20
 8005d74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005d78:	462b      	mov	r3, r5
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	4543      	cmp	r3, r8
 8005d7e:	d321      	bcc.n	8005dc4 <__multiply+0x98>
 8005d80:	f104 0314 	add.w	r3, r4, #20
 8005d84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005d88:	f109 0314 	add.w	r3, r9, #20
 8005d8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005d90:	9202      	str	r2, [sp, #8]
 8005d92:	1b3a      	subs	r2, r7, r4
 8005d94:	3a15      	subs	r2, #21
 8005d96:	f022 0203 	bic.w	r2, r2, #3
 8005d9a:	3204      	adds	r2, #4
 8005d9c:	f104 0115 	add.w	r1, r4, #21
 8005da0:	428f      	cmp	r7, r1
 8005da2:	bf38      	it	cc
 8005da4:	2204      	movcc	r2, #4
 8005da6:	9201      	str	r2, [sp, #4]
 8005da8:	9a02      	ldr	r2, [sp, #8]
 8005daa:	9303      	str	r3, [sp, #12]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d80c      	bhi.n	8005dca <__multiply+0x9e>
 8005db0:	2e00      	cmp	r6, #0
 8005db2:	dd03      	ble.n	8005dbc <__multiply+0x90>
 8005db4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d05a      	beq.n	8005e72 <__multiply+0x146>
 8005dbc:	6106      	str	r6, [r0, #16]
 8005dbe:	b005      	add	sp, #20
 8005dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc4:	f843 2b04 	str.w	r2, [r3], #4
 8005dc8:	e7d8      	b.n	8005d7c <__multiply+0x50>
 8005dca:	f8b3 a000 	ldrh.w	sl, [r3]
 8005dce:	f1ba 0f00 	cmp.w	sl, #0
 8005dd2:	d024      	beq.n	8005e1e <__multiply+0xf2>
 8005dd4:	f104 0e14 	add.w	lr, r4, #20
 8005dd8:	46a9      	mov	r9, r5
 8005dda:	f04f 0c00 	mov.w	ip, #0
 8005dde:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005de2:	f8d9 1000 	ldr.w	r1, [r9]
 8005de6:	fa1f fb82 	uxth.w	fp, r2
 8005dea:	b289      	uxth	r1, r1
 8005dec:	fb0a 110b 	mla	r1, sl, fp, r1
 8005df0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005df4:	f8d9 2000 	ldr.w	r2, [r9]
 8005df8:	4461      	add	r1, ip
 8005dfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005dfe:	fb0a c20b 	mla	r2, sl, fp, ip
 8005e02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005e06:	b289      	uxth	r1, r1
 8005e08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005e0c:	4577      	cmp	r7, lr
 8005e0e:	f849 1b04 	str.w	r1, [r9], #4
 8005e12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005e16:	d8e2      	bhi.n	8005dde <__multiply+0xb2>
 8005e18:	9a01      	ldr	r2, [sp, #4]
 8005e1a:	f845 c002 	str.w	ip, [r5, r2]
 8005e1e:	9a03      	ldr	r2, [sp, #12]
 8005e20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005e24:	3304      	adds	r3, #4
 8005e26:	f1b9 0f00 	cmp.w	r9, #0
 8005e2a:	d020      	beq.n	8005e6e <__multiply+0x142>
 8005e2c:	6829      	ldr	r1, [r5, #0]
 8005e2e:	f104 0c14 	add.w	ip, r4, #20
 8005e32:	46ae      	mov	lr, r5
 8005e34:	f04f 0a00 	mov.w	sl, #0
 8005e38:	f8bc b000 	ldrh.w	fp, [ip]
 8005e3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005e40:	fb09 220b 	mla	r2, r9, fp, r2
 8005e44:	4492      	add	sl, r2
 8005e46:	b289      	uxth	r1, r1
 8005e48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005e4c:	f84e 1b04 	str.w	r1, [lr], #4
 8005e50:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005e54:	f8be 1000 	ldrh.w	r1, [lr]
 8005e58:	0c12      	lsrs	r2, r2, #16
 8005e5a:	fb09 1102 	mla	r1, r9, r2, r1
 8005e5e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005e62:	4567      	cmp	r7, ip
 8005e64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005e68:	d8e6      	bhi.n	8005e38 <__multiply+0x10c>
 8005e6a:	9a01      	ldr	r2, [sp, #4]
 8005e6c:	50a9      	str	r1, [r5, r2]
 8005e6e:	3504      	adds	r5, #4
 8005e70:	e79a      	b.n	8005da8 <__multiply+0x7c>
 8005e72:	3e01      	subs	r6, #1
 8005e74:	e79c      	b.n	8005db0 <__multiply+0x84>
 8005e76:	bf00      	nop
 8005e78:	080093c3 	.word	0x080093c3
 8005e7c:	080093d4 	.word	0x080093d4

08005e80 <__pow5mult>:
 8005e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e84:	4615      	mov	r5, r2
 8005e86:	f012 0203 	ands.w	r2, r2, #3
 8005e8a:	4606      	mov	r6, r0
 8005e8c:	460f      	mov	r7, r1
 8005e8e:	d007      	beq.n	8005ea0 <__pow5mult+0x20>
 8005e90:	4c25      	ldr	r4, [pc, #148]	; (8005f28 <__pow5mult+0xa8>)
 8005e92:	3a01      	subs	r2, #1
 8005e94:	2300      	movs	r3, #0
 8005e96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e9a:	f7ff fe9b 	bl	8005bd4 <__multadd>
 8005e9e:	4607      	mov	r7, r0
 8005ea0:	10ad      	asrs	r5, r5, #2
 8005ea2:	d03d      	beq.n	8005f20 <__pow5mult+0xa0>
 8005ea4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005ea6:	b97c      	cbnz	r4, 8005ec8 <__pow5mult+0x48>
 8005ea8:	2010      	movs	r0, #16
 8005eaa:	f7ff fe1b 	bl	8005ae4 <malloc>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	6270      	str	r0, [r6, #36]	; 0x24
 8005eb2:	b928      	cbnz	r0, 8005ec0 <__pow5mult+0x40>
 8005eb4:	4b1d      	ldr	r3, [pc, #116]	; (8005f2c <__pow5mult+0xac>)
 8005eb6:	481e      	ldr	r0, [pc, #120]	; (8005f30 <__pow5mult+0xb0>)
 8005eb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005ebc:	f000 fc0e 	bl	80066dc <__assert_func>
 8005ec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ec4:	6004      	str	r4, [r0, #0]
 8005ec6:	60c4      	str	r4, [r0, #12]
 8005ec8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005ecc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ed0:	b94c      	cbnz	r4, 8005ee6 <__pow5mult+0x66>
 8005ed2:	f240 2171 	movw	r1, #625	; 0x271
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	f7ff ff12 	bl	8005d00 <__i2b>
 8005edc:	2300      	movs	r3, #0
 8005ede:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	6003      	str	r3, [r0, #0]
 8005ee6:	f04f 0900 	mov.w	r9, #0
 8005eea:	07eb      	lsls	r3, r5, #31
 8005eec:	d50a      	bpl.n	8005f04 <__pow5mult+0x84>
 8005eee:	4639      	mov	r1, r7
 8005ef0:	4622      	mov	r2, r4
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	f7ff ff1a 	bl	8005d2c <__multiply>
 8005ef8:	4639      	mov	r1, r7
 8005efa:	4680      	mov	r8, r0
 8005efc:	4630      	mov	r0, r6
 8005efe:	f7ff fe47 	bl	8005b90 <_Bfree>
 8005f02:	4647      	mov	r7, r8
 8005f04:	106d      	asrs	r5, r5, #1
 8005f06:	d00b      	beq.n	8005f20 <__pow5mult+0xa0>
 8005f08:	6820      	ldr	r0, [r4, #0]
 8005f0a:	b938      	cbnz	r0, 8005f1c <__pow5mult+0x9c>
 8005f0c:	4622      	mov	r2, r4
 8005f0e:	4621      	mov	r1, r4
 8005f10:	4630      	mov	r0, r6
 8005f12:	f7ff ff0b 	bl	8005d2c <__multiply>
 8005f16:	6020      	str	r0, [r4, #0]
 8005f18:	f8c0 9000 	str.w	r9, [r0]
 8005f1c:	4604      	mov	r4, r0
 8005f1e:	e7e4      	b.n	8005eea <__pow5mult+0x6a>
 8005f20:	4638      	mov	r0, r7
 8005f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f26:	bf00      	nop
 8005f28:	08009520 	.word	0x08009520
 8005f2c:	08009351 	.word	0x08009351
 8005f30:	080093d4 	.word	0x080093d4

08005f34 <__lshift>:
 8005f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f38:	460c      	mov	r4, r1
 8005f3a:	6849      	ldr	r1, [r1, #4]
 8005f3c:	6923      	ldr	r3, [r4, #16]
 8005f3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f42:	68a3      	ldr	r3, [r4, #8]
 8005f44:	4607      	mov	r7, r0
 8005f46:	4691      	mov	r9, r2
 8005f48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f4c:	f108 0601 	add.w	r6, r8, #1
 8005f50:	42b3      	cmp	r3, r6
 8005f52:	db0b      	blt.n	8005f6c <__lshift+0x38>
 8005f54:	4638      	mov	r0, r7
 8005f56:	f7ff fddb 	bl	8005b10 <_Balloc>
 8005f5a:	4605      	mov	r5, r0
 8005f5c:	b948      	cbnz	r0, 8005f72 <__lshift+0x3e>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	4b2a      	ldr	r3, [pc, #168]	; (800600c <__lshift+0xd8>)
 8005f62:	482b      	ldr	r0, [pc, #172]	; (8006010 <__lshift+0xdc>)
 8005f64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005f68:	f000 fbb8 	bl	80066dc <__assert_func>
 8005f6c:	3101      	adds	r1, #1
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	e7ee      	b.n	8005f50 <__lshift+0x1c>
 8005f72:	2300      	movs	r3, #0
 8005f74:	f100 0114 	add.w	r1, r0, #20
 8005f78:	f100 0210 	add.w	r2, r0, #16
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	4553      	cmp	r3, sl
 8005f80:	db37      	blt.n	8005ff2 <__lshift+0xbe>
 8005f82:	6920      	ldr	r0, [r4, #16]
 8005f84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f88:	f104 0314 	add.w	r3, r4, #20
 8005f8c:	f019 091f 	ands.w	r9, r9, #31
 8005f90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005f98:	d02f      	beq.n	8005ffa <__lshift+0xc6>
 8005f9a:	f1c9 0e20 	rsb	lr, r9, #32
 8005f9e:	468a      	mov	sl, r1
 8005fa0:	f04f 0c00 	mov.w	ip, #0
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	fa02 f209 	lsl.w	r2, r2, r9
 8005faa:	ea42 020c 	orr.w	r2, r2, ip
 8005fae:	f84a 2b04 	str.w	r2, [sl], #4
 8005fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fb6:	4298      	cmp	r0, r3
 8005fb8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005fbc:	d8f2      	bhi.n	8005fa4 <__lshift+0x70>
 8005fbe:	1b03      	subs	r3, r0, r4
 8005fc0:	3b15      	subs	r3, #21
 8005fc2:	f023 0303 	bic.w	r3, r3, #3
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	f104 0215 	add.w	r2, r4, #21
 8005fcc:	4290      	cmp	r0, r2
 8005fce:	bf38      	it	cc
 8005fd0:	2304      	movcc	r3, #4
 8005fd2:	f841 c003 	str.w	ip, [r1, r3]
 8005fd6:	f1bc 0f00 	cmp.w	ip, #0
 8005fda:	d001      	beq.n	8005fe0 <__lshift+0xac>
 8005fdc:	f108 0602 	add.w	r6, r8, #2
 8005fe0:	3e01      	subs	r6, #1
 8005fe2:	4638      	mov	r0, r7
 8005fe4:	612e      	str	r6, [r5, #16]
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	f7ff fdd2 	bl	8005b90 <_Bfree>
 8005fec:	4628      	mov	r0, r5
 8005fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	e7c1      	b.n	8005f7e <__lshift+0x4a>
 8005ffa:	3904      	subs	r1, #4
 8005ffc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006000:	f841 2f04 	str.w	r2, [r1, #4]!
 8006004:	4298      	cmp	r0, r3
 8006006:	d8f9      	bhi.n	8005ffc <__lshift+0xc8>
 8006008:	e7ea      	b.n	8005fe0 <__lshift+0xac>
 800600a:	bf00      	nop
 800600c:	080093c3 	.word	0x080093c3
 8006010:	080093d4 	.word	0x080093d4

08006014 <__mcmp>:
 8006014:	b530      	push	{r4, r5, lr}
 8006016:	6902      	ldr	r2, [r0, #16]
 8006018:	690c      	ldr	r4, [r1, #16]
 800601a:	1b12      	subs	r2, r2, r4
 800601c:	d10e      	bne.n	800603c <__mcmp+0x28>
 800601e:	f100 0314 	add.w	r3, r0, #20
 8006022:	3114      	adds	r1, #20
 8006024:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006028:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800602c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006030:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006034:	42a5      	cmp	r5, r4
 8006036:	d003      	beq.n	8006040 <__mcmp+0x2c>
 8006038:	d305      	bcc.n	8006046 <__mcmp+0x32>
 800603a:	2201      	movs	r2, #1
 800603c:	4610      	mov	r0, r2
 800603e:	bd30      	pop	{r4, r5, pc}
 8006040:	4283      	cmp	r3, r0
 8006042:	d3f3      	bcc.n	800602c <__mcmp+0x18>
 8006044:	e7fa      	b.n	800603c <__mcmp+0x28>
 8006046:	f04f 32ff 	mov.w	r2, #4294967295
 800604a:	e7f7      	b.n	800603c <__mcmp+0x28>

0800604c <__mdiff>:
 800604c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006050:	460c      	mov	r4, r1
 8006052:	4606      	mov	r6, r0
 8006054:	4611      	mov	r1, r2
 8006056:	4620      	mov	r0, r4
 8006058:	4690      	mov	r8, r2
 800605a:	f7ff ffdb 	bl	8006014 <__mcmp>
 800605e:	1e05      	subs	r5, r0, #0
 8006060:	d110      	bne.n	8006084 <__mdiff+0x38>
 8006062:	4629      	mov	r1, r5
 8006064:	4630      	mov	r0, r6
 8006066:	f7ff fd53 	bl	8005b10 <_Balloc>
 800606a:	b930      	cbnz	r0, 800607a <__mdiff+0x2e>
 800606c:	4b3a      	ldr	r3, [pc, #232]	; (8006158 <__mdiff+0x10c>)
 800606e:	4602      	mov	r2, r0
 8006070:	f240 2132 	movw	r1, #562	; 0x232
 8006074:	4839      	ldr	r0, [pc, #228]	; (800615c <__mdiff+0x110>)
 8006076:	f000 fb31 	bl	80066dc <__assert_func>
 800607a:	2301      	movs	r3, #1
 800607c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006080:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006084:	bfa4      	itt	ge
 8006086:	4643      	movge	r3, r8
 8006088:	46a0      	movge	r8, r4
 800608a:	4630      	mov	r0, r6
 800608c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006090:	bfa6      	itte	ge
 8006092:	461c      	movge	r4, r3
 8006094:	2500      	movge	r5, #0
 8006096:	2501      	movlt	r5, #1
 8006098:	f7ff fd3a 	bl	8005b10 <_Balloc>
 800609c:	b920      	cbnz	r0, 80060a8 <__mdiff+0x5c>
 800609e:	4b2e      	ldr	r3, [pc, #184]	; (8006158 <__mdiff+0x10c>)
 80060a0:	4602      	mov	r2, r0
 80060a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80060a6:	e7e5      	b.n	8006074 <__mdiff+0x28>
 80060a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80060ac:	6926      	ldr	r6, [r4, #16]
 80060ae:	60c5      	str	r5, [r0, #12]
 80060b0:	f104 0914 	add.w	r9, r4, #20
 80060b4:	f108 0514 	add.w	r5, r8, #20
 80060b8:	f100 0e14 	add.w	lr, r0, #20
 80060bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80060c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80060c4:	f108 0210 	add.w	r2, r8, #16
 80060c8:	46f2      	mov	sl, lr
 80060ca:	2100      	movs	r1, #0
 80060cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80060d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80060d4:	fa1f f883 	uxth.w	r8, r3
 80060d8:	fa11 f18b 	uxtah	r1, r1, fp
 80060dc:	0c1b      	lsrs	r3, r3, #16
 80060de:	eba1 0808 	sub.w	r8, r1, r8
 80060e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80060e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80060ea:	fa1f f888 	uxth.w	r8, r8
 80060ee:	1419      	asrs	r1, r3, #16
 80060f0:	454e      	cmp	r6, r9
 80060f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80060f6:	f84a 3b04 	str.w	r3, [sl], #4
 80060fa:	d8e7      	bhi.n	80060cc <__mdiff+0x80>
 80060fc:	1b33      	subs	r3, r6, r4
 80060fe:	3b15      	subs	r3, #21
 8006100:	f023 0303 	bic.w	r3, r3, #3
 8006104:	3304      	adds	r3, #4
 8006106:	3415      	adds	r4, #21
 8006108:	42a6      	cmp	r6, r4
 800610a:	bf38      	it	cc
 800610c:	2304      	movcc	r3, #4
 800610e:	441d      	add	r5, r3
 8006110:	4473      	add	r3, lr
 8006112:	469e      	mov	lr, r3
 8006114:	462e      	mov	r6, r5
 8006116:	4566      	cmp	r6, ip
 8006118:	d30e      	bcc.n	8006138 <__mdiff+0xec>
 800611a:	f10c 0203 	add.w	r2, ip, #3
 800611e:	1b52      	subs	r2, r2, r5
 8006120:	f022 0203 	bic.w	r2, r2, #3
 8006124:	3d03      	subs	r5, #3
 8006126:	45ac      	cmp	ip, r5
 8006128:	bf38      	it	cc
 800612a:	2200      	movcc	r2, #0
 800612c:	441a      	add	r2, r3
 800612e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006132:	b17b      	cbz	r3, 8006154 <__mdiff+0x108>
 8006134:	6107      	str	r7, [r0, #16]
 8006136:	e7a3      	b.n	8006080 <__mdiff+0x34>
 8006138:	f856 8b04 	ldr.w	r8, [r6], #4
 800613c:	fa11 f288 	uxtah	r2, r1, r8
 8006140:	1414      	asrs	r4, r2, #16
 8006142:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006146:	b292      	uxth	r2, r2
 8006148:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800614c:	f84e 2b04 	str.w	r2, [lr], #4
 8006150:	1421      	asrs	r1, r4, #16
 8006152:	e7e0      	b.n	8006116 <__mdiff+0xca>
 8006154:	3f01      	subs	r7, #1
 8006156:	e7ea      	b.n	800612e <__mdiff+0xe2>
 8006158:	080093c3 	.word	0x080093c3
 800615c:	080093d4 	.word	0x080093d4

08006160 <__d2b>:
 8006160:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006164:	4689      	mov	r9, r1
 8006166:	2101      	movs	r1, #1
 8006168:	ec57 6b10 	vmov	r6, r7, d0
 800616c:	4690      	mov	r8, r2
 800616e:	f7ff fccf 	bl	8005b10 <_Balloc>
 8006172:	4604      	mov	r4, r0
 8006174:	b930      	cbnz	r0, 8006184 <__d2b+0x24>
 8006176:	4602      	mov	r2, r0
 8006178:	4b25      	ldr	r3, [pc, #148]	; (8006210 <__d2b+0xb0>)
 800617a:	4826      	ldr	r0, [pc, #152]	; (8006214 <__d2b+0xb4>)
 800617c:	f240 310a 	movw	r1, #778	; 0x30a
 8006180:	f000 faac 	bl	80066dc <__assert_func>
 8006184:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006188:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800618c:	bb35      	cbnz	r5, 80061dc <__d2b+0x7c>
 800618e:	2e00      	cmp	r6, #0
 8006190:	9301      	str	r3, [sp, #4]
 8006192:	d028      	beq.n	80061e6 <__d2b+0x86>
 8006194:	4668      	mov	r0, sp
 8006196:	9600      	str	r6, [sp, #0]
 8006198:	f7ff fd82 	bl	8005ca0 <__lo0bits>
 800619c:	9900      	ldr	r1, [sp, #0]
 800619e:	b300      	cbz	r0, 80061e2 <__d2b+0x82>
 80061a0:	9a01      	ldr	r2, [sp, #4]
 80061a2:	f1c0 0320 	rsb	r3, r0, #32
 80061a6:	fa02 f303 	lsl.w	r3, r2, r3
 80061aa:	430b      	orrs	r3, r1
 80061ac:	40c2      	lsrs	r2, r0
 80061ae:	6163      	str	r3, [r4, #20]
 80061b0:	9201      	str	r2, [sp, #4]
 80061b2:	9b01      	ldr	r3, [sp, #4]
 80061b4:	61a3      	str	r3, [r4, #24]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	bf14      	ite	ne
 80061ba:	2202      	movne	r2, #2
 80061bc:	2201      	moveq	r2, #1
 80061be:	6122      	str	r2, [r4, #16]
 80061c0:	b1d5      	cbz	r5, 80061f8 <__d2b+0x98>
 80061c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80061c6:	4405      	add	r5, r0
 80061c8:	f8c9 5000 	str.w	r5, [r9]
 80061cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80061d0:	f8c8 0000 	str.w	r0, [r8]
 80061d4:	4620      	mov	r0, r4
 80061d6:	b003      	add	sp, #12
 80061d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061e0:	e7d5      	b.n	800618e <__d2b+0x2e>
 80061e2:	6161      	str	r1, [r4, #20]
 80061e4:	e7e5      	b.n	80061b2 <__d2b+0x52>
 80061e6:	a801      	add	r0, sp, #4
 80061e8:	f7ff fd5a 	bl	8005ca0 <__lo0bits>
 80061ec:	9b01      	ldr	r3, [sp, #4]
 80061ee:	6163      	str	r3, [r4, #20]
 80061f0:	2201      	movs	r2, #1
 80061f2:	6122      	str	r2, [r4, #16]
 80061f4:	3020      	adds	r0, #32
 80061f6:	e7e3      	b.n	80061c0 <__d2b+0x60>
 80061f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80061fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006200:	f8c9 0000 	str.w	r0, [r9]
 8006204:	6918      	ldr	r0, [r3, #16]
 8006206:	f7ff fd2b 	bl	8005c60 <__hi0bits>
 800620a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800620e:	e7df      	b.n	80061d0 <__d2b+0x70>
 8006210:	080093c3 	.word	0x080093c3
 8006214:	080093d4 	.word	0x080093d4

08006218 <_calloc_r>:
 8006218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800621a:	fba1 2402 	umull	r2, r4, r1, r2
 800621e:	b94c      	cbnz	r4, 8006234 <_calloc_r+0x1c>
 8006220:	4611      	mov	r1, r2
 8006222:	9201      	str	r2, [sp, #4]
 8006224:	f000 f87a 	bl	800631c <_malloc_r>
 8006228:	9a01      	ldr	r2, [sp, #4]
 800622a:	4605      	mov	r5, r0
 800622c:	b930      	cbnz	r0, 800623c <_calloc_r+0x24>
 800622e:	4628      	mov	r0, r5
 8006230:	b003      	add	sp, #12
 8006232:	bd30      	pop	{r4, r5, pc}
 8006234:	220c      	movs	r2, #12
 8006236:	6002      	str	r2, [r0, #0]
 8006238:	2500      	movs	r5, #0
 800623a:	e7f8      	b.n	800622e <_calloc_r+0x16>
 800623c:	4621      	mov	r1, r4
 800623e:	f7fe f941 	bl	80044c4 <memset>
 8006242:	e7f4      	b.n	800622e <_calloc_r+0x16>

08006244 <_free_r>:
 8006244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006246:	2900      	cmp	r1, #0
 8006248:	d044      	beq.n	80062d4 <_free_r+0x90>
 800624a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800624e:	9001      	str	r0, [sp, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	f1a1 0404 	sub.w	r4, r1, #4
 8006256:	bfb8      	it	lt
 8006258:	18e4      	addlt	r4, r4, r3
 800625a:	f000 fa9b 	bl	8006794 <__malloc_lock>
 800625e:	4a1e      	ldr	r2, [pc, #120]	; (80062d8 <_free_r+0x94>)
 8006260:	9801      	ldr	r0, [sp, #4]
 8006262:	6813      	ldr	r3, [r2, #0]
 8006264:	b933      	cbnz	r3, 8006274 <_free_r+0x30>
 8006266:	6063      	str	r3, [r4, #4]
 8006268:	6014      	str	r4, [r2, #0]
 800626a:	b003      	add	sp, #12
 800626c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006270:	f000 ba96 	b.w	80067a0 <__malloc_unlock>
 8006274:	42a3      	cmp	r3, r4
 8006276:	d908      	bls.n	800628a <_free_r+0x46>
 8006278:	6825      	ldr	r5, [r4, #0]
 800627a:	1961      	adds	r1, r4, r5
 800627c:	428b      	cmp	r3, r1
 800627e:	bf01      	itttt	eq
 8006280:	6819      	ldreq	r1, [r3, #0]
 8006282:	685b      	ldreq	r3, [r3, #4]
 8006284:	1949      	addeq	r1, r1, r5
 8006286:	6021      	streq	r1, [r4, #0]
 8006288:	e7ed      	b.n	8006266 <_free_r+0x22>
 800628a:	461a      	mov	r2, r3
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	b10b      	cbz	r3, 8006294 <_free_r+0x50>
 8006290:	42a3      	cmp	r3, r4
 8006292:	d9fa      	bls.n	800628a <_free_r+0x46>
 8006294:	6811      	ldr	r1, [r2, #0]
 8006296:	1855      	adds	r5, r2, r1
 8006298:	42a5      	cmp	r5, r4
 800629a:	d10b      	bne.n	80062b4 <_free_r+0x70>
 800629c:	6824      	ldr	r4, [r4, #0]
 800629e:	4421      	add	r1, r4
 80062a0:	1854      	adds	r4, r2, r1
 80062a2:	42a3      	cmp	r3, r4
 80062a4:	6011      	str	r1, [r2, #0]
 80062a6:	d1e0      	bne.n	800626a <_free_r+0x26>
 80062a8:	681c      	ldr	r4, [r3, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	6053      	str	r3, [r2, #4]
 80062ae:	4421      	add	r1, r4
 80062b0:	6011      	str	r1, [r2, #0]
 80062b2:	e7da      	b.n	800626a <_free_r+0x26>
 80062b4:	d902      	bls.n	80062bc <_free_r+0x78>
 80062b6:	230c      	movs	r3, #12
 80062b8:	6003      	str	r3, [r0, #0]
 80062ba:	e7d6      	b.n	800626a <_free_r+0x26>
 80062bc:	6825      	ldr	r5, [r4, #0]
 80062be:	1961      	adds	r1, r4, r5
 80062c0:	428b      	cmp	r3, r1
 80062c2:	bf04      	itt	eq
 80062c4:	6819      	ldreq	r1, [r3, #0]
 80062c6:	685b      	ldreq	r3, [r3, #4]
 80062c8:	6063      	str	r3, [r4, #4]
 80062ca:	bf04      	itt	eq
 80062cc:	1949      	addeq	r1, r1, r5
 80062ce:	6021      	streq	r1, [r4, #0]
 80062d0:	6054      	str	r4, [r2, #4]
 80062d2:	e7ca      	b.n	800626a <_free_r+0x26>
 80062d4:	b003      	add	sp, #12
 80062d6:	bd30      	pop	{r4, r5, pc}
 80062d8:	200003b4 	.word	0x200003b4

080062dc <sbrk_aligned>:
 80062dc:	b570      	push	{r4, r5, r6, lr}
 80062de:	4e0e      	ldr	r6, [pc, #56]	; (8006318 <sbrk_aligned+0x3c>)
 80062e0:	460c      	mov	r4, r1
 80062e2:	6831      	ldr	r1, [r6, #0]
 80062e4:	4605      	mov	r5, r0
 80062e6:	b911      	cbnz	r1, 80062ee <sbrk_aligned+0x12>
 80062e8:	f000 f9e8 	bl	80066bc <_sbrk_r>
 80062ec:	6030      	str	r0, [r6, #0]
 80062ee:	4621      	mov	r1, r4
 80062f0:	4628      	mov	r0, r5
 80062f2:	f000 f9e3 	bl	80066bc <_sbrk_r>
 80062f6:	1c43      	adds	r3, r0, #1
 80062f8:	d00a      	beq.n	8006310 <sbrk_aligned+0x34>
 80062fa:	1cc4      	adds	r4, r0, #3
 80062fc:	f024 0403 	bic.w	r4, r4, #3
 8006300:	42a0      	cmp	r0, r4
 8006302:	d007      	beq.n	8006314 <sbrk_aligned+0x38>
 8006304:	1a21      	subs	r1, r4, r0
 8006306:	4628      	mov	r0, r5
 8006308:	f000 f9d8 	bl	80066bc <_sbrk_r>
 800630c:	3001      	adds	r0, #1
 800630e:	d101      	bne.n	8006314 <sbrk_aligned+0x38>
 8006310:	f04f 34ff 	mov.w	r4, #4294967295
 8006314:	4620      	mov	r0, r4
 8006316:	bd70      	pop	{r4, r5, r6, pc}
 8006318:	200003b8 	.word	0x200003b8

0800631c <_malloc_r>:
 800631c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006320:	1ccd      	adds	r5, r1, #3
 8006322:	f025 0503 	bic.w	r5, r5, #3
 8006326:	3508      	adds	r5, #8
 8006328:	2d0c      	cmp	r5, #12
 800632a:	bf38      	it	cc
 800632c:	250c      	movcc	r5, #12
 800632e:	2d00      	cmp	r5, #0
 8006330:	4607      	mov	r7, r0
 8006332:	db01      	blt.n	8006338 <_malloc_r+0x1c>
 8006334:	42a9      	cmp	r1, r5
 8006336:	d905      	bls.n	8006344 <_malloc_r+0x28>
 8006338:	230c      	movs	r3, #12
 800633a:	603b      	str	r3, [r7, #0]
 800633c:	2600      	movs	r6, #0
 800633e:	4630      	mov	r0, r6
 8006340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006344:	4e2e      	ldr	r6, [pc, #184]	; (8006400 <_malloc_r+0xe4>)
 8006346:	f000 fa25 	bl	8006794 <__malloc_lock>
 800634a:	6833      	ldr	r3, [r6, #0]
 800634c:	461c      	mov	r4, r3
 800634e:	bb34      	cbnz	r4, 800639e <_malloc_r+0x82>
 8006350:	4629      	mov	r1, r5
 8006352:	4638      	mov	r0, r7
 8006354:	f7ff ffc2 	bl	80062dc <sbrk_aligned>
 8006358:	1c43      	adds	r3, r0, #1
 800635a:	4604      	mov	r4, r0
 800635c:	d14d      	bne.n	80063fa <_malloc_r+0xde>
 800635e:	6834      	ldr	r4, [r6, #0]
 8006360:	4626      	mov	r6, r4
 8006362:	2e00      	cmp	r6, #0
 8006364:	d140      	bne.n	80063e8 <_malloc_r+0xcc>
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	4631      	mov	r1, r6
 800636a:	4638      	mov	r0, r7
 800636c:	eb04 0803 	add.w	r8, r4, r3
 8006370:	f000 f9a4 	bl	80066bc <_sbrk_r>
 8006374:	4580      	cmp	r8, r0
 8006376:	d13a      	bne.n	80063ee <_malloc_r+0xd2>
 8006378:	6821      	ldr	r1, [r4, #0]
 800637a:	3503      	adds	r5, #3
 800637c:	1a6d      	subs	r5, r5, r1
 800637e:	f025 0503 	bic.w	r5, r5, #3
 8006382:	3508      	adds	r5, #8
 8006384:	2d0c      	cmp	r5, #12
 8006386:	bf38      	it	cc
 8006388:	250c      	movcc	r5, #12
 800638a:	4629      	mov	r1, r5
 800638c:	4638      	mov	r0, r7
 800638e:	f7ff ffa5 	bl	80062dc <sbrk_aligned>
 8006392:	3001      	adds	r0, #1
 8006394:	d02b      	beq.n	80063ee <_malloc_r+0xd2>
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	442b      	add	r3, r5
 800639a:	6023      	str	r3, [r4, #0]
 800639c:	e00e      	b.n	80063bc <_malloc_r+0xa0>
 800639e:	6822      	ldr	r2, [r4, #0]
 80063a0:	1b52      	subs	r2, r2, r5
 80063a2:	d41e      	bmi.n	80063e2 <_malloc_r+0xc6>
 80063a4:	2a0b      	cmp	r2, #11
 80063a6:	d916      	bls.n	80063d6 <_malloc_r+0xba>
 80063a8:	1961      	adds	r1, r4, r5
 80063aa:	42a3      	cmp	r3, r4
 80063ac:	6025      	str	r5, [r4, #0]
 80063ae:	bf18      	it	ne
 80063b0:	6059      	strne	r1, [r3, #4]
 80063b2:	6863      	ldr	r3, [r4, #4]
 80063b4:	bf08      	it	eq
 80063b6:	6031      	streq	r1, [r6, #0]
 80063b8:	5162      	str	r2, [r4, r5]
 80063ba:	604b      	str	r3, [r1, #4]
 80063bc:	4638      	mov	r0, r7
 80063be:	f104 060b 	add.w	r6, r4, #11
 80063c2:	f000 f9ed 	bl	80067a0 <__malloc_unlock>
 80063c6:	f026 0607 	bic.w	r6, r6, #7
 80063ca:	1d23      	adds	r3, r4, #4
 80063cc:	1af2      	subs	r2, r6, r3
 80063ce:	d0b6      	beq.n	800633e <_malloc_r+0x22>
 80063d0:	1b9b      	subs	r3, r3, r6
 80063d2:	50a3      	str	r3, [r4, r2]
 80063d4:	e7b3      	b.n	800633e <_malloc_r+0x22>
 80063d6:	6862      	ldr	r2, [r4, #4]
 80063d8:	42a3      	cmp	r3, r4
 80063da:	bf0c      	ite	eq
 80063dc:	6032      	streq	r2, [r6, #0]
 80063de:	605a      	strne	r2, [r3, #4]
 80063e0:	e7ec      	b.n	80063bc <_malloc_r+0xa0>
 80063e2:	4623      	mov	r3, r4
 80063e4:	6864      	ldr	r4, [r4, #4]
 80063e6:	e7b2      	b.n	800634e <_malloc_r+0x32>
 80063e8:	4634      	mov	r4, r6
 80063ea:	6876      	ldr	r6, [r6, #4]
 80063ec:	e7b9      	b.n	8006362 <_malloc_r+0x46>
 80063ee:	230c      	movs	r3, #12
 80063f0:	603b      	str	r3, [r7, #0]
 80063f2:	4638      	mov	r0, r7
 80063f4:	f000 f9d4 	bl	80067a0 <__malloc_unlock>
 80063f8:	e7a1      	b.n	800633e <_malloc_r+0x22>
 80063fa:	6025      	str	r5, [r4, #0]
 80063fc:	e7de      	b.n	80063bc <_malloc_r+0xa0>
 80063fe:	bf00      	nop
 8006400:	200003b4 	.word	0x200003b4

08006404 <__ssputs_r>:
 8006404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006408:	688e      	ldr	r6, [r1, #8]
 800640a:	429e      	cmp	r6, r3
 800640c:	4682      	mov	sl, r0
 800640e:	460c      	mov	r4, r1
 8006410:	4690      	mov	r8, r2
 8006412:	461f      	mov	r7, r3
 8006414:	d838      	bhi.n	8006488 <__ssputs_r+0x84>
 8006416:	898a      	ldrh	r2, [r1, #12]
 8006418:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800641c:	d032      	beq.n	8006484 <__ssputs_r+0x80>
 800641e:	6825      	ldr	r5, [r4, #0]
 8006420:	6909      	ldr	r1, [r1, #16]
 8006422:	eba5 0901 	sub.w	r9, r5, r1
 8006426:	6965      	ldr	r5, [r4, #20]
 8006428:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800642c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006430:	3301      	adds	r3, #1
 8006432:	444b      	add	r3, r9
 8006434:	106d      	asrs	r5, r5, #1
 8006436:	429d      	cmp	r5, r3
 8006438:	bf38      	it	cc
 800643a:	461d      	movcc	r5, r3
 800643c:	0553      	lsls	r3, r2, #21
 800643e:	d531      	bpl.n	80064a4 <__ssputs_r+0xa0>
 8006440:	4629      	mov	r1, r5
 8006442:	f7ff ff6b 	bl	800631c <_malloc_r>
 8006446:	4606      	mov	r6, r0
 8006448:	b950      	cbnz	r0, 8006460 <__ssputs_r+0x5c>
 800644a:	230c      	movs	r3, #12
 800644c:	f8ca 3000 	str.w	r3, [sl]
 8006450:	89a3      	ldrh	r3, [r4, #12]
 8006452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006456:	81a3      	strh	r3, [r4, #12]
 8006458:	f04f 30ff 	mov.w	r0, #4294967295
 800645c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006460:	6921      	ldr	r1, [r4, #16]
 8006462:	464a      	mov	r2, r9
 8006464:	f7ff fb46 	bl	8005af4 <memcpy>
 8006468:	89a3      	ldrh	r3, [r4, #12]
 800646a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800646e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006472:	81a3      	strh	r3, [r4, #12]
 8006474:	6126      	str	r6, [r4, #16]
 8006476:	6165      	str	r5, [r4, #20]
 8006478:	444e      	add	r6, r9
 800647a:	eba5 0509 	sub.w	r5, r5, r9
 800647e:	6026      	str	r6, [r4, #0]
 8006480:	60a5      	str	r5, [r4, #8]
 8006482:	463e      	mov	r6, r7
 8006484:	42be      	cmp	r6, r7
 8006486:	d900      	bls.n	800648a <__ssputs_r+0x86>
 8006488:	463e      	mov	r6, r7
 800648a:	6820      	ldr	r0, [r4, #0]
 800648c:	4632      	mov	r2, r6
 800648e:	4641      	mov	r1, r8
 8006490:	f000 f966 	bl	8006760 <memmove>
 8006494:	68a3      	ldr	r3, [r4, #8]
 8006496:	1b9b      	subs	r3, r3, r6
 8006498:	60a3      	str	r3, [r4, #8]
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	4433      	add	r3, r6
 800649e:	6023      	str	r3, [r4, #0]
 80064a0:	2000      	movs	r0, #0
 80064a2:	e7db      	b.n	800645c <__ssputs_r+0x58>
 80064a4:	462a      	mov	r2, r5
 80064a6:	f000 f981 	bl	80067ac <_realloc_r>
 80064aa:	4606      	mov	r6, r0
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d1e1      	bne.n	8006474 <__ssputs_r+0x70>
 80064b0:	6921      	ldr	r1, [r4, #16]
 80064b2:	4650      	mov	r0, sl
 80064b4:	f7ff fec6 	bl	8006244 <_free_r>
 80064b8:	e7c7      	b.n	800644a <__ssputs_r+0x46>
	...

080064bc <_svfiprintf_r>:
 80064bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c0:	4698      	mov	r8, r3
 80064c2:	898b      	ldrh	r3, [r1, #12]
 80064c4:	061b      	lsls	r3, r3, #24
 80064c6:	b09d      	sub	sp, #116	; 0x74
 80064c8:	4607      	mov	r7, r0
 80064ca:	460d      	mov	r5, r1
 80064cc:	4614      	mov	r4, r2
 80064ce:	d50e      	bpl.n	80064ee <_svfiprintf_r+0x32>
 80064d0:	690b      	ldr	r3, [r1, #16]
 80064d2:	b963      	cbnz	r3, 80064ee <_svfiprintf_r+0x32>
 80064d4:	2140      	movs	r1, #64	; 0x40
 80064d6:	f7ff ff21 	bl	800631c <_malloc_r>
 80064da:	6028      	str	r0, [r5, #0]
 80064dc:	6128      	str	r0, [r5, #16]
 80064de:	b920      	cbnz	r0, 80064ea <_svfiprintf_r+0x2e>
 80064e0:	230c      	movs	r3, #12
 80064e2:	603b      	str	r3, [r7, #0]
 80064e4:	f04f 30ff 	mov.w	r0, #4294967295
 80064e8:	e0d1      	b.n	800668e <_svfiprintf_r+0x1d2>
 80064ea:	2340      	movs	r3, #64	; 0x40
 80064ec:	616b      	str	r3, [r5, #20]
 80064ee:	2300      	movs	r3, #0
 80064f0:	9309      	str	r3, [sp, #36]	; 0x24
 80064f2:	2320      	movs	r3, #32
 80064f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80064fc:	2330      	movs	r3, #48	; 0x30
 80064fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80066a8 <_svfiprintf_r+0x1ec>
 8006502:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006506:	f04f 0901 	mov.w	r9, #1
 800650a:	4623      	mov	r3, r4
 800650c:	469a      	mov	sl, r3
 800650e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006512:	b10a      	cbz	r2, 8006518 <_svfiprintf_r+0x5c>
 8006514:	2a25      	cmp	r2, #37	; 0x25
 8006516:	d1f9      	bne.n	800650c <_svfiprintf_r+0x50>
 8006518:	ebba 0b04 	subs.w	fp, sl, r4
 800651c:	d00b      	beq.n	8006536 <_svfiprintf_r+0x7a>
 800651e:	465b      	mov	r3, fp
 8006520:	4622      	mov	r2, r4
 8006522:	4629      	mov	r1, r5
 8006524:	4638      	mov	r0, r7
 8006526:	f7ff ff6d 	bl	8006404 <__ssputs_r>
 800652a:	3001      	adds	r0, #1
 800652c:	f000 80aa 	beq.w	8006684 <_svfiprintf_r+0x1c8>
 8006530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006532:	445a      	add	r2, fp
 8006534:	9209      	str	r2, [sp, #36]	; 0x24
 8006536:	f89a 3000 	ldrb.w	r3, [sl]
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 80a2 	beq.w	8006684 <_svfiprintf_r+0x1c8>
 8006540:	2300      	movs	r3, #0
 8006542:	f04f 32ff 	mov.w	r2, #4294967295
 8006546:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800654a:	f10a 0a01 	add.w	sl, sl, #1
 800654e:	9304      	str	r3, [sp, #16]
 8006550:	9307      	str	r3, [sp, #28]
 8006552:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006556:	931a      	str	r3, [sp, #104]	; 0x68
 8006558:	4654      	mov	r4, sl
 800655a:	2205      	movs	r2, #5
 800655c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006560:	4851      	ldr	r0, [pc, #324]	; (80066a8 <_svfiprintf_r+0x1ec>)
 8006562:	f7f9 fe4d 	bl	8000200 <memchr>
 8006566:	9a04      	ldr	r2, [sp, #16]
 8006568:	b9d8      	cbnz	r0, 80065a2 <_svfiprintf_r+0xe6>
 800656a:	06d0      	lsls	r0, r2, #27
 800656c:	bf44      	itt	mi
 800656e:	2320      	movmi	r3, #32
 8006570:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006574:	0711      	lsls	r1, r2, #28
 8006576:	bf44      	itt	mi
 8006578:	232b      	movmi	r3, #43	; 0x2b
 800657a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800657e:	f89a 3000 	ldrb.w	r3, [sl]
 8006582:	2b2a      	cmp	r3, #42	; 0x2a
 8006584:	d015      	beq.n	80065b2 <_svfiprintf_r+0xf6>
 8006586:	9a07      	ldr	r2, [sp, #28]
 8006588:	4654      	mov	r4, sl
 800658a:	2000      	movs	r0, #0
 800658c:	f04f 0c0a 	mov.w	ip, #10
 8006590:	4621      	mov	r1, r4
 8006592:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006596:	3b30      	subs	r3, #48	; 0x30
 8006598:	2b09      	cmp	r3, #9
 800659a:	d94e      	bls.n	800663a <_svfiprintf_r+0x17e>
 800659c:	b1b0      	cbz	r0, 80065cc <_svfiprintf_r+0x110>
 800659e:	9207      	str	r2, [sp, #28]
 80065a0:	e014      	b.n	80065cc <_svfiprintf_r+0x110>
 80065a2:	eba0 0308 	sub.w	r3, r0, r8
 80065a6:	fa09 f303 	lsl.w	r3, r9, r3
 80065aa:	4313      	orrs	r3, r2
 80065ac:	9304      	str	r3, [sp, #16]
 80065ae:	46a2      	mov	sl, r4
 80065b0:	e7d2      	b.n	8006558 <_svfiprintf_r+0x9c>
 80065b2:	9b03      	ldr	r3, [sp, #12]
 80065b4:	1d19      	adds	r1, r3, #4
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	9103      	str	r1, [sp, #12]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	bfbb      	ittet	lt
 80065be:	425b      	neglt	r3, r3
 80065c0:	f042 0202 	orrlt.w	r2, r2, #2
 80065c4:	9307      	strge	r3, [sp, #28]
 80065c6:	9307      	strlt	r3, [sp, #28]
 80065c8:	bfb8      	it	lt
 80065ca:	9204      	strlt	r2, [sp, #16]
 80065cc:	7823      	ldrb	r3, [r4, #0]
 80065ce:	2b2e      	cmp	r3, #46	; 0x2e
 80065d0:	d10c      	bne.n	80065ec <_svfiprintf_r+0x130>
 80065d2:	7863      	ldrb	r3, [r4, #1]
 80065d4:	2b2a      	cmp	r3, #42	; 0x2a
 80065d6:	d135      	bne.n	8006644 <_svfiprintf_r+0x188>
 80065d8:	9b03      	ldr	r3, [sp, #12]
 80065da:	1d1a      	adds	r2, r3, #4
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	9203      	str	r2, [sp, #12]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	bfb8      	it	lt
 80065e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80065e8:	3402      	adds	r4, #2
 80065ea:	9305      	str	r3, [sp, #20]
 80065ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80066b8 <_svfiprintf_r+0x1fc>
 80065f0:	7821      	ldrb	r1, [r4, #0]
 80065f2:	2203      	movs	r2, #3
 80065f4:	4650      	mov	r0, sl
 80065f6:	f7f9 fe03 	bl	8000200 <memchr>
 80065fa:	b140      	cbz	r0, 800660e <_svfiprintf_r+0x152>
 80065fc:	2340      	movs	r3, #64	; 0x40
 80065fe:	eba0 000a 	sub.w	r0, r0, sl
 8006602:	fa03 f000 	lsl.w	r0, r3, r0
 8006606:	9b04      	ldr	r3, [sp, #16]
 8006608:	4303      	orrs	r3, r0
 800660a:	3401      	adds	r4, #1
 800660c:	9304      	str	r3, [sp, #16]
 800660e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006612:	4826      	ldr	r0, [pc, #152]	; (80066ac <_svfiprintf_r+0x1f0>)
 8006614:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006618:	2206      	movs	r2, #6
 800661a:	f7f9 fdf1 	bl	8000200 <memchr>
 800661e:	2800      	cmp	r0, #0
 8006620:	d038      	beq.n	8006694 <_svfiprintf_r+0x1d8>
 8006622:	4b23      	ldr	r3, [pc, #140]	; (80066b0 <_svfiprintf_r+0x1f4>)
 8006624:	bb1b      	cbnz	r3, 800666e <_svfiprintf_r+0x1b2>
 8006626:	9b03      	ldr	r3, [sp, #12]
 8006628:	3307      	adds	r3, #7
 800662a:	f023 0307 	bic.w	r3, r3, #7
 800662e:	3308      	adds	r3, #8
 8006630:	9303      	str	r3, [sp, #12]
 8006632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006634:	4433      	add	r3, r6
 8006636:	9309      	str	r3, [sp, #36]	; 0x24
 8006638:	e767      	b.n	800650a <_svfiprintf_r+0x4e>
 800663a:	fb0c 3202 	mla	r2, ip, r2, r3
 800663e:	460c      	mov	r4, r1
 8006640:	2001      	movs	r0, #1
 8006642:	e7a5      	b.n	8006590 <_svfiprintf_r+0xd4>
 8006644:	2300      	movs	r3, #0
 8006646:	3401      	adds	r4, #1
 8006648:	9305      	str	r3, [sp, #20]
 800664a:	4619      	mov	r1, r3
 800664c:	f04f 0c0a 	mov.w	ip, #10
 8006650:	4620      	mov	r0, r4
 8006652:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006656:	3a30      	subs	r2, #48	; 0x30
 8006658:	2a09      	cmp	r2, #9
 800665a:	d903      	bls.n	8006664 <_svfiprintf_r+0x1a8>
 800665c:	2b00      	cmp	r3, #0
 800665e:	d0c5      	beq.n	80065ec <_svfiprintf_r+0x130>
 8006660:	9105      	str	r1, [sp, #20]
 8006662:	e7c3      	b.n	80065ec <_svfiprintf_r+0x130>
 8006664:	fb0c 2101 	mla	r1, ip, r1, r2
 8006668:	4604      	mov	r4, r0
 800666a:	2301      	movs	r3, #1
 800666c:	e7f0      	b.n	8006650 <_svfiprintf_r+0x194>
 800666e:	ab03      	add	r3, sp, #12
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	462a      	mov	r2, r5
 8006674:	4b0f      	ldr	r3, [pc, #60]	; (80066b4 <_svfiprintf_r+0x1f8>)
 8006676:	a904      	add	r1, sp, #16
 8006678:	4638      	mov	r0, r7
 800667a:	f7fd ffcb 	bl	8004614 <_printf_float>
 800667e:	1c42      	adds	r2, r0, #1
 8006680:	4606      	mov	r6, r0
 8006682:	d1d6      	bne.n	8006632 <_svfiprintf_r+0x176>
 8006684:	89ab      	ldrh	r3, [r5, #12]
 8006686:	065b      	lsls	r3, r3, #25
 8006688:	f53f af2c 	bmi.w	80064e4 <_svfiprintf_r+0x28>
 800668c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800668e:	b01d      	add	sp, #116	; 0x74
 8006690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006694:	ab03      	add	r3, sp, #12
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	462a      	mov	r2, r5
 800669a:	4b06      	ldr	r3, [pc, #24]	; (80066b4 <_svfiprintf_r+0x1f8>)
 800669c:	a904      	add	r1, sp, #16
 800669e:	4638      	mov	r0, r7
 80066a0:	f7fe fa5c 	bl	8004b5c <_printf_i>
 80066a4:	e7eb      	b.n	800667e <_svfiprintf_r+0x1c2>
 80066a6:	bf00      	nop
 80066a8:	0800952c 	.word	0x0800952c
 80066ac:	08009536 	.word	0x08009536
 80066b0:	08004615 	.word	0x08004615
 80066b4:	08006405 	.word	0x08006405
 80066b8:	08009532 	.word	0x08009532

080066bc <_sbrk_r>:
 80066bc:	b538      	push	{r3, r4, r5, lr}
 80066be:	4d06      	ldr	r5, [pc, #24]	; (80066d8 <_sbrk_r+0x1c>)
 80066c0:	2300      	movs	r3, #0
 80066c2:	4604      	mov	r4, r0
 80066c4:	4608      	mov	r0, r1
 80066c6:	602b      	str	r3, [r5, #0]
 80066c8:	f7fb fd28 	bl	800211c <_sbrk>
 80066cc:	1c43      	adds	r3, r0, #1
 80066ce:	d102      	bne.n	80066d6 <_sbrk_r+0x1a>
 80066d0:	682b      	ldr	r3, [r5, #0]
 80066d2:	b103      	cbz	r3, 80066d6 <_sbrk_r+0x1a>
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	bd38      	pop	{r3, r4, r5, pc}
 80066d8:	200003bc 	.word	0x200003bc

080066dc <__assert_func>:
 80066dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066de:	4614      	mov	r4, r2
 80066e0:	461a      	mov	r2, r3
 80066e2:	4b09      	ldr	r3, [pc, #36]	; (8006708 <__assert_func+0x2c>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4605      	mov	r5, r0
 80066e8:	68d8      	ldr	r0, [r3, #12]
 80066ea:	b14c      	cbz	r4, 8006700 <__assert_func+0x24>
 80066ec:	4b07      	ldr	r3, [pc, #28]	; (800670c <__assert_func+0x30>)
 80066ee:	9100      	str	r1, [sp, #0]
 80066f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80066f4:	4906      	ldr	r1, [pc, #24]	; (8006710 <__assert_func+0x34>)
 80066f6:	462b      	mov	r3, r5
 80066f8:	f000 f80e 	bl	8006718 <fiprintf>
 80066fc:	f000 faac 	bl	8006c58 <abort>
 8006700:	4b04      	ldr	r3, [pc, #16]	; (8006714 <__assert_func+0x38>)
 8006702:	461c      	mov	r4, r3
 8006704:	e7f3      	b.n	80066ee <__assert_func+0x12>
 8006706:	bf00      	nop
 8006708:	2000000c 	.word	0x2000000c
 800670c:	0800953d 	.word	0x0800953d
 8006710:	0800954a 	.word	0x0800954a
 8006714:	08009578 	.word	0x08009578

08006718 <fiprintf>:
 8006718:	b40e      	push	{r1, r2, r3}
 800671a:	b503      	push	{r0, r1, lr}
 800671c:	4601      	mov	r1, r0
 800671e:	ab03      	add	r3, sp, #12
 8006720:	4805      	ldr	r0, [pc, #20]	; (8006738 <fiprintf+0x20>)
 8006722:	f853 2b04 	ldr.w	r2, [r3], #4
 8006726:	6800      	ldr	r0, [r0, #0]
 8006728:	9301      	str	r3, [sp, #4]
 800672a:	f000 f897 	bl	800685c <_vfiprintf_r>
 800672e:	b002      	add	sp, #8
 8006730:	f85d eb04 	ldr.w	lr, [sp], #4
 8006734:	b003      	add	sp, #12
 8006736:	4770      	bx	lr
 8006738:	2000000c 	.word	0x2000000c

0800673c <__ascii_mbtowc>:
 800673c:	b082      	sub	sp, #8
 800673e:	b901      	cbnz	r1, 8006742 <__ascii_mbtowc+0x6>
 8006740:	a901      	add	r1, sp, #4
 8006742:	b142      	cbz	r2, 8006756 <__ascii_mbtowc+0x1a>
 8006744:	b14b      	cbz	r3, 800675a <__ascii_mbtowc+0x1e>
 8006746:	7813      	ldrb	r3, [r2, #0]
 8006748:	600b      	str	r3, [r1, #0]
 800674a:	7812      	ldrb	r2, [r2, #0]
 800674c:	1e10      	subs	r0, r2, #0
 800674e:	bf18      	it	ne
 8006750:	2001      	movne	r0, #1
 8006752:	b002      	add	sp, #8
 8006754:	4770      	bx	lr
 8006756:	4610      	mov	r0, r2
 8006758:	e7fb      	b.n	8006752 <__ascii_mbtowc+0x16>
 800675a:	f06f 0001 	mvn.w	r0, #1
 800675e:	e7f8      	b.n	8006752 <__ascii_mbtowc+0x16>

08006760 <memmove>:
 8006760:	4288      	cmp	r0, r1
 8006762:	b510      	push	{r4, lr}
 8006764:	eb01 0402 	add.w	r4, r1, r2
 8006768:	d902      	bls.n	8006770 <memmove+0x10>
 800676a:	4284      	cmp	r4, r0
 800676c:	4623      	mov	r3, r4
 800676e:	d807      	bhi.n	8006780 <memmove+0x20>
 8006770:	1e43      	subs	r3, r0, #1
 8006772:	42a1      	cmp	r1, r4
 8006774:	d008      	beq.n	8006788 <memmove+0x28>
 8006776:	f811 2b01 	ldrb.w	r2, [r1], #1
 800677a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800677e:	e7f8      	b.n	8006772 <memmove+0x12>
 8006780:	4402      	add	r2, r0
 8006782:	4601      	mov	r1, r0
 8006784:	428a      	cmp	r2, r1
 8006786:	d100      	bne.n	800678a <memmove+0x2a>
 8006788:	bd10      	pop	{r4, pc}
 800678a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800678e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006792:	e7f7      	b.n	8006784 <memmove+0x24>

08006794 <__malloc_lock>:
 8006794:	4801      	ldr	r0, [pc, #4]	; (800679c <__malloc_lock+0x8>)
 8006796:	f000 bc1f 	b.w	8006fd8 <__retarget_lock_acquire_recursive>
 800679a:	bf00      	nop
 800679c:	200003c0 	.word	0x200003c0

080067a0 <__malloc_unlock>:
 80067a0:	4801      	ldr	r0, [pc, #4]	; (80067a8 <__malloc_unlock+0x8>)
 80067a2:	f000 bc1a 	b.w	8006fda <__retarget_lock_release_recursive>
 80067a6:	bf00      	nop
 80067a8:	200003c0 	.word	0x200003c0

080067ac <_realloc_r>:
 80067ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067b0:	4680      	mov	r8, r0
 80067b2:	4614      	mov	r4, r2
 80067b4:	460e      	mov	r6, r1
 80067b6:	b921      	cbnz	r1, 80067c2 <_realloc_r+0x16>
 80067b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067bc:	4611      	mov	r1, r2
 80067be:	f7ff bdad 	b.w	800631c <_malloc_r>
 80067c2:	b92a      	cbnz	r2, 80067d0 <_realloc_r+0x24>
 80067c4:	f7ff fd3e 	bl	8006244 <_free_r>
 80067c8:	4625      	mov	r5, r4
 80067ca:	4628      	mov	r0, r5
 80067cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067d0:	f000 fc6a 	bl	80070a8 <_malloc_usable_size_r>
 80067d4:	4284      	cmp	r4, r0
 80067d6:	4607      	mov	r7, r0
 80067d8:	d802      	bhi.n	80067e0 <_realloc_r+0x34>
 80067da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80067de:	d812      	bhi.n	8006806 <_realloc_r+0x5a>
 80067e0:	4621      	mov	r1, r4
 80067e2:	4640      	mov	r0, r8
 80067e4:	f7ff fd9a 	bl	800631c <_malloc_r>
 80067e8:	4605      	mov	r5, r0
 80067ea:	2800      	cmp	r0, #0
 80067ec:	d0ed      	beq.n	80067ca <_realloc_r+0x1e>
 80067ee:	42bc      	cmp	r4, r7
 80067f0:	4622      	mov	r2, r4
 80067f2:	4631      	mov	r1, r6
 80067f4:	bf28      	it	cs
 80067f6:	463a      	movcs	r2, r7
 80067f8:	f7ff f97c 	bl	8005af4 <memcpy>
 80067fc:	4631      	mov	r1, r6
 80067fe:	4640      	mov	r0, r8
 8006800:	f7ff fd20 	bl	8006244 <_free_r>
 8006804:	e7e1      	b.n	80067ca <_realloc_r+0x1e>
 8006806:	4635      	mov	r5, r6
 8006808:	e7df      	b.n	80067ca <_realloc_r+0x1e>

0800680a <__sfputc_r>:
 800680a:	6893      	ldr	r3, [r2, #8]
 800680c:	3b01      	subs	r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	b410      	push	{r4}
 8006812:	6093      	str	r3, [r2, #8]
 8006814:	da08      	bge.n	8006828 <__sfputc_r+0x1e>
 8006816:	6994      	ldr	r4, [r2, #24]
 8006818:	42a3      	cmp	r3, r4
 800681a:	db01      	blt.n	8006820 <__sfputc_r+0x16>
 800681c:	290a      	cmp	r1, #10
 800681e:	d103      	bne.n	8006828 <__sfputc_r+0x1e>
 8006820:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006824:	f000 b94a 	b.w	8006abc <__swbuf_r>
 8006828:	6813      	ldr	r3, [r2, #0]
 800682a:	1c58      	adds	r0, r3, #1
 800682c:	6010      	str	r0, [r2, #0]
 800682e:	7019      	strb	r1, [r3, #0]
 8006830:	4608      	mov	r0, r1
 8006832:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006836:	4770      	bx	lr

08006838 <__sfputs_r>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	4606      	mov	r6, r0
 800683c:	460f      	mov	r7, r1
 800683e:	4614      	mov	r4, r2
 8006840:	18d5      	adds	r5, r2, r3
 8006842:	42ac      	cmp	r4, r5
 8006844:	d101      	bne.n	800684a <__sfputs_r+0x12>
 8006846:	2000      	movs	r0, #0
 8006848:	e007      	b.n	800685a <__sfputs_r+0x22>
 800684a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800684e:	463a      	mov	r2, r7
 8006850:	4630      	mov	r0, r6
 8006852:	f7ff ffda 	bl	800680a <__sfputc_r>
 8006856:	1c43      	adds	r3, r0, #1
 8006858:	d1f3      	bne.n	8006842 <__sfputs_r+0xa>
 800685a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800685c <_vfiprintf_r>:
 800685c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006860:	460d      	mov	r5, r1
 8006862:	b09d      	sub	sp, #116	; 0x74
 8006864:	4614      	mov	r4, r2
 8006866:	4698      	mov	r8, r3
 8006868:	4606      	mov	r6, r0
 800686a:	b118      	cbz	r0, 8006874 <_vfiprintf_r+0x18>
 800686c:	6983      	ldr	r3, [r0, #24]
 800686e:	b90b      	cbnz	r3, 8006874 <_vfiprintf_r+0x18>
 8006870:	f000 fb14 	bl	8006e9c <__sinit>
 8006874:	4b89      	ldr	r3, [pc, #548]	; (8006a9c <_vfiprintf_r+0x240>)
 8006876:	429d      	cmp	r5, r3
 8006878:	d11b      	bne.n	80068b2 <_vfiprintf_r+0x56>
 800687a:	6875      	ldr	r5, [r6, #4]
 800687c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800687e:	07d9      	lsls	r1, r3, #31
 8006880:	d405      	bmi.n	800688e <_vfiprintf_r+0x32>
 8006882:	89ab      	ldrh	r3, [r5, #12]
 8006884:	059a      	lsls	r2, r3, #22
 8006886:	d402      	bmi.n	800688e <_vfiprintf_r+0x32>
 8006888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800688a:	f000 fba5 	bl	8006fd8 <__retarget_lock_acquire_recursive>
 800688e:	89ab      	ldrh	r3, [r5, #12]
 8006890:	071b      	lsls	r3, r3, #28
 8006892:	d501      	bpl.n	8006898 <_vfiprintf_r+0x3c>
 8006894:	692b      	ldr	r3, [r5, #16]
 8006896:	b9eb      	cbnz	r3, 80068d4 <_vfiprintf_r+0x78>
 8006898:	4629      	mov	r1, r5
 800689a:	4630      	mov	r0, r6
 800689c:	f000 f96e 	bl	8006b7c <__swsetup_r>
 80068a0:	b1c0      	cbz	r0, 80068d4 <_vfiprintf_r+0x78>
 80068a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068a4:	07dc      	lsls	r4, r3, #31
 80068a6:	d50e      	bpl.n	80068c6 <_vfiprintf_r+0x6a>
 80068a8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ac:	b01d      	add	sp, #116	; 0x74
 80068ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b2:	4b7b      	ldr	r3, [pc, #492]	; (8006aa0 <_vfiprintf_r+0x244>)
 80068b4:	429d      	cmp	r5, r3
 80068b6:	d101      	bne.n	80068bc <_vfiprintf_r+0x60>
 80068b8:	68b5      	ldr	r5, [r6, #8]
 80068ba:	e7df      	b.n	800687c <_vfiprintf_r+0x20>
 80068bc:	4b79      	ldr	r3, [pc, #484]	; (8006aa4 <_vfiprintf_r+0x248>)
 80068be:	429d      	cmp	r5, r3
 80068c0:	bf08      	it	eq
 80068c2:	68f5      	ldreq	r5, [r6, #12]
 80068c4:	e7da      	b.n	800687c <_vfiprintf_r+0x20>
 80068c6:	89ab      	ldrh	r3, [r5, #12]
 80068c8:	0598      	lsls	r0, r3, #22
 80068ca:	d4ed      	bmi.n	80068a8 <_vfiprintf_r+0x4c>
 80068cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068ce:	f000 fb84 	bl	8006fda <__retarget_lock_release_recursive>
 80068d2:	e7e9      	b.n	80068a8 <_vfiprintf_r+0x4c>
 80068d4:	2300      	movs	r3, #0
 80068d6:	9309      	str	r3, [sp, #36]	; 0x24
 80068d8:	2320      	movs	r3, #32
 80068da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068de:	f8cd 800c 	str.w	r8, [sp, #12]
 80068e2:	2330      	movs	r3, #48	; 0x30
 80068e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006aa8 <_vfiprintf_r+0x24c>
 80068e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068ec:	f04f 0901 	mov.w	r9, #1
 80068f0:	4623      	mov	r3, r4
 80068f2:	469a      	mov	sl, r3
 80068f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068f8:	b10a      	cbz	r2, 80068fe <_vfiprintf_r+0xa2>
 80068fa:	2a25      	cmp	r2, #37	; 0x25
 80068fc:	d1f9      	bne.n	80068f2 <_vfiprintf_r+0x96>
 80068fe:	ebba 0b04 	subs.w	fp, sl, r4
 8006902:	d00b      	beq.n	800691c <_vfiprintf_r+0xc0>
 8006904:	465b      	mov	r3, fp
 8006906:	4622      	mov	r2, r4
 8006908:	4629      	mov	r1, r5
 800690a:	4630      	mov	r0, r6
 800690c:	f7ff ff94 	bl	8006838 <__sfputs_r>
 8006910:	3001      	adds	r0, #1
 8006912:	f000 80aa 	beq.w	8006a6a <_vfiprintf_r+0x20e>
 8006916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006918:	445a      	add	r2, fp
 800691a:	9209      	str	r2, [sp, #36]	; 0x24
 800691c:	f89a 3000 	ldrb.w	r3, [sl]
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 80a2 	beq.w	8006a6a <_vfiprintf_r+0x20e>
 8006926:	2300      	movs	r3, #0
 8006928:	f04f 32ff 	mov.w	r2, #4294967295
 800692c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006930:	f10a 0a01 	add.w	sl, sl, #1
 8006934:	9304      	str	r3, [sp, #16]
 8006936:	9307      	str	r3, [sp, #28]
 8006938:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800693c:	931a      	str	r3, [sp, #104]	; 0x68
 800693e:	4654      	mov	r4, sl
 8006940:	2205      	movs	r2, #5
 8006942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006946:	4858      	ldr	r0, [pc, #352]	; (8006aa8 <_vfiprintf_r+0x24c>)
 8006948:	f7f9 fc5a 	bl	8000200 <memchr>
 800694c:	9a04      	ldr	r2, [sp, #16]
 800694e:	b9d8      	cbnz	r0, 8006988 <_vfiprintf_r+0x12c>
 8006950:	06d1      	lsls	r1, r2, #27
 8006952:	bf44      	itt	mi
 8006954:	2320      	movmi	r3, #32
 8006956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800695a:	0713      	lsls	r3, r2, #28
 800695c:	bf44      	itt	mi
 800695e:	232b      	movmi	r3, #43	; 0x2b
 8006960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006964:	f89a 3000 	ldrb.w	r3, [sl]
 8006968:	2b2a      	cmp	r3, #42	; 0x2a
 800696a:	d015      	beq.n	8006998 <_vfiprintf_r+0x13c>
 800696c:	9a07      	ldr	r2, [sp, #28]
 800696e:	4654      	mov	r4, sl
 8006970:	2000      	movs	r0, #0
 8006972:	f04f 0c0a 	mov.w	ip, #10
 8006976:	4621      	mov	r1, r4
 8006978:	f811 3b01 	ldrb.w	r3, [r1], #1
 800697c:	3b30      	subs	r3, #48	; 0x30
 800697e:	2b09      	cmp	r3, #9
 8006980:	d94e      	bls.n	8006a20 <_vfiprintf_r+0x1c4>
 8006982:	b1b0      	cbz	r0, 80069b2 <_vfiprintf_r+0x156>
 8006984:	9207      	str	r2, [sp, #28]
 8006986:	e014      	b.n	80069b2 <_vfiprintf_r+0x156>
 8006988:	eba0 0308 	sub.w	r3, r0, r8
 800698c:	fa09 f303 	lsl.w	r3, r9, r3
 8006990:	4313      	orrs	r3, r2
 8006992:	9304      	str	r3, [sp, #16]
 8006994:	46a2      	mov	sl, r4
 8006996:	e7d2      	b.n	800693e <_vfiprintf_r+0xe2>
 8006998:	9b03      	ldr	r3, [sp, #12]
 800699a:	1d19      	adds	r1, r3, #4
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	9103      	str	r1, [sp, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	bfbb      	ittet	lt
 80069a4:	425b      	neglt	r3, r3
 80069a6:	f042 0202 	orrlt.w	r2, r2, #2
 80069aa:	9307      	strge	r3, [sp, #28]
 80069ac:	9307      	strlt	r3, [sp, #28]
 80069ae:	bfb8      	it	lt
 80069b0:	9204      	strlt	r2, [sp, #16]
 80069b2:	7823      	ldrb	r3, [r4, #0]
 80069b4:	2b2e      	cmp	r3, #46	; 0x2e
 80069b6:	d10c      	bne.n	80069d2 <_vfiprintf_r+0x176>
 80069b8:	7863      	ldrb	r3, [r4, #1]
 80069ba:	2b2a      	cmp	r3, #42	; 0x2a
 80069bc:	d135      	bne.n	8006a2a <_vfiprintf_r+0x1ce>
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	1d1a      	adds	r2, r3, #4
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	9203      	str	r2, [sp, #12]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	bfb8      	it	lt
 80069ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80069ce:	3402      	adds	r4, #2
 80069d0:	9305      	str	r3, [sp, #20]
 80069d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006ab8 <_vfiprintf_r+0x25c>
 80069d6:	7821      	ldrb	r1, [r4, #0]
 80069d8:	2203      	movs	r2, #3
 80069da:	4650      	mov	r0, sl
 80069dc:	f7f9 fc10 	bl	8000200 <memchr>
 80069e0:	b140      	cbz	r0, 80069f4 <_vfiprintf_r+0x198>
 80069e2:	2340      	movs	r3, #64	; 0x40
 80069e4:	eba0 000a 	sub.w	r0, r0, sl
 80069e8:	fa03 f000 	lsl.w	r0, r3, r0
 80069ec:	9b04      	ldr	r3, [sp, #16]
 80069ee:	4303      	orrs	r3, r0
 80069f0:	3401      	adds	r4, #1
 80069f2:	9304      	str	r3, [sp, #16]
 80069f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069f8:	482c      	ldr	r0, [pc, #176]	; (8006aac <_vfiprintf_r+0x250>)
 80069fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069fe:	2206      	movs	r2, #6
 8006a00:	f7f9 fbfe 	bl	8000200 <memchr>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d03f      	beq.n	8006a88 <_vfiprintf_r+0x22c>
 8006a08:	4b29      	ldr	r3, [pc, #164]	; (8006ab0 <_vfiprintf_r+0x254>)
 8006a0a:	bb1b      	cbnz	r3, 8006a54 <_vfiprintf_r+0x1f8>
 8006a0c:	9b03      	ldr	r3, [sp, #12]
 8006a0e:	3307      	adds	r3, #7
 8006a10:	f023 0307 	bic.w	r3, r3, #7
 8006a14:	3308      	adds	r3, #8
 8006a16:	9303      	str	r3, [sp, #12]
 8006a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a1a:	443b      	add	r3, r7
 8006a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a1e:	e767      	b.n	80068f0 <_vfiprintf_r+0x94>
 8006a20:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a24:	460c      	mov	r4, r1
 8006a26:	2001      	movs	r0, #1
 8006a28:	e7a5      	b.n	8006976 <_vfiprintf_r+0x11a>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	3401      	adds	r4, #1
 8006a2e:	9305      	str	r3, [sp, #20]
 8006a30:	4619      	mov	r1, r3
 8006a32:	f04f 0c0a 	mov.w	ip, #10
 8006a36:	4620      	mov	r0, r4
 8006a38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a3c:	3a30      	subs	r2, #48	; 0x30
 8006a3e:	2a09      	cmp	r2, #9
 8006a40:	d903      	bls.n	8006a4a <_vfiprintf_r+0x1ee>
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0c5      	beq.n	80069d2 <_vfiprintf_r+0x176>
 8006a46:	9105      	str	r1, [sp, #20]
 8006a48:	e7c3      	b.n	80069d2 <_vfiprintf_r+0x176>
 8006a4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a4e:	4604      	mov	r4, r0
 8006a50:	2301      	movs	r3, #1
 8006a52:	e7f0      	b.n	8006a36 <_vfiprintf_r+0x1da>
 8006a54:	ab03      	add	r3, sp, #12
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	462a      	mov	r2, r5
 8006a5a:	4b16      	ldr	r3, [pc, #88]	; (8006ab4 <_vfiprintf_r+0x258>)
 8006a5c:	a904      	add	r1, sp, #16
 8006a5e:	4630      	mov	r0, r6
 8006a60:	f7fd fdd8 	bl	8004614 <_printf_float>
 8006a64:	4607      	mov	r7, r0
 8006a66:	1c78      	adds	r0, r7, #1
 8006a68:	d1d6      	bne.n	8006a18 <_vfiprintf_r+0x1bc>
 8006a6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a6c:	07d9      	lsls	r1, r3, #31
 8006a6e:	d405      	bmi.n	8006a7c <_vfiprintf_r+0x220>
 8006a70:	89ab      	ldrh	r3, [r5, #12]
 8006a72:	059a      	lsls	r2, r3, #22
 8006a74:	d402      	bmi.n	8006a7c <_vfiprintf_r+0x220>
 8006a76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a78:	f000 faaf 	bl	8006fda <__retarget_lock_release_recursive>
 8006a7c:	89ab      	ldrh	r3, [r5, #12]
 8006a7e:	065b      	lsls	r3, r3, #25
 8006a80:	f53f af12 	bmi.w	80068a8 <_vfiprintf_r+0x4c>
 8006a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a86:	e711      	b.n	80068ac <_vfiprintf_r+0x50>
 8006a88:	ab03      	add	r3, sp, #12
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	462a      	mov	r2, r5
 8006a8e:	4b09      	ldr	r3, [pc, #36]	; (8006ab4 <_vfiprintf_r+0x258>)
 8006a90:	a904      	add	r1, sp, #16
 8006a92:	4630      	mov	r0, r6
 8006a94:	f7fe f862 	bl	8004b5c <_printf_i>
 8006a98:	e7e4      	b.n	8006a64 <_vfiprintf_r+0x208>
 8006a9a:	bf00      	nop
 8006a9c:	080096a4 	.word	0x080096a4
 8006aa0:	080096c4 	.word	0x080096c4
 8006aa4:	08009684 	.word	0x08009684
 8006aa8:	0800952c 	.word	0x0800952c
 8006aac:	08009536 	.word	0x08009536
 8006ab0:	08004615 	.word	0x08004615
 8006ab4:	08006839 	.word	0x08006839
 8006ab8:	08009532 	.word	0x08009532

08006abc <__swbuf_r>:
 8006abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006abe:	460e      	mov	r6, r1
 8006ac0:	4614      	mov	r4, r2
 8006ac2:	4605      	mov	r5, r0
 8006ac4:	b118      	cbz	r0, 8006ace <__swbuf_r+0x12>
 8006ac6:	6983      	ldr	r3, [r0, #24]
 8006ac8:	b90b      	cbnz	r3, 8006ace <__swbuf_r+0x12>
 8006aca:	f000 f9e7 	bl	8006e9c <__sinit>
 8006ace:	4b21      	ldr	r3, [pc, #132]	; (8006b54 <__swbuf_r+0x98>)
 8006ad0:	429c      	cmp	r4, r3
 8006ad2:	d12b      	bne.n	8006b2c <__swbuf_r+0x70>
 8006ad4:	686c      	ldr	r4, [r5, #4]
 8006ad6:	69a3      	ldr	r3, [r4, #24]
 8006ad8:	60a3      	str	r3, [r4, #8]
 8006ada:	89a3      	ldrh	r3, [r4, #12]
 8006adc:	071a      	lsls	r2, r3, #28
 8006ade:	d52f      	bpl.n	8006b40 <__swbuf_r+0x84>
 8006ae0:	6923      	ldr	r3, [r4, #16]
 8006ae2:	b36b      	cbz	r3, 8006b40 <__swbuf_r+0x84>
 8006ae4:	6923      	ldr	r3, [r4, #16]
 8006ae6:	6820      	ldr	r0, [r4, #0]
 8006ae8:	1ac0      	subs	r0, r0, r3
 8006aea:	6963      	ldr	r3, [r4, #20]
 8006aec:	b2f6      	uxtb	r6, r6
 8006aee:	4283      	cmp	r3, r0
 8006af0:	4637      	mov	r7, r6
 8006af2:	dc04      	bgt.n	8006afe <__swbuf_r+0x42>
 8006af4:	4621      	mov	r1, r4
 8006af6:	4628      	mov	r0, r5
 8006af8:	f000 f93c 	bl	8006d74 <_fflush_r>
 8006afc:	bb30      	cbnz	r0, 8006b4c <__swbuf_r+0x90>
 8006afe:	68a3      	ldr	r3, [r4, #8]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	60a3      	str	r3, [r4, #8]
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	6022      	str	r2, [r4, #0]
 8006b0a:	701e      	strb	r6, [r3, #0]
 8006b0c:	6963      	ldr	r3, [r4, #20]
 8006b0e:	3001      	adds	r0, #1
 8006b10:	4283      	cmp	r3, r0
 8006b12:	d004      	beq.n	8006b1e <__swbuf_r+0x62>
 8006b14:	89a3      	ldrh	r3, [r4, #12]
 8006b16:	07db      	lsls	r3, r3, #31
 8006b18:	d506      	bpl.n	8006b28 <__swbuf_r+0x6c>
 8006b1a:	2e0a      	cmp	r6, #10
 8006b1c:	d104      	bne.n	8006b28 <__swbuf_r+0x6c>
 8006b1e:	4621      	mov	r1, r4
 8006b20:	4628      	mov	r0, r5
 8006b22:	f000 f927 	bl	8006d74 <_fflush_r>
 8006b26:	b988      	cbnz	r0, 8006b4c <__swbuf_r+0x90>
 8006b28:	4638      	mov	r0, r7
 8006b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b2c:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <__swbuf_r+0x9c>)
 8006b2e:	429c      	cmp	r4, r3
 8006b30:	d101      	bne.n	8006b36 <__swbuf_r+0x7a>
 8006b32:	68ac      	ldr	r4, [r5, #8]
 8006b34:	e7cf      	b.n	8006ad6 <__swbuf_r+0x1a>
 8006b36:	4b09      	ldr	r3, [pc, #36]	; (8006b5c <__swbuf_r+0xa0>)
 8006b38:	429c      	cmp	r4, r3
 8006b3a:	bf08      	it	eq
 8006b3c:	68ec      	ldreq	r4, [r5, #12]
 8006b3e:	e7ca      	b.n	8006ad6 <__swbuf_r+0x1a>
 8006b40:	4621      	mov	r1, r4
 8006b42:	4628      	mov	r0, r5
 8006b44:	f000 f81a 	bl	8006b7c <__swsetup_r>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d0cb      	beq.n	8006ae4 <__swbuf_r+0x28>
 8006b4c:	f04f 37ff 	mov.w	r7, #4294967295
 8006b50:	e7ea      	b.n	8006b28 <__swbuf_r+0x6c>
 8006b52:	bf00      	nop
 8006b54:	080096a4 	.word	0x080096a4
 8006b58:	080096c4 	.word	0x080096c4
 8006b5c:	08009684 	.word	0x08009684

08006b60 <__ascii_wctomb>:
 8006b60:	b149      	cbz	r1, 8006b76 <__ascii_wctomb+0x16>
 8006b62:	2aff      	cmp	r2, #255	; 0xff
 8006b64:	bf85      	ittet	hi
 8006b66:	238a      	movhi	r3, #138	; 0x8a
 8006b68:	6003      	strhi	r3, [r0, #0]
 8006b6a:	700a      	strbls	r2, [r1, #0]
 8006b6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006b70:	bf98      	it	ls
 8006b72:	2001      	movls	r0, #1
 8006b74:	4770      	bx	lr
 8006b76:	4608      	mov	r0, r1
 8006b78:	4770      	bx	lr
	...

08006b7c <__swsetup_r>:
 8006b7c:	4b32      	ldr	r3, [pc, #200]	; (8006c48 <__swsetup_r+0xcc>)
 8006b7e:	b570      	push	{r4, r5, r6, lr}
 8006b80:	681d      	ldr	r5, [r3, #0]
 8006b82:	4606      	mov	r6, r0
 8006b84:	460c      	mov	r4, r1
 8006b86:	b125      	cbz	r5, 8006b92 <__swsetup_r+0x16>
 8006b88:	69ab      	ldr	r3, [r5, #24]
 8006b8a:	b913      	cbnz	r3, 8006b92 <__swsetup_r+0x16>
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	f000 f985 	bl	8006e9c <__sinit>
 8006b92:	4b2e      	ldr	r3, [pc, #184]	; (8006c4c <__swsetup_r+0xd0>)
 8006b94:	429c      	cmp	r4, r3
 8006b96:	d10f      	bne.n	8006bb8 <__swsetup_r+0x3c>
 8006b98:	686c      	ldr	r4, [r5, #4]
 8006b9a:	89a3      	ldrh	r3, [r4, #12]
 8006b9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ba0:	0719      	lsls	r1, r3, #28
 8006ba2:	d42c      	bmi.n	8006bfe <__swsetup_r+0x82>
 8006ba4:	06dd      	lsls	r5, r3, #27
 8006ba6:	d411      	bmi.n	8006bcc <__swsetup_r+0x50>
 8006ba8:	2309      	movs	r3, #9
 8006baa:	6033      	str	r3, [r6, #0]
 8006bac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006bb0:	81a3      	strh	r3, [r4, #12]
 8006bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb6:	e03e      	b.n	8006c36 <__swsetup_r+0xba>
 8006bb8:	4b25      	ldr	r3, [pc, #148]	; (8006c50 <__swsetup_r+0xd4>)
 8006bba:	429c      	cmp	r4, r3
 8006bbc:	d101      	bne.n	8006bc2 <__swsetup_r+0x46>
 8006bbe:	68ac      	ldr	r4, [r5, #8]
 8006bc0:	e7eb      	b.n	8006b9a <__swsetup_r+0x1e>
 8006bc2:	4b24      	ldr	r3, [pc, #144]	; (8006c54 <__swsetup_r+0xd8>)
 8006bc4:	429c      	cmp	r4, r3
 8006bc6:	bf08      	it	eq
 8006bc8:	68ec      	ldreq	r4, [r5, #12]
 8006bca:	e7e6      	b.n	8006b9a <__swsetup_r+0x1e>
 8006bcc:	0758      	lsls	r0, r3, #29
 8006bce:	d512      	bpl.n	8006bf6 <__swsetup_r+0x7a>
 8006bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bd2:	b141      	cbz	r1, 8006be6 <__swsetup_r+0x6a>
 8006bd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bd8:	4299      	cmp	r1, r3
 8006bda:	d002      	beq.n	8006be2 <__swsetup_r+0x66>
 8006bdc:	4630      	mov	r0, r6
 8006bde:	f7ff fb31 	bl	8006244 <_free_r>
 8006be2:	2300      	movs	r3, #0
 8006be4:	6363      	str	r3, [r4, #52]	; 0x34
 8006be6:	89a3      	ldrh	r3, [r4, #12]
 8006be8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006bec:	81a3      	strh	r3, [r4, #12]
 8006bee:	2300      	movs	r3, #0
 8006bf0:	6063      	str	r3, [r4, #4]
 8006bf2:	6923      	ldr	r3, [r4, #16]
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	89a3      	ldrh	r3, [r4, #12]
 8006bf8:	f043 0308 	orr.w	r3, r3, #8
 8006bfc:	81a3      	strh	r3, [r4, #12]
 8006bfe:	6923      	ldr	r3, [r4, #16]
 8006c00:	b94b      	cbnz	r3, 8006c16 <__swsetup_r+0x9a>
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c0c:	d003      	beq.n	8006c16 <__swsetup_r+0x9a>
 8006c0e:	4621      	mov	r1, r4
 8006c10:	4630      	mov	r0, r6
 8006c12:	f000 fa09 	bl	8007028 <__smakebuf_r>
 8006c16:	89a0      	ldrh	r0, [r4, #12]
 8006c18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c1c:	f010 0301 	ands.w	r3, r0, #1
 8006c20:	d00a      	beq.n	8006c38 <__swsetup_r+0xbc>
 8006c22:	2300      	movs	r3, #0
 8006c24:	60a3      	str	r3, [r4, #8]
 8006c26:	6963      	ldr	r3, [r4, #20]
 8006c28:	425b      	negs	r3, r3
 8006c2a:	61a3      	str	r3, [r4, #24]
 8006c2c:	6923      	ldr	r3, [r4, #16]
 8006c2e:	b943      	cbnz	r3, 8006c42 <__swsetup_r+0xc6>
 8006c30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c34:	d1ba      	bne.n	8006bac <__swsetup_r+0x30>
 8006c36:	bd70      	pop	{r4, r5, r6, pc}
 8006c38:	0781      	lsls	r1, r0, #30
 8006c3a:	bf58      	it	pl
 8006c3c:	6963      	ldrpl	r3, [r4, #20]
 8006c3e:	60a3      	str	r3, [r4, #8]
 8006c40:	e7f4      	b.n	8006c2c <__swsetup_r+0xb0>
 8006c42:	2000      	movs	r0, #0
 8006c44:	e7f7      	b.n	8006c36 <__swsetup_r+0xba>
 8006c46:	bf00      	nop
 8006c48:	2000000c 	.word	0x2000000c
 8006c4c:	080096a4 	.word	0x080096a4
 8006c50:	080096c4 	.word	0x080096c4
 8006c54:	08009684 	.word	0x08009684

08006c58 <abort>:
 8006c58:	b508      	push	{r3, lr}
 8006c5a:	2006      	movs	r0, #6
 8006c5c:	f000 fa54 	bl	8007108 <raise>
 8006c60:	2001      	movs	r0, #1
 8006c62:	f7fb f9e3 	bl	800202c <_exit>
	...

08006c68 <__sflush_r>:
 8006c68:	898a      	ldrh	r2, [r1, #12]
 8006c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c6e:	4605      	mov	r5, r0
 8006c70:	0710      	lsls	r0, r2, #28
 8006c72:	460c      	mov	r4, r1
 8006c74:	d458      	bmi.n	8006d28 <__sflush_r+0xc0>
 8006c76:	684b      	ldr	r3, [r1, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	dc05      	bgt.n	8006c88 <__sflush_r+0x20>
 8006c7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	dc02      	bgt.n	8006c88 <__sflush_r+0x20>
 8006c82:	2000      	movs	r0, #0
 8006c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c8a:	2e00      	cmp	r6, #0
 8006c8c:	d0f9      	beq.n	8006c82 <__sflush_r+0x1a>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c94:	682f      	ldr	r7, [r5, #0]
 8006c96:	602b      	str	r3, [r5, #0]
 8006c98:	d032      	beq.n	8006d00 <__sflush_r+0x98>
 8006c9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c9c:	89a3      	ldrh	r3, [r4, #12]
 8006c9e:	075a      	lsls	r2, r3, #29
 8006ca0:	d505      	bpl.n	8006cae <__sflush_r+0x46>
 8006ca2:	6863      	ldr	r3, [r4, #4]
 8006ca4:	1ac0      	subs	r0, r0, r3
 8006ca6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ca8:	b10b      	cbz	r3, 8006cae <__sflush_r+0x46>
 8006caa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cac:	1ac0      	subs	r0, r0, r3
 8006cae:	2300      	movs	r3, #0
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cb4:	6a21      	ldr	r1, [r4, #32]
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	47b0      	blx	r6
 8006cba:	1c43      	adds	r3, r0, #1
 8006cbc:	89a3      	ldrh	r3, [r4, #12]
 8006cbe:	d106      	bne.n	8006cce <__sflush_r+0x66>
 8006cc0:	6829      	ldr	r1, [r5, #0]
 8006cc2:	291d      	cmp	r1, #29
 8006cc4:	d82c      	bhi.n	8006d20 <__sflush_r+0xb8>
 8006cc6:	4a2a      	ldr	r2, [pc, #168]	; (8006d70 <__sflush_r+0x108>)
 8006cc8:	40ca      	lsrs	r2, r1
 8006cca:	07d6      	lsls	r6, r2, #31
 8006ccc:	d528      	bpl.n	8006d20 <__sflush_r+0xb8>
 8006cce:	2200      	movs	r2, #0
 8006cd0:	6062      	str	r2, [r4, #4]
 8006cd2:	04d9      	lsls	r1, r3, #19
 8006cd4:	6922      	ldr	r2, [r4, #16]
 8006cd6:	6022      	str	r2, [r4, #0]
 8006cd8:	d504      	bpl.n	8006ce4 <__sflush_r+0x7c>
 8006cda:	1c42      	adds	r2, r0, #1
 8006cdc:	d101      	bne.n	8006ce2 <__sflush_r+0x7a>
 8006cde:	682b      	ldr	r3, [r5, #0]
 8006ce0:	b903      	cbnz	r3, 8006ce4 <__sflush_r+0x7c>
 8006ce2:	6560      	str	r0, [r4, #84]	; 0x54
 8006ce4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ce6:	602f      	str	r7, [r5, #0]
 8006ce8:	2900      	cmp	r1, #0
 8006cea:	d0ca      	beq.n	8006c82 <__sflush_r+0x1a>
 8006cec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cf0:	4299      	cmp	r1, r3
 8006cf2:	d002      	beq.n	8006cfa <__sflush_r+0x92>
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	f7ff faa5 	bl	8006244 <_free_r>
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	6360      	str	r0, [r4, #52]	; 0x34
 8006cfe:	e7c1      	b.n	8006c84 <__sflush_r+0x1c>
 8006d00:	6a21      	ldr	r1, [r4, #32]
 8006d02:	2301      	movs	r3, #1
 8006d04:	4628      	mov	r0, r5
 8006d06:	47b0      	blx	r6
 8006d08:	1c41      	adds	r1, r0, #1
 8006d0a:	d1c7      	bne.n	8006c9c <__sflush_r+0x34>
 8006d0c:	682b      	ldr	r3, [r5, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d0c4      	beq.n	8006c9c <__sflush_r+0x34>
 8006d12:	2b1d      	cmp	r3, #29
 8006d14:	d001      	beq.n	8006d1a <__sflush_r+0xb2>
 8006d16:	2b16      	cmp	r3, #22
 8006d18:	d101      	bne.n	8006d1e <__sflush_r+0xb6>
 8006d1a:	602f      	str	r7, [r5, #0]
 8006d1c:	e7b1      	b.n	8006c82 <__sflush_r+0x1a>
 8006d1e:	89a3      	ldrh	r3, [r4, #12]
 8006d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d24:	81a3      	strh	r3, [r4, #12]
 8006d26:	e7ad      	b.n	8006c84 <__sflush_r+0x1c>
 8006d28:	690f      	ldr	r7, [r1, #16]
 8006d2a:	2f00      	cmp	r7, #0
 8006d2c:	d0a9      	beq.n	8006c82 <__sflush_r+0x1a>
 8006d2e:	0793      	lsls	r3, r2, #30
 8006d30:	680e      	ldr	r6, [r1, #0]
 8006d32:	bf08      	it	eq
 8006d34:	694b      	ldreq	r3, [r1, #20]
 8006d36:	600f      	str	r7, [r1, #0]
 8006d38:	bf18      	it	ne
 8006d3a:	2300      	movne	r3, #0
 8006d3c:	eba6 0807 	sub.w	r8, r6, r7
 8006d40:	608b      	str	r3, [r1, #8]
 8006d42:	f1b8 0f00 	cmp.w	r8, #0
 8006d46:	dd9c      	ble.n	8006c82 <__sflush_r+0x1a>
 8006d48:	6a21      	ldr	r1, [r4, #32]
 8006d4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d4c:	4643      	mov	r3, r8
 8006d4e:	463a      	mov	r2, r7
 8006d50:	4628      	mov	r0, r5
 8006d52:	47b0      	blx	r6
 8006d54:	2800      	cmp	r0, #0
 8006d56:	dc06      	bgt.n	8006d66 <__sflush_r+0xfe>
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d5e:	81a3      	strh	r3, [r4, #12]
 8006d60:	f04f 30ff 	mov.w	r0, #4294967295
 8006d64:	e78e      	b.n	8006c84 <__sflush_r+0x1c>
 8006d66:	4407      	add	r7, r0
 8006d68:	eba8 0800 	sub.w	r8, r8, r0
 8006d6c:	e7e9      	b.n	8006d42 <__sflush_r+0xda>
 8006d6e:	bf00      	nop
 8006d70:	20400001 	.word	0x20400001

08006d74 <_fflush_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	690b      	ldr	r3, [r1, #16]
 8006d78:	4605      	mov	r5, r0
 8006d7a:	460c      	mov	r4, r1
 8006d7c:	b913      	cbnz	r3, 8006d84 <_fflush_r+0x10>
 8006d7e:	2500      	movs	r5, #0
 8006d80:	4628      	mov	r0, r5
 8006d82:	bd38      	pop	{r3, r4, r5, pc}
 8006d84:	b118      	cbz	r0, 8006d8e <_fflush_r+0x1a>
 8006d86:	6983      	ldr	r3, [r0, #24]
 8006d88:	b90b      	cbnz	r3, 8006d8e <_fflush_r+0x1a>
 8006d8a:	f000 f887 	bl	8006e9c <__sinit>
 8006d8e:	4b14      	ldr	r3, [pc, #80]	; (8006de0 <_fflush_r+0x6c>)
 8006d90:	429c      	cmp	r4, r3
 8006d92:	d11b      	bne.n	8006dcc <_fflush_r+0x58>
 8006d94:	686c      	ldr	r4, [r5, #4]
 8006d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d0ef      	beq.n	8006d7e <_fflush_r+0xa>
 8006d9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006da0:	07d0      	lsls	r0, r2, #31
 8006da2:	d404      	bmi.n	8006dae <_fflush_r+0x3a>
 8006da4:	0599      	lsls	r1, r3, #22
 8006da6:	d402      	bmi.n	8006dae <_fflush_r+0x3a>
 8006da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006daa:	f000 f915 	bl	8006fd8 <__retarget_lock_acquire_recursive>
 8006dae:	4628      	mov	r0, r5
 8006db0:	4621      	mov	r1, r4
 8006db2:	f7ff ff59 	bl	8006c68 <__sflush_r>
 8006db6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006db8:	07da      	lsls	r2, r3, #31
 8006dba:	4605      	mov	r5, r0
 8006dbc:	d4e0      	bmi.n	8006d80 <_fflush_r+0xc>
 8006dbe:	89a3      	ldrh	r3, [r4, #12]
 8006dc0:	059b      	lsls	r3, r3, #22
 8006dc2:	d4dd      	bmi.n	8006d80 <_fflush_r+0xc>
 8006dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dc6:	f000 f908 	bl	8006fda <__retarget_lock_release_recursive>
 8006dca:	e7d9      	b.n	8006d80 <_fflush_r+0xc>
 8006dcc:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <_fflush_r+0x70>)
 8006dce:	429c      	cmp	r4, r3
 8006dd0:	d101      	bne.n	8006dd6 <_fflush_r+0x62>
 8006dd2:	68ac      	ldr	r4, [r5, #8]
 8006dd4:	e7df      	b.n	8006d96 <_fflush_r+0x22>
 8006dd6:	4b04      	ldr	r3, [pc, #16]	; (8006de8 <_fflush_r+0x74>)
 8006dd8:	429c      	cmp	r4, r3
 8006dda:	bf08      	it	eq
 8006ddc:	68ec      	ldreq	r4, [r5, #12]
 8006dde:	e7da      	b.n	8006d96 <_fflush_r+0x22>
 8006de0:	080096a4 	.word	0x080096a4
 8006de4:	080096c4 	.word	0x080096c4
 8006de8:	08009684 	.word	0x08009684

08006dec <std>:
 8006dec:	2300      	movs	r3, #0
 8006dee:	b510      	push	{r4, lr}
 8006df0:	4604      	mov	r4, r0
 8006df2:	e9c0 3300 	strd	r3, r3, [r0]
 8006df6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dfa:	6083      	str	r3, [r0, #8]
 8006dfc:	8181      	strh	r1, [r0, #12]
 8006dfe:	6643      	str	r3, [r0, #100]	; 0x64
 8006e00:	81c2      	strh	r2, [r0, #14]
 8006e02:	6183      	str	r3, [r0, #24]
 8006e04:	4619      	mov	r1, r3
 8006e06:	2208      	movs	r2, #8
 8006e08:	305c      	adds	r0, #92	; 0x5c
 8006e0a:	f7fd fb5b 	bl	80044c4 <memset>
 8006e0e:	4b05      	ldr	r3, [pc, #20]	; (8006e24 <std+0x38>)
 8006e10:	6263      	str	r3, [r4, #36]	; 0x24
 8006e12:	4b05      	ldr	r3, [pc, #20]	; (8006e28 <std+0x3c>)
 8006e14:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e16:	4b05      	ldr	r3, [pc, #20]	; (8006e2c <std+0x40>)
 8006e18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e1a:	4b05      	ldr	r3, [pc, #20]	; (8006e30 <std+0x44>)
 8006e1c:	6224      	str	r4, [r4, #32]
 8006e1e:	6323      	str	r3, [r4, #48]	; 0x30
 8006e20:	bd10      	pop	{r4, pc}
 8006e22:	bf00      	nop
 8006e24:	08007141 	.word	0x08007141
 8006e28:	08007163 	.word	0x08007163
 8006e2c:	0800719b 	.word	0x0800719b
 8006e30:	080071bf 	.word	0x080071bf

08006e34 <_cleanup_r>:
 8006e34:	4901      	ldr	r1, [pc, #4]	; (8006e3c <_cleanup_r+0x8>)
 8006e36:	f000 b8af 	b.w	8006f98 <_fwalk_reent>
 8006e3a:	bf00      	nop
 8006e3c:	08006d75 	.word	0x08006d75

08006e40 <__sfmoreglue>:
 8006e40:	b570      	push	{r4, r5, r6, lr}
 8006e42:	2268      	movs	r2, #104	; 0x68
 8006e44:	1e4d      	subs	r5, r1, #1
 8006e46:	4355      	muls	r5, r2
 8006e48:	460e      	mov	r6, r1
 8006e4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e4e:	f7ff fa65 	bl	800631c <_malloc_r>
 8006e52:	4604      	mov	r4, r0
 8006e54:	b140      	cbz	r0, 8006e68 <__sfmoreglue+0x28>
 8006e56:	2100      	movs	r1, #0
 8006e58:	e9c0 1600 	strd	r1, r6, [r0]
 8006e5c:	300c      	adds	r0, #12
 8006e5e:	60a0      	str	r0, [r4, #8]
 8006e60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e64:	f7fd fb2e 	bl	80044c4 <memset>
 8006e68:	4620      	mov	r0, r4
 8006e6a:	bd70      	pop	{r4, r5, r6, pc}

08006e6c <__sfp_lock_acquire>:
 8006e6c:	4801      	ldr	r0, [pc, #4]	; (8006e74 <__sfp_lock_acquire+0x8>)
 8006e6e:	f000 b8b3 	b.w	8006fd8 <__retarget_lock_acquire_recursive>
 8006e72:	bf00      	nop
 8006e74:	200003c1 	.word	0x200003c1

08006e78 <__sfp_lock_release>:
 8006e78:	4801      	ldr	r0, [pc, #4]	; (8006e80 <__sfp_lock_release+0x8>)
 8006e7a:	f000 b8ae 	b.w	8006fda <__retarget_lock_release_recursive>
 8006e7e:	bf00      	nop
 8006e80:	200003c1 	.word	0x200003c1

08006e84 <__sinit_lock_acquire>:
 8006e84:	4801      	ldr	r0, [pc, #4]	; (8006e8c <__sinit_lock_acquire+0x8>)
 8006e86:	f000 b8a7 	b.w	8006fd8 <__retarget_lock_acquire_recursive>
 8006e8a:	bf00      	nop
 8006e8c:	200003c2 	.word	0x200003c2

08006e90 <__sinit_lock_release>:
 8006e90:	4801      	ldr	r0, [pc, #4]	; (8006e98 <__sinit_lock_release+0x8>)
 8006e92:	f000 b8a2 	b.w	8006fda <__retarget_lock_release_recursive>
 8006e96:	bf00      	nop
 8006e98:	200003c2 	.word	0x200003c2

08006e9c <__sinit>:
 8006e9c:	b510      	push	{r4, lr}
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	f7ff fff0 	bl	8006e84 <__sinit_lock_acquire>
 8006ea4:	69a3      	ldr	r3, [r4, #24]
 8006ea6:	b11b      	cbz	r3, 8006eb0 <__sinit+0x14>
 8006ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eac:	f7ff bff0 	b.w	8006e90 <__sinit_lock_release>
 8006eb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006eb4:	6523      	str	r3, [r4, #80]	; 0x50
 8006eb6:	4b13      	ldr	r3, [pc, #76]	; (8006f04 <__sinit+0x68>)
 8006eb8:	4a13      	ldr	r2, [pc, #76]	; (8006f08 <__sinit+0x6c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ebe:	42a3      	cmp	r3, r4
 8006ec0:	bf04      	itt	eq
 8006ec2:	2301      	moveq	r3, #1
 8006ec4:	61a3      	streq	r3, [r4, #24]
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f000 f820 	bl	8006f0c <__sfp>
 8006ecc:	6060      	str	r0, [r4, #4]
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f000 f81c 	bl	8006f0c <__sfp>
 8006ed4:	60a0      	str	r0, [r4, #8]
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f000 f818 	bl	8006f0c <__sfp>
 8006edc:	2200      	movs	r2, #0
 8006ede:	60e0      	str	r0, [r4, #12]
 8006ee0:	2104      	movs	r1, #4
 8006ee2:	6860      	ldr	r0, [r4, #4]
 8006ee4:	f7ff ff82 	bl	8006dec <std>
 8006ee8:	68a0      	ldr	r0, [r4, #8]
 8006eea:	2201      	movs	r2, #1
 8006eec:	2109      	movs	r1, #9
 8006eee:	f7ff ff7d 	bl	8006dec <std>
 8006ef2:	68e0      	ldr	r0, [r4, #12]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	2112      	movs	r1, #18
 8006ef8:	f7ff ff78 	bl	8006dec <std>
 8006efc:	2301      	movs	r3, #1
 8006efe:	61a3      	str	r3, [r4, #24]
 8006f00:	e7d2      	b.n	8006ea8 <__sinit+0xc>
 8006f02:	bf00      	nop
 8006f04:	0800930c 	.word	0x0800930c
 8006f08:	08006e35 	.word	0x08006e35

08006f0c <__sfp>:
 8006f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0e:	4607      	mov	r7, r0
 8006f10:	f7ff ffac 	bl	8006e6c <__sfp_lock_acquire>
 8006f14:	4b1e      	ldr	r3, [pc, #120]	; (8006f90 <__sfp+0x84>)
 8006f16:	681e      	ldr	r6, [r3, #0]
 8006f18:	69b3      	ldr	r3, [r6, #24]
 8006f1a:	b913      	cbnz	r3, 8006f22 <__sfp+0x16>
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	f7ff ffbd 	bl	8006e9c <__sinit>
 8006f22:	3648      	adds	r6, #72	; 0x48
 8006f24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	d503      	bpl.n	8006f34 <__sfp+0x28>
 8006f2c:	6833      	ldr	r3, [r6, #0]
 8006f2e:	b30b      	cbz	r3, 8006f74 <__sfp+0x68>
 8006f30:	6836      	ldr	r6, [r6, #0]
 8006f32:	e7f7      	b.n	8006f24 <__sfp+0x18>
 8006f34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f38:	b9d5      	cbnz	r5, 8006f70 <__sfp+0x64>
 8006f3a:	4b16      	ldr	r3, [pc, #88]	; (8006f94 <__sfp+0x88>)
 8006f3c:	60e3      	str	r3, [r4, #12]
 8006f3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f42:	6665      	str	r5, [r4, #100]	; 0x64
 8006f44:	f000 f847 	bl	8006fd6 <__retarget_lock_init_recursive>
 8006f48:	f7ff ff96 	bl	8006e78 <__sfp_lock_release>
 8006f4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f54:	6025      	str	r5, [r4, #0]
 8006f56:	61a5      	str	r5, [r4, #24]
 8006f58:	2208      	movs	r2, #8
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f60:	f7fd fab0 	bl	80044c4 <memset>
 8006f64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f70:	3468      	adds	r4, #104	; 0x68
 8006f72:	e7d9      	b.n	8006f28 <__sfp+0x1c>
 8006f74:	2104      	movs	r1, #4
 8006f76:	4638      	mov	r0, r7
 8006f78:	f7ff ff62 	bl	8006e40 <__sfmoreglue>
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	6030      	str	r0, [r6, #0]
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d1d5      	bne.n	8006f30 <__sfp+0x24>
 8006f84:	f7ff ff78 	bl	8006e78 <__sfp_lock_release>
 8006f88:	230c      	movs	r3, #12
 8006f8a:	603b      	str	r3, [r7, #0]
 8006f8c:	e7ee      	b.n	8006f6c <__sfp+0x60>
 8006f8e:	bf00      	nop
 8006f90:	0800930c 	.word	0x0800930c
 8006f94:	ffff0001 	.word	0xffff0001

08006f98 <_fwalk_reent>:
 8006f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f9c:	4606      	mov	r6, r0
 8006f9e:	4688      	mov	r8, r1
 8006fa0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fa4:	2700      	movs	r7, #0
 8006fa6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006faa:	f1b9 0901 	subs.w	r9, r9, #1
 8006fae:	d505      	bpl.n	8006fbc <_fwalk_reent+0x24>
 8006fb0:	6824      	ldr	r4, [r4, #0]
 8006fb2:	2c00      	cmp	r4, #0
 8006fb4:	d1f7      	bne.n	8006fa6 <_fwalk_reent+0xe>
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fbc:	89ab      	ldrh	r3, [r5, #12]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d907      	bls.n	8006fd2 <_fwalk_reent+0x3a>
 8006fc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	d003      	beq.n	8006fd2 <_fwalk_reent+0x3a>
 8006fca:	4629      	mov	r1, r5
 8006fcc:	4630      	mov	r0, r6
 8006fce:	47c0      	blx	r8
 8006fd0:	4307      	orrs	r7, r0
 8006fd2:	3568      	adds	r5, #104	; 0x68
 8006fd4:	e7e9      	b.n	8006faa <_fwalk_reent+0x12>

08006fd6 <__retarget_lock_init_recursive>:
 8006fd6:	4770      	bx	lr

08006fd8 <__retarget_lock_acquire_recursive>:
 8006fd8:	4770      	bx	lr

08006fda <__retarget_lock_release_recursive>:
 8006fda:	4770      	bx	lr

08006fdc <__swhatbuf_r>:
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	460e      	mov	r6, r1
 8006fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe4:	2900      	cmp	r1, #0
 8006fe6:	b096      	sub	sp, #88	; 0x58
 8006fe8:	4614      	mov	r4, r2
 8006fea:	461d      	mov	r5, r3
 8006fec:	da08      	bge.n	8007000 <__swhatbuf_r+0x24>
 8006fee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	602a      	str	r2, [r5, #0]
 8006ff6:	061a      	lsls	r2, r3, #24
 8006ff8:	d410      	bmi.n	800701c <__swhatbuf_r+0x40>
 8006ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ffe:	e00e      	b.n	800701e <__swhatbuf_r+0x42>
 8007000:	466a      	mov	r2, sp
 8007002:	f000 f903 	bl	800720c <_fstat_r>
 8007006:	2800      	cmp	r0, #0
 8007008:	dbf1      	blt.n	8006fee <__swhatbuf_r+0x12>
 800700a:	9a01      	ldr	r2, [sp, #4]
 800700c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007010:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007014:	425a      	negs	r2, r3
 8007016:	415a      	adcs	r2, r3
 8007018:	602a      	str	r2, [r5, #0]
 800701a:	e7ee      	b.n	8006ffa <__swhatbuf_r+0x1e>
 800701c:	2340      	movs	r3, #64	; 0x40
 800701e:	2000      	movs	r0, #0
 8007020:	6023      	str	r3, [r4, #0]
 8007022:	b016      	add	sp, #88	; 0x58
 8007024:	bd70      	pop	{r4, r5, r6, pc}
	...

08007028 <__smakebuf_r>:
 8007028:	898b      	ldrh	r3, [r1, #12]
 800702a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800702c:	079d      	lsls	r5, r3, #30
 800702e:	4606      	mov	r6, r0
 8007030:	460c      	mov	r4, r1
 8007032:	d507      	bpl.n	8007044 <__smakebuf_r+0x1c>
 8007034:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	6123      	str	r3, [r4, #16]
 800703c:	2301      	movs	r3, #1
 800703e:	6163      	str	r3, [r4, #20]
 8007040:	b002      	add	sp, #8
 8007042:	bd70      	pop	{r4, r5, r6, pc}
 8007044:	ab01      	add	r3, sp, #4
 8007046:	466a      	mov	r2, sp
 8007048:	f7ff ffc8 	bl	8006fdc <__swhatbuf_r>
 800704c:	9900      	ldr	r1, [sp, #0]
 800704e:	4605      	mov	r5, r0
 8007050:	4630      	mov	r0, r6
 8007052:	f7ff f963 	bl	800631c <_malloc_r>
 8007056:	b948      	cbnz	r0, 800706c <__smakebuf_r+0x44>
 8007058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800705c:	059a      	lsls	r2, r3, #22
 800705e:	d4ef      	bmi.n	8007040 <__smakebuf_r+0x18>
 8007060:	f023 0303 	bic.w	r3, r3, #3
 8007064:	f043 0302 	orr.w	r3, r3, #2
 8007068:	81a3      	strh	r3, [r4, #12]
 800706a:	e7e3      	b.n	8007034 <__smakebuf_r+0xc>
 800706c:	4b0d      	ldr	r3, [pc, #52]	; (80070a4 <__smakebuf_r+0x7c>)
 800706e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007070:	89a3      	ldrh	r3, [r4, #12]
 8007072:	6020      	str	r0, [r4, #0]
 8007074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007078:	81a3      	strh	r3, [r4, #12]
 800707a:	9b00      	ldr	r3, [sp, #0]
 800707c:	6163      	str	r3, [r4, #20]
 800707e:	9b01      	ldr	r3, [sp, #4]
 8007080:	6120      	str	r0, [r4, #16]
 8007082:	b15b      	cbz	r3, 800709c <__smakebuf_r+0x74>
 8007084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007088:	4630      	mov	r0, r6
 800708a:	f000 f8d1 	bl	8007230 <_isatty_r>
 800708e:	b128      	cbz	r0, 800709c <__smakebuf_r+0x74>
 8007090:	89a3      	ldrh	r3, [r4, #12]
 8007092:	f023 0303 	bic.w	r3, r3, #3
 8007096:	f043 0301 	orr.w	r3, r3, #1
 800709a:	81a3      	strh	r3, [r4, #12]
 800709c:	89a0      	ldrh	r0, [r4, #12]
 800709e:	4305      	orrs	r5, r0
 80070a0:	81a5      	strh	r5, [r4, #12]
 80070a2:	e7cd      	b.n	8007040 <__smakebuf_r+0x18>
 80070a4:	08006e35 	.word	0x08006e35

080070a8 <_malloc_usable_size_r>:
 80070a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070ac:	1f18      	subs	r0, r3, #4
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	bfbc      	itt	lt
 80070b2:	580b      	ldrlt	r3, [r1, r0]
 80070b4:	18c0      	addlt	r0, r0, r3
 80070b6:	4770      	bx	lr

080070b8 <_raise_r>:
 80070b8:	291f      	cmp	r1, #31
 80070ba:	b538      	push	{r3, r4, r5, lr}
 80070bc:	4604      	mov	r4, r0
 80070be:	460d      	mov	r5, r1
 80070c0:	d904      	bls.n	80070cc <_raise_r+0x14>
 80070c2:	2316      	movs	r3, #22
 80070c4:	6003      	str	r3, [r0, #0]
 80070c6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ca:	bd38      	pop	{r3, r4, r5, pc}
 80070cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80070ce:	b112      	cbz	r2, 80070d6 <_raise_r+0x1e>
 80070d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070d4:	b94b      	cbnz	r3, 80070ea <_raise_r+0x32>
 80070d6:	4620      	mov	r0, r4
 80070d8:	f000 f830 	bl	800713c <_getpid_r>
 80070dc:	462a      	mov	r2, r5
 80070de:	4601      	mov	r1, r0
 80070e0:	4620      	mov	r0, r4
 80070e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070e6:	f000 b817 	b.w	8007118 <_kill_r>
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d00a      	beq.n	8007104 <_raise_r+0x4c>
 80070ee:	1c59      	adds	r1, r3, #1
 80070f0:	d103      	bne.n	80070fa <_raise_r+0x42>
 80070f2:	2316      	movs	r3, #22
 80070f4:	6003      	str	r3, [r0, #0]
 80070f6:	2001      	movs	r0, #1
 80070f8:	e7e7      	b.n	80070ca <_raise_r+0x12>
 80070fa:	2400      	movs	r4, #0
 80070fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007100:	4628      	mov	r0, r5
 8007102:	4798      	blx	r3
 8007104:	2000      	movs	r0, #0
 8007106:	e7e0      	b.n	80070ca <_raise_r+0x12>

08007108 <raise>:
 8007108:	4b02      	ldr	r3, [pc, #8]	; (8007114 <raise+0xc>)
 800710a:	4601      	mov	r1, r0
 800710c:	6818      	ldr	r0, [r3, #0]
 800710e:	f7ff bfd3 	b.w	80070b8 <_raise_r>
 8007112:	bf00      	nop
 8007114:	2000000c 	.word	0x2000000c

08007118 <_kill_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	4d07      	ldr	r5, [pc, #28]	; (8007138 <_kill_r+0x20>)
 800711c:	2300      	movs	r3, #0
 800711e:	4604      	mov	r4, r0
 8007120:	4608      	mov	r0, r1
 8007122:	4611      	mov	r1, r2
 8007124:	602b      	str	r3, [r5, #0]
 8007126:	f7fa ff71 	bl	800200c <_kill>
 800712a:	1c43      	adds	r3, r0, #1
 800712c:	d102      	bne.n	8007134 <_kill_r+0x1c>
 800712e:	682b      	ldr	r3, [r5, #0]
 8007130:	b103      	cbz	r3, 8007134 <_kill_r+0x1c>
 8007132:	6023      	str	r3, [r4, #0]
 8007134:	bd38      	pop	{r3, r4, r5, pc}
 8007136:	bf00      	nop
 8007138:	200003bc 	.word	0x200003bc

0800713c <_getpid_r>:
 800713c:	f7fa bf5e 	b.w	8001ffc <_getpid>

08007140 <__sread>:
 8007140:	b510      	push	{r4, lr}
 8007142:	460c      	mov	r4, r1
 8007144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007148:	f000 f894 	bl	8007274 <_read_r>
 800714c:	2800      	cmp	r0, #0
 800714e:	bfab      	itete	ge
 8007150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007152:	89a3      	ldrhlt	r3, [r4, #12]
 8007154:	181b      	addge	r3, r3, r0
 8007156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800715a:	bfac      	ite	ge
 800715c:	6563      	strge	r3, [r4, #84]	; 0x54
 800715e:	81a3      	strhlt	r3, [r4, #12]
 8007160:	bd10      	pop	{r4, pc}

08007162 <__swrite>:
 8007162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007166:	461f      	mov	r7, r3
 8007168:	898b      	ldrh	r3, [r1, #12]
 800716a:	05db      	lsls	r3, r3, #23
 800716c:	4605      	mov	r5, r0
 800716e:	460c      	mov	r4, r1
 8007170:	4616      	mov	r6, r2
 8007172:	d505      	bpl.n	8007180 <__swrite+0x1e>
 8007174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007178:	2302      	movs	r3, #2
 800717a:	2200      	movs	r2, #0
 800717c:	f000 f868 	bl	8007250 <_lseek_r>
 8007180:	89a3      	ldrh	r3, [r4, #12]
 8007182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007186:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800718a:	81a3      	strh	r3, [r4, #12]
 800718c:	4632      	mov	r2, r6
 800718e:	463b      	mov	r3, r7
 8007190:	4628      	mov	r0, r5
 8007192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007196:	f000 b817 	b.w	80071c8 <_write_r>

0800719a <__sseek>:
 800719a:	b510      	push	{r4, lr}
 800719c:	460c      	mov	r4, r1
 800719e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a2:	f000 f855 	bl	8007250 <_lseek_r>
 80071a6:	1c43      	adds	r3, r0, #1
 80071a8:	89a3      	ldrh	r3, [r4, #12]
 80071aa:	bf15      	itete	ne
 80071ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80071ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071b6:	81a3      	strheq	r3, [r4, #12]
 80071b8:	bf18      	it	ne
 80071ba:	81a3      	strhne	r3, [r4, #12]
 80071bc:	bd10      	pop	{r4, pc}

080071be <__sclose>:
 80071be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c2:	f000 b813 	b.w	80071ec <_close_r>
	...

080071c8 <_write_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	4d07      	ldr	r5, [pc, #28]	; (80071e8 <_write_r+0x20>)
 80071cc:	4604      	mov	r4, r0
 80071ce:	4608      	mov	r0, r1
 80071d0:	4611      	mov	r1, r2
 80071d2:	2200      	movs	r2, #0
 80071d4:	602a      	str	r2, [r5, #0]
 80071d6:	461a      	mov	r2, r3
 80071d8:	f7fa ff4f 	bl	800207a <_write>
 80071dc:	1c43      	adds	r3, r0, #1
 80071de:	d102      	bne.n	80071e6 <_write_r+0x1e>
 80071e0:	682b      	ldr	r3, [r5, #0]
 80071e2:	b103      	cbz	r3, 80071e6 <_write_r+0x1e>
 80071e4:	6023      	str	r3, [r4, #0]
 80071e6:	bd38      	pop	{r3, r4, r5, pc}
 80071e8:	200003bc 	.word	0x200003bc

080071ec <_close_r>:
 80071ec:	b538      	push	{r3, r4, r5, lr}
 80071ee:	4d06      	ldr	r5, [pc, #24]	; (8007208 <_close_r+0x1c>)
 80071f0:	2300      	movs	r3, #0
 80071f2:	4604      	mov	r4, r0
 80071f4:	4608      	mov	r0, r1
 80071f6:	602b      	str	r3, [r5, #0]
 80071f8:	f7fa ff5b 	bl	80020b2 <_close>
 80071fc:	1c43      	adds	r3, r0, #1
 80071fe:	d102      	bne.n	8007206 <_close_r+0x1a>
 8007200:	682b      	ldr	r3, [r5, #0]
 8007202:	b103      	cbz	r3, 8007206 <_close_r+0x1a>
 8007204:	6023      	str	r3, [r4, #0]
 8007206:	bd38      	pop	{r3, r4, r5, pc}
 8007208:	200003bc 	.word	0x200003bc

0800720c <_fstat_r>:
 800720c:	b538      	push	{r3, r4, r5, lr}
 800720e:	4d07      	ldr	r5, [pc, #28]	; (800722c <_fstat_r+0x20>)
 8007210:	2300      	movs	r3, #0
 8007212:	4604      	mov	r4, r0
 8007214:	4608      	mov	r0, r1
 8007216:	4611      	mov	r1, r2
 8007218:	602b      	str	r3, [r5, #0]
 800721a:	f7fa ff56 	bl	80020ca <_fstat>
 800721e:	1c43      	adds	r3, r0, #1
 8007220:	d102      	bne.n	8007228 <_fstat_r+0x1c>
 8007222:	682b      	ldr	r3, [r5, #0]
 8007224:	b103      	cbz	r3, 8007228 <_fstat_r+0x1c>
 8007226:	6023      	str	r3, [r4, #0]
 8007228:	bd38      	pop	{r3, r4, r5, pc}
 800722a:	bf00      	nop
 800722c:	200003bc 	.word	0x200003bc

08007230 <_isatty_r>:
 8007230:	b538      	push	{r3, r4, r5, lr}
 8007232:	4d06      	ldr	r5, [pc, #24]	; (800724c <_isatty_r+0x1c>)
 8007234:	2300      	movs	r3, #0
 8007236:	4604      	mov	r4, r0
 8007238:	4608      	mov	r0, r1
 800723a:	602b      	str	r3, [r5, #0]
 800723c:	f7fa ff55 	bl	80020ea <_isatty>
 8007240:	1c43      	adds	r3, r0, #1
 8007242:	d102      	bne.n	800724a <_isatty_r+0x1a>
 8007244:	682b      	ldr	r3, [r5, #0]
 8007246:	b103      	cbz	r3, 800724a <_isatty_r+0x1a>
 8007248:	6023      	str	r3, [r4, #0]
 800724a:	bd38      	pop	{r3, r4, r5, pc}
 800724c:	200003bc 	.word	0x200003bc

08007250 <_lseek_r>:
 8007250:	b538      	push	{r3, r4, r5, lr}
 8007252:	4d07      	ldr	r5, [pc, #28]	; (8007270 <_lseek_r+0x20>)
 8007254:	4604      	mov	r4, r0
 8007256:	4608      	mov	r0, r1
 8007258:	4611      	mov	r1, r2
 800725a:	2200      	movs	r2, #0
 800725c:	602a      	str	r2, [r5, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	f7fa ff4e 	bl	8002100 <_lseek>
 8007264:	1c43      	adds	r3, r0, #1
 8007266:	d102      	bne.n	800726e <_lseek_r+0x1e>
 8007268:	682b      	ldr	r3, [r5, #0]
 800726a:	b103      	cbz	r3, 800726e <_lseek_r+0x1e>
 800726c:	6023      	str	r3, [r4, #0]
 800726e:	bd38      	pop	{r3, r4, r5, pc}
 8007270:	200003bc 	.word	0x200003bc

08007274 <_read_r>:
 8007274:	b538      	push	{r3, r4, r5, lr}
 8007276:	4d07      	ldr	r5, [pc, #28]	; (8007294 <_read_r+0x20>)
 8007278:	4604      	mov	r4, r0
 800727a:	4608      	mov	r0, r1
 800727c:	4611      	mov	r1, r2
 800727e:	2200      	movs	r2, #0
 8007280:	602a      	str	r2, [r5, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	f7fa fedc 	bl	8002040 <_read>
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	d102      	bne.n	8007292 <_read_r+0x1e>
 800728c:	682b      	ldr	r3, [r5, #0]
 800728e:	b103      	cbz	r3, 8007292 <_read_r+0x1e>
 8007290:	6023      	str	r3, [r4, #0]
 8007292:	bd38      	pop	{r3, r4, r5, pc}
 8007294:	200003bc 	.word	0x200003bc

08007298 <cos>:
 8007298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800729a:	ec53 2b10 	vmov	r2, r3, d0
 800729e:	4826      	ldr	r0, [pc, #152]	; (8007338 <cos+0xa0>)
 80072a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80072a4:	4281      	cmp	r1, r0
 80072a6:	dc06      	bgt.n	80072b6 <cos+0x1e>
 80072a8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007330 <cos+0x98>
 80072ac:	b005      	add	sp, #20
 80072ae:	f85d eb04 	ldr.w	lr, [sp], #4
 80072b2:	f001 b9e5 	b.w	8008680 <__kernel_cos>
 80072b6:	4821      	ldr	r0, [pc, #132]	; (800733c <cos+0xa4>)
 80072b8:	4281      	cmp	r1, r0
 80072ba:	dd09      	ble.n	80072d0 <cos+0x38>
 80072bc:	ee10 0a10 	vmov	r0, s0
 80072c0:	4619      	mov	r1, r3
 80072c2:	f7f8 fff1 	bl	80002a8 <__aeabi_dsub>
 80072c6:	ec41 0b10 	vmov	d0, r0, r1
 80072ca:	b005      	add	sp, #20
 80072cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80072d0:	4668      	mov	r0, sp
 80072d2:	f000 ff15 	bl	8008100 <__ieee754_rem_pio2>
 80072d6:	f000 0003 	and.w	r0, r0, #3
 80072da:	2801      	cmp	r0, #1
 80072dc:	d00b      	beq.n	80072f6 <cos+0x5e>
 80072de:	2802      	cmp	r0, #2
 80072e0:	d016      	beq.n	8007310 <cos+0x78>
 80072e2:	b9e0      	cbnz	r0, 800731e <cos+0x86>
 80072e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80072e8:	ed9d 0b00 	vldr	d0, [sp]
 80072ec:	f001 f9c8 	bl	8008680 <__kernel_cos>
 80072f0:	ec51 0b10 	vmov	r0, r1, d0
 80072f4:	e7e7      	b.n	80072c6 <cos+0x2e>
 80072f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80072fa:	ed9d 0b00 	vldr	d0, [sp]
 80072fe:	f001 fdd7 	bl	8008eb0 <__kernel_sin>
 8007302:	ec53 2b10 	vmov	r2, r3, d0
 8007306:	ee10 0a10 	vmov	r0, s0
 800730a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800730e:	e7da      	b.n	80072c6 <cos+0x2e>
 8007310:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007314:	ed9d 0b00 	vldr	d0, [sp]
 8007318:	f001 f9b2 	bl	8008680 <__kernel_cos>
 800731c:	e7f1      	b.n	8007302 <cos+0x6a>
 800731e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007322:	ed9d 0b00 	vldr	d0, [sp]
 8007326:	2001      	movs	r0, #1
 8007328:	f001 fdc2 	bl	8008eb0 <__kernel_sin>
 800732c:	e7e0      	b.n	80072f0 <cos+0x58>
 800732e:	bf00      	nop
	...
 8007338:	3fe921fb 	.word	0x3fe921fb
 800733c:	7fefffff 	.word	0x7fefffff

08007340 <fmod>:
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	ed2d 8b02 	vpush	{d8}
 8007346:	ec57 6b10 	vmov	r6, r7, d0
 800734a:	ec55 4b11 	vmov	r4, r5, d1
 800734e:	f000 f895 	bl	800747c <__ieee754_fmod>
 8007352:	4622      	mov	r2, r4
 8007354:	462b      	mov	r3, r5
 8007356:	4630      	mov	r0, r6
 8007358:	4639      	mov	r1, r7
 800735a:	eeb0 8a40 	vmov.f32	s16, s0
 800735e:	eef0 8a60 	vmov.f32	s17, s1
 8007362:	f7f9 fbf3 	bl	8000b4c <__aeabi_dcmpun>
 8007366:	b990      	cbnz	r0, 800738e <fmod+0x4e>
 8007368:	2200      	movs	r2, #0
 800736a:	2300      	movs	r3, #0
 800736c:	4620      	mov	r0, r4
 800736e:	4629      	mov	r1, r5
 8007370:	f7f9 fbba 	bl	8000ae8 <__aeabi_dcmpeq>
 8007374:	b158      	cbz	r0, 800738e <fmod+0x4e>
 8007376:	f7fd f87b 	bl	8004470 <__errno>
 800737a:	2321      	movs	r3, #33	; 0x21
 800737c:	6003      	str	r3, [r0, #0]
 800737e:	2200      	movs	r2, #0
 8007380:	2300      	movs	r3, #0
 8007382:	4610      	mov	r0, r2
 8007384:	4619      	mov	r1, r3
 8007386:	f7f9 fa71 	bl	800086c <__aeabi_ddiv>
 800738a:	ec41 0b18 	vmov	d8, r0, r1
 800738e:	eeb0 0a48 	vmov.f32	s0, s16
 8007392:	eef0 0a68 	vmov.f32	s1, s17
 8007396:	ecbd 8b02 	vpop	{d8}
 800739a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800739c <pow>:
 800739c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739e:	ed2d 8b02 	vpush	{d8}
 80073a2:	eeb0 8a40 	vmov.f32	s16, s0
 80073a6:	eef0 8a60 	vmov.f32	s17, s1
 80073aa:	ec55 4b11 	vmov	r4, r5, d1
 80073ae:	f000 f977 	bl	80076a0 <__ieee754_pow>
 80073b2:	4622      	mov	r2, r4
 80073b4:	462b      	mov	r3, r5
 80073b6:	4620      	mov	r0, r4
 80073b8:	4629      	mov	r1, r5
 80073ba:	ec57 6b10 	vmov	r6, r7, d0
 80073be:	f7f9 fbc5 	bl	8000b4c <__aeabi_dcmpun>
 80073c2:	2800      	cmp	r0, #0
 80073c4:	d13b      	bne.n	800743e <pow+0xa2>
 80073c6:	ec51 0b18 	vmov	r0, r1, d8
 80073ca:	2200      	movs	r2, #0
 80073cc:	2300      	movs	r3, #0
 80073ce:	f7f9 fb8b 	bl	8000ae8 <__aeabi_dcmpeq>
 80073d2:	b1b8      	cbz	r0, 8007404 <pow+0x68>
 80073d4:	2200      	movs	r2, #0
 80073d6:	2300      	movs	r3, #0
 80073d8:	4620      	mov	r0, r4
 80073da:	4629      	mov	r1, r5
 80073dc:	f7f9 fb84 	bl	8000ae8 <__aeabi_dcmpeq>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	d146      	bne.n	8007472 <pow+0xd6>
 80073e4:	ec45 4b10 	vmov	d0, r4, r5
 80073e8:	f001 fe59 	bl	800909e <finite>
 80073ec:	b338      	cbz	r0, 800743e <pow+0xa2>
 80073ee:	2200      	movs	r2, #0
 80073f0:	2300      	movs	r3, #0
 80073f2:	4620      	mov	r0, r4
 80073f4:	4629      	mov	r1, r5
 80073f6:	f7f9 fb81 	bl	8000afc <__aeabi_dcmplt>
 80073fa:	b300      	cbz	r0, 800743e <pow+0xa2>
 80073fc:	f7fd f838 	bl	8004470 <__errno>
 8007400:	2322      	movs	r3, #34	; 0x22
 8007402:	e01b      	b.n	800743c <pow+0xa0>
 8007404:	ec47 6b10 	vmov	d0, r6, r7
 8007408:	f001 fe49 	bl	800909e <finite>
 800740c:	b9e0      	cbnz	r0, 8007448 <pow+0xac>
 800740e:	eeb0 0a48 	vmov.f32	s0, s16
 8007412:	eef0 0a68 	vmov.f32	s1, s17
 8007416:	f001 fe42 	bl	800909e <finite>
 800741a:	b1a8      	cbz	r0, 8007448 <pow+0xac>
 800741c:	ec45 4b10 	vmov	d0, r4, r5
 8007420:	f001 fe3d 	bl	800909e <finite>
 8007424:	b180      	cbz	r0, 8007448 <pow+0xac>
 8007426:	4632      	mov	r2, r6
 8007428:	463b      	mov	r3, r7
 800742a:	4630      	mov	r0, r6
 800742c:	4639      	mov	r1, r7
 800742e:	f7f9 fb8d 	bl	8000b4c <__aeabi_dcmpun>
 8007432:	2800      	cmp	r0, #0
 8007434:	d0e2      	beq.n	80073fc <pow+0x60>
 8007436:	f7fd f81b 	bl	8004470 <__errno>
 800743a:	2321      	movs	r3, #33	; 0x21
 800743c:	6003      	str	r3, [r0, #0]
 800743e:	ecbd 8b02 	vpop	{d8}
 8007442:	ec47 6b10 	vmov	d0, r6, r7
 8007446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007448:	2200      	movs	r2, #0
 800744a:	2300      	movs	r3, #0
 800744c:	4630      	mov	r0, r6
 800744e:	4639      	mov	r1, r7
 8007450:	f7f9 fb4a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007454:	2800      	cmp	r0, #0
 8007456:	d0f2      	beq.n	800743e <pow+0xa2>
 8007458:	eeb0 0a48 	vmov.f32	s0, s16
 800745c:	eef0 0a68 	vmov.f32	s1, s17
 8007460:	f001 fe1d 	bl	800909e <finite>
 8007464:	2800      	cmp	r0, #0
 8007466:	d0ea      	beq.n	800743e <pow+0xa2>
 8007468:	ec45 4b10 	vmov	d0, r4, r5
 800746c:	f001 fe17 	bl	800909e <finite>
 8007470:	e7c3      	b.n	80073fa <pow+0x5e>
 8007472:	4f01      	ldr	r7, [pc, #4]	; (8007478 <pow+0xdc>)
 8007474:	2600      	movs	r6, #0
 8007476:	e7e2      	b.n	800743e <pow+0xa2>
 8007478:	3ff00000 	.word	0x3ff00000

0800747c <__ieee754_fmod>:
 800747c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007480:	ec53 2b11 	vmov	r2, r3, d1
 8007484:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8007488:	ea5e 0402 	orrs.w	r4, lr, r2
 800748c:	ec51 0b10 	vmov	r0, r1, d0
 8007490:	ee11 7a10 	vmov	r7, s2
 8007494:	ee11 ca10 	vmov	ip, s2
 8007498:	461e      	mov	r6, r3
 800749a:	d00d      	beq.n	80074b8 <__ieee754_fmod+0x3c>
 800749c:	4c7a      	ldr	r4, [pc, #488]	; (8007688 <__ieee754_fmod+0x20c>)
 800749e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80074a2:	45a0      	cmp	r8, r4
 80074a4:	4689      	mov	r9, r1
 80074a6:	dc07      	bgt.n	80074b8 <__ieee754_fmod+0x3c>
 80074a8:	4254      	negs	r4, r2
 80074aa:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 8007694 <__ieee754_fmod+0x218>
 80074ae:	4314      	orrs	r4, r2
 80074b0:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 80074b4:	455c      	cmp	r4, fp
 80074b6:	d909      	bls.n	80074cc <__ieee754_fmod+0x50>
 80074b8:	f7f9 f8ae 	bl	8000618 <__aeabi_dmul>
 80074bc:	4602      	mov	r2, r0
 80074be:	460b      	mov	r3, r1
 80074c0:	f7f9 f9d4 	bl	800086c <__aeabi_ddiv>
 80074c4:	ec41 0b10 	vmov	d0, r0, r1
 80074c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074cc:	45f0      	cmp	r8, lr
 80074ce:	ee10 aa10 	vmov	sl, s0
 80074d2:	ee10 4a10 	vmov	r4, s0
 80074d6:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80074da:	dc09      	bgt.n	80074f0 <__ieee754_fmod+0x74>
 80074dc:	dbf2      	blt.n	80074c4 <__ieee754_fmod+0x48>
 80074de:	4290      	cmp	r0, r2
 80074e0:	d3f0      	bcc.n	80074c4 <__ieee754_fmod+0x48>
 80074e2:	d105      	bne.n	80074f0 <__ieee754_fmod+0x74>
 80074e4:	4b69      	ldr	r3, [pc, #420]	; (800768c <__ieee754_fmod+0x210>)
 80074e6:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 80074ea:	e9d5 0100 	ldrd	r0, r1, [r5]
 80074ee:	e7e9      	b.n	80074c4 <__ieee754_fmod+0x48>
 80074f0:	ea19 0f0b 	tst.w	r9, fp
 80074f4:	d14a      	bne.n	800758c <__ieee754_fmod+0x110>
 80074f6:	f1b8 0f00 	cmp.w	r8, #0
 80074fa:	d13f      	bne.n	800757c <__ieee754_fmod+0x100>
 80074fc:	4964      	ldr	r1, [pc, #400]	; (8007690 <__ieee754_fmod+0x214>)
 80074fe:	4653      	mov	r3, sl
 8007500:	2b00      	cmp	r3, #0
 8007502:	dc38      	bgt.n	8007576 <__ieee754_fmod+0xfa>
 8007504:	4b63      	ldr	r3, [pc, #396]	; (8007694 <__ieee754_fmod+0x218>)
 8007506:	4033      	ands	r3, r6
 8007508:	2b00      	cmp	r3, #0
 800750a:	d14f      	bne.n	80075ac <__ieee754_fmod+0x130>
 800750c:	f1be 0f00 	cmp.w	lr, #0
 8007510:	d144      	bne.n	800759c <__ieee754_fmod+0x120>
 8007512:	4a5f      	ldr	r2, [pc, #380]	; (8007690 <__ieee754_fmod+0x214>)
 8007514:	463b      	mov	r3, r7
 8007516:	2b00      	cmp	r3, #0
 8007518:	dc3d      	bgt.n	8007596 <__ieee754_fmod+0x11a>
 800751a:	4b5f      	ldr	r3, [pc, #380]	; (8007698 <__ieee754_fmod+0x21c>)
 800751c:	4299      	cmp	r1, r3
 800751e:	db4a      	blt.n	80075b6 <__ieee754_fmod+0x13a>
 8007520:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007528:	485b      	ldr	r0, [pc, #364]	; (8007698 <__ieee754_fmod+0x21c>)
 800752a:	4282      	cmp	r2, r0
 800752c:	db57      	blt.n	80075de <__ieee754_fmod+0x162>
 800752e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8007532:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8007536:	1a89      	subs	r1, r1, r2
 8007538:	1b98      	subs	r0, r3, r6
 800753a:	eba4 070c 	sub.w	r7, r4, ip
 800753e:	2900      	cmp	r1, #0
 8007540:	d164      	bne.n	800760c <__ieee754_fmod+0x190>
 8007542:	4564      	cmp	r4, ip
 8007544:	bf38      	it	cc
 8007546:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800754a:	2800      	cmp	r0, #0
 800754c:	bfa4      	itt	ge
 800754e:	463c      	movge	r4, r7
 8007550:	4603      	movge	r3, r0
 8007552:	ea53 0104 	orrs.w	r1, r3, r4
 8007556:	d0c5      	beq.n	80074e4 <__ieee754_fmod+0x68>
 8007558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800755c:	db6b      	blt.n	8007636 <__ieee754_fmod+0x1ba>
 800755e:	494e      	ldr	r1, [pc, #312]	; (8007698 <__ieee754_fmod+0x21c>)
 8007560:	428a      	cmp	r2, r1
 8007562:	db6e      	blt.n	8007642 <__ieee754_fmod+0x1c6>
 8007564:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007568:	431d      	orrs	r5, r3
 800756a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800756e:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 8007572:	4620      	mov	r0, r4
 8007574:	e7a6      	b.n	80074c4 <__ieee754_fmod+0x48>
 8007576:	3901      	subs	r1, #1
 8007578:	005b      	lsls	r3, r3, #1
 800757a:	e7c1      	b.n	8007500 <__ieee754_fmod+0x84>
 800757c:	4946      	ldr	r1, [pc, #280]	; (8007698 <__ieee754_fmod+0x21c>)
 800757e:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8007582:	2b00      	cmp	r3, #0
 8007584:	ddbe      	ble.n	8007504 <__ieee754_fmod+0x88>
 8007586:	3901      	subs	r1, #1
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	e7fa      	b.n	8007582 <__ieee754_fmod+0x106>
 800758c:	ea4f 5128 	mov.w	r1, r8, asr #20
 8007590:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007594:	e7b6      	b.n	8007504 <__ieee754_fmod+0x88>
 8007596:	3a01      	subs	r2, #1
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	e7bc      	b.n	8007516 <__ieee754_fmod+0x9a>
 800759c:	4a3e      	ldr	r2, [pc, #248]	; (8007698 <__ieee754_fmod+0x21c>)
 800759e:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	ddb9      	ble.n	800751a <__ieee754_fmod+0x9e>
 80075a6:	3a01      	subs	r2, #1
 80075a8:	005b      	lsls	r3, r3, #1
 80075aa:	e7fa      	b.n	80075a2 <__ieee754_fmod+0x126>
 80075ac:	ea4f 522e 	mov.w	r2, lr, asr #20
 80075b0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80075b4:	e7b1      	b.n	800751a <__ieee754_fmod+0x9e>
 80075b6:	1a5c      	subs	r4, r3, r1
 80075b8:	2c1f      	cmp	r4, #31
 80075ba:	dc0a      	bgt.n	80075d2 <__ieee754_fmod+0x156>
 80075bc:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 80075c0:	fa08 f804 	lsl.w	r8, r8, r4
 80075c4:	fa2a f303 	lsr.w	r3, sl, r3
 80075c8:	ea43 0308 	orr.w	r3, r3, r8
 80075cc:	fa0a f404 	lsl.w	r4, sl, r4
 80075d0:	e7aa      	b.n	8007528 <__ieee754_fmod+0xac>
 80075d2:	4b32      	ldr	r3, [pc, #200]	; (800769c <__ieee754_fmod+0x220>)
 80075d4:	1a5b      	subs	r3, r3, r1
 80075d6:	fa0a f303 	lsl.w	r3, sl, r3
 80075da:	2400      	movs	r4, #0
 80075dc:	e7a4      	b.n	8007528 <__ieee754_fmod+0xac>
 80075de:	eba0 0c02 	sub.w	ip, r0, r2
 80075e2:	f1bc 0f1f 	cmp.w	ip, #31
 80075e6:	dc0a      	bgt.n	80075fe <__ieee754_fmod+0x182>
 80075e8:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 80075ec:	fa0e fe0c 	lsl.w	lr, lr, ip
 80075f0:	fa27 f606 	lsr.w	r6, r7, r6
 80075f4:	ea46 060e 	orr.w	r6, r6, lr
 80075f8:	fa07 fc0c 	lsl.w	ip, r7, ip
 80075fc:	e79b      	b.n	8007536 <__ieee754_fmod+0xba>
 80075fe:	4e27      	ldr	r6, [pc, #156]	; (800769c <__ieee754_fmod+0x220>)
 8007600:	1ab6      	subs	r6, r6, r2
 8007602:	fa07 f606 	lsl.w	r6, r7, r6
 8007606:	f04f 0c00 	mov.w	ip, #0
 800760a:	e794      	b.n	8007536 <__ieee754_fmod+0xba>
 800760c:	4564      	cmp	r4, ip
 800760e:	bf38      	it	cc
 8007610:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8007614:	2800      	cmp	r0, #0
 8007616:	da05      	bge.n	8007624 <__ieee754_fmod+0x1a8>
 8007618:	0fe0      	lsrs	r0, r4, #31
 800761a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800761e:	0064      	lsls	r4, r4, #1
 8007620:	3901      	subs	r1, #1
 8007622:	e789      	b.n	8007538 <__ieee754_fmod+0xbc>
 8007624:	ea50 0307 	orrs.w	r3, r0, r7
 8007628:	f43f af5c 	beq.w	80074e4 <__ieee754_fmod+0x68>
 800762c:	0ffb      	lsrs	r3, r7, #31
 800762e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007632:	007c      	lsls	r4, r7, #1
 8007634:	e7f4      	b.n	8007620 <__ieee754_fmod+0x1a4>
 8007636:	0fe1      	lsrs	r1, r4, #31
 8007638:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800763c:	0064      	lsls	r4, r4, #1
 800763e:	3a01      	subs	r2, #1
 8007640:	e78a      	b.n	8007558 <__ieee754_fmod+0xdc>
 8007642:	1a89      	subs	r1, r1, r2
 8007644:	2914      	cmp	r1, #20
 8007646:	dc0a      	bgt.n	800765e <__ieee754_fmod+0x1e2>
 8007648:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800764c:	fa03 f202 	lsl.w	r2, r3, r2
 8007650:	40cc      	lsrs	r4, r1
 8007652:	4322      	orrs	r2, r4
 8007654:	410b      	asrs	r3, r1
 8007656:	ea43 0105 	orr.w	r1, r3, r5
 800765a:	4610      	mov	r0, r2
 800765c:	e732      	b.n	80074c4 <__ieee754_fmod+0x48>
 800765e:	291f      	cmp	r1, #31
 8007660:	dc07      	bgt.n	8007672 <__ieee754_fmod+0x1f6>
 8007662:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8007666:	40cc      	lsrs	r4, r1
 8007668:	fa03 f202 	lsl.w	r2, r3, r2
 800766c:	4322      	orrs	r2, r4
 800766e:	462b      	mov	r3, r5
 8007670:	e7f1      	b.n	8007656 <__ieee754_fmod+0x1da>
 8007672:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8007676:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800767a:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800767e:	32e2      	adds	r2, #226	; 0xe2
 8007680:	fa43 f202 	asr.w	r2, r3, r2
 8007684:	e7f3      	b.n	800766e <__ieee754_fmod+0x1f2>
 8007686:	bf00      	nop
 8007688:	7fefffff 	.word	0x7fefffff
 800768c:	080096e8 	.word	0x080096e8
 8007690:	fffffbed 	.word	0xfffffbed
 8007694:	7ff00000 	.word	0x7ff00000
 8007698:	fffffc02 	.word	0xfffffc02
 800769c:	fffffbe2 	.word	0xfffffbe2

080076a0 <__ieee754_pow>:
 80076a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a4:	ed2d 8b06 	vpush	{d8-d10}
 80076a8:	b089      	sub	sp, #36	; 0x24
 80076aa:	ed8d 1b00 	vstr	d1, [sp]
 80076ae:	e9dd 2900 	ldrd	r2, r9, [sp]
 80076b2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80076b6:	ea58 0102 	orrs.w	r1, r8, r2
 80076ba:	ec57 6b10 	vmov	r6, r7, d0
 80076be:	d115      	bne.n	80076ec <__ieee754_pow+0x4c>
 80076c0:	19b3      	adds	r3, r6, r6
 80076c2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80076c6:	4152      	adcs	r2, r2
 80076c8:	4299      	cmp	r1, r3
 80076ca:	4b89      	ldr	r3, [pc, #548]	; (80078f0 <__ieee754_pow+0x250>)
 80076cc:	4193      	sbcs	r3, r2
 80076ce:	f080 84d2 	bcs.w	8008076 <__ieee754_pow+0x9d6>
 80076d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076d6:	4630      	mov	r0, r6
 80076d8:	4639      	mov	r1, r7
 80076da:	f7f8 fde7 	bl	80002ac <__adddf3>
 80076de:	ec41 0b10 	vmov	d0, r0, r1
 80076e2:	b009      	add	sp, #36	; 0x24
 80076e4:	ecbd 8b06 	vpop	{d8-d10}
 80076e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ec:	4b81      	ldr	r3, [pc, #516]	; (80078f4 <__ieee754_pow+0x254>)
 80076ee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80076f2:	429c      	cmp	r4, r3
 80076f4:	ee10 aa10 	vmov	sl, s0
 80076f8:	463d      	mov	r5, r7
 80076fa:	dc06      	bgt.n	800770a <__ieee754_pow+0x6a>
 80076fc:	d101      	bne.n	8007702 <__ieee754_pow+0x62>
 80076fe:	2e00      	cmp	r6, #0
 8007700:	d1e7      	bne.n	80076d2 <__ieee754_pow+0x32>
 8007702:	4598      	cmp	r8, r3
 8007704:	dc01      	bgt.n	800770a <__ieee754_pow+0x6a>
 8007706:	d10f      	bne.n	8007728 <__ieee754_pow+0x88>
 8007708:	b172      	cbz	r2, 8007728 <__ieee754_pow+0x88>
 800770a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800770e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007712:	ea55 050a 	orrs.w	r5, r5, sl
 8007716:	d1dc      	bne.n	80076d2 <__ieee754_pow+0x32>
 8007718:	e9dd 3200 	ldrd	r3, r2, [sp]
 800771c:	18db      	adds	r3, r3, r3
 800771e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007722:	4152      	adcs	r2, r2
 8007724:	429d      	cmp	r5, r3
 8007726:	e7d0      	b.n	80076ca <__ieee754_pow+0x2a>
 8007728:	2d00      	cmp	r5, #0
 800772a:	da3b      	bge.n	80077a4 <__ieee754_pow+0x104>
 800772c:	4b72      	ldr	r3, [pc, #456]	; (80078f8 <__ieee754_pow+0x258>)
 800772e:	4598      	cmp	r8, r3
 8007730:	dc51      	bgt.n	80077d6 <__ieee754_pow+0x136>
 8007732:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007736:	4598      	cmp	r8, r3
 8007738:	f340 84ac 	ble.w	8008094 <__ieee754_pow+0x9f4>
 800773c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007740:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007744:	2b14      	cmp	r3, #20
 8007746:	dd0f      	ble.n	8007768 <__ieee754_pow+0xc8>
 8007748:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800774c:	fa22 f103 	lsr.w	r1, r2, r3
 8007750:	fa01 f303 	lsl.w	r3, r1, r3
 8007754:	4293      	cmp	r3, r2
 8007756:	f040 849d 	bne.w	8008094 <__ieee754_pow+0x9f4>
 800775a:	f001 0101 	and.w	r1, r1, #1
 800775e:	f1c1 0302 	rsb	r3, r1, #2
 8007762:	9304      	str	r3, [sp, #16]
 8007764:	b182      	cbz	r2, 8007788 <__ieee754_pow+0xe8>
 8007766:	e05f      	b.n	8007828 <__ieee754_pow+0x188>
 8007768:	2a00      	cmp	r2, #0
 800776a:	d15b      	bne.n	8007824 <__ieee754_pow+0x184>
 800776c:	f1c3 0314 	rsb	r3, r3, #20
 8007770:	fa48 f103 	asr.w	r1, r8, r3
 8007774:	fa01 f303 	lsl.w	r3, r1, r3
 8007778:	4543      	cmp	r3, r8
 800777a:	f040 8488 	bne.w	800808e <__ieee754_pow+0x9ee>
 800777e:	f001 0101 	and.w	r1, r1, #1
 8007782:	f1c1 0302 	rsb	r3, r1, #2
 8007786:	9304      	str	r3, [sp, #16]
 8007788:	4b5c      	ldr	r3, [pc, #368]	; (80078fc <__ieee754_pow+0x25c>)
 800778a:	4598      	cmp	r8, r3
 800778c:	d132      	bne.n	80077f4 <__ieee754_pow+0x154>
 800778e:	f1b9 0f00 	cmp.w	r9, #0
 8007792:	f280 8478 	bge.w	8008086 <__ieee754_pow+0x9e6>
 8007796:	4959      	ldr	r1, [pc, #356]	; (80078fc <__ieee754_pow+0x25c>)
 8007798:	4632      	mov	r2, r6
 800779a:	463b      	mov	r3, r7
 800779c:	2000      	movs	r0, #0
 800779e:	f7f9 f865 	bl	800086c <__aeabi_ddiv>
 80077a2:	e79c      	b.n	80076de <__ieee754_pow+0x3e>
 80077a4:	2300      	movs	r3, #0
 80077a6:	9304      	str	r3, [sp, #16]
 80077a8:	2a00      	cmp	r2, #0
 80077aa:	d13d      	bne.n	8007828 <__ieee754_pow+0x188>
 80077ac:	4b51      	ldr	r3, [pc, #324]	; (80078f4 <__ieee754_pow+0x254>)
 80077ae:	4598      	cmp	r8, r3
 80077b0:	d1ea      	bne.n	8007788 <__ieee754_pow+0xe8>
 80077b2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80077b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80077ba:	ea53 030a 	orrs.w	r3, r3, sl
 80077be:	f000 845a 	beq.w	8008076 <__ieee754_pow+0x9d6>
 80077c2:	4b4f      	ldr	r3, [pc, #316]	; (8007900 <__ieee754_pow+0x260>)
 80077c4:	429c      	cmp	r4, r3
 80077c6:	dd08      	ble.n	80077da <__ieee754_pow+0x13a>
 80077c8:	f1b9 0f00 	cmp.w	r9, #0
 80077cc:	f2c0 8457 	blt.w	800807e <__ieee754_pow+0x9de>
 80077d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077d4:	e783      	b.n	80076de <__ieee754_pow+0x3e>
 80077d6:	2302      	movs	r3, #2
 80077d8:	e7e5      	b.n	80077a6 <__ieee754_pow+0x106>
 80077da:	f1b9 0f00 	cmp.w	r9, #0
 80077de:	f04f 0000 	mov.w	r0, #0
 80077e2:	f04f 0100 	mov.w	r1, #0
 80077e6:	f6bf af7a 	bge.w	80076de <__ieee754_pow+0x3e>
 80077ea:	e9dd 0300 	ldrd	r0, r3, [sp]
 80077ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80077f2:	e774      	b.n	80076de <__ieee754_pow+0x3e>
 80077f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80077f8:	d106      	bne.n	8007808 <__ieee754_pow+0x168>
 80077fa:	4632      	mov	r2, r6
 80077fc:	463b      	mov	r3, r7
 80077fe:	4630      	mov	r0, r6
 8007800:	4639      	mov	r1, r7
 8007802:	f7f8 ff09 	bl	8000618 <__aeabi_dmul>
 8007806:	e76a      	b.n	80076de <__ieee754_pow+0x3e>
 8007808:	4b3e      	ldr	r3, [pc, #248]	; (8007904 <__ieee754_pow+0x264>)
 800780a:	4599      	cmp	r9, r3
 800780c:	d10c      	bne.n	8007828 <__ieee754_pow+0x188>
 800780e:	2d00      	cmp	r5, #0
 8007810:	db0a      	blt.n	8007828 <__ieee754_pow+0x188>
 8007812:	ec47 6b10 	vmov	d0, r6, r7
 8007816:	b009      	add	sp, #36	; 0x24
 8007818:	ecbd 8b06 	vpop	{d8-d10}
 800781c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007820:	f000 be7a 	b.w	8008518 <__ieee754_sqrt>
 8007824:	2300      	movs	r3, #0
 8007826:	9304      	str	r3, [sp, #16]
 8007828:	ec47 6b10 	vmov	d0, r6, r7
 800782c:	f001 fc2e 	bl	800908c <fabs>
 8007830:	ec51 0b10 	vmov	r0, r1, d0
 8007834:	f1ba 0f00 	cmp.w	sl, #0
 8007838:	d129      	bne.n	800788e <__ieee754_pow+0x1ee>
 800783a:	b124      	cbz	r4, 8007846 <__ieee754_pow+0x1a6>
 800783c:	4b2f      	ldr	r3, [pc, #188]	; (80078fc <__ieee754_pow+0x25c>)
 800783e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007842:	429a      	cmp	r2, r3
 8007844:	d123      	bne.n	800788e <__ieee754_pow+0x1ee>
 8007846:	f1b9 0f00 	cmp.w	r9, #0
 800784a:	da05      	bge.n	8007858 <__ieee754_pow+0x1b8>
 800784c:	4602      	mov	r2, r0
 800784e:	460b      	mov	r3, r1
 8007850:	2000      	movs	r0, #0
 8007852:	492a      	ldr	r1, [pc, #168]	; (80078fc <__ieee754_pow+0x25c>)
 8007854:	f7f9 f80a 	bl	800086c <__aeabi_ddiv>
 8007858:	2d00      	cmp	r5, #0
 800785a:	f6bf af40 	bge.w	80076de <__ieee754_pow+0x3e>
 800785e:	9b04      	ldr	r3, [sp, #16]
 8007860:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007864:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007868:	4323      	orrs	r3, r4
 800786a:	d108      	bne.n	800787e <__ieee754_pow+0x1de>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	4610      	mov	r0, r2
 8007872:	4619      	mov	r1, r3
 8007874:	f7f8 fd18 	bl	80002a8 <__aeabi_dsub>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	e78f      	b.n	800779e <__ieee754_pow+0xfe>
 800787e:	9b04      	ldr	r3, [sp, #16]
 8007880:	2b01      	cmp	r3, #1
 8007882:	f47f af2c 	bne.w	80076de <__ieee754_pow+0x3e>
 8007886:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800788a:	4619      	mov	r1, r3
 800788c:	e727      	b.n	80076de <__ieee754_pow+0x3e>
 800788e:	0feb      	lsrs	r3, r5, #31
 8007890:	3b01      	subs	r3, #1
 8007892:	9306      	str	r3, [sp, #24]
 8007894:	9a06      	ldr	r2, [sp, #24]
 8007896:	9b04      	ldr	r3, [sp, #16]
 8007898:	4313      	orrs	r3, r2
 800789a:	d102      	bne.n	80078a2 <__ieee754_pow+0x202>
 800789c:	4632      	mov	r2, r6
 800789e:	463b      	mov	r3, r7
 80078a0:	e7e6      	b.n	8007870 <__ieee754_pow+0x1d0>
 80078a2:	4b19      	ldr	r3, [pc, #100]	; (8007908 <__ieee754_pow+0x268>)
 80078a4:	4598      	cmp	r8, r3
 80078a6:	f340 80fb 	ble.w	8007aa0 <__ieee754_pow+0x400>
 80078aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80078ae:	4598      	cmp	r8, r3
 80078b0:	4b13      	ldr	r3, [pc, #76]	; (8007900 <__ieee754_pow+0x260>)
 80078b2:	dd0c      	ble.n	80078ce <__ieee754_pow+0x22e>
 80078b4:	429c      	cmp	r4, r3
 80078b6:	dc0f      	bgt.n	80078d8 <__ieee754_pow+0x238>
 80078b8:	f1b9 0f00 	cmp.w	r9, #0
 80078bc:	da0f      	bge.n	80078de <__ieee754_pow+0x23e>
 80078be:	2000      	movs	r0, #0
 80078c0:	b009      	add	sp, #36	; 0x24
 80078c2:	ecbd 8b06 	vpop	{d8-d10}
 80078c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ca:	f001 bbd6 	b.w	800907a <__math_oflow>
 80078ce:	429c      	cmp	r4, r3
 80078d0:	dbf2      	blt.n	80078b8 <__ieee754_pow+0x218>
 80078d2:	4b0a      	ldr	r3, [pc, #40]	; (80078fc <__ieee754_pow+0x25c>)
 80078d4:	429c      	cmp	r4, r3
 80078d6:	dd19      	ble.n	800790c <__ieee754_pow+0x26c>
 80078d8:	f1b9 0f00 	cmp.w	r9, #0
 80078dc:	dcef      	bgt.n	80078be <__ieee754_pow+0x21e>
 80078de:	2000      	movs	r0, #0
 80078e0:	b009      	add	sp, #36	; 0x24
 80078e2:	ecbd 8b06 	vpop	{d8-d10}
 80078e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ea:	f001 bbbd 	b.w	8009068 <__math_uflow>
 80078ee:	bf00      	nop
 80078f0:	fff00000 	.word	0xfff00000
 80078f4:	7ff00000 	.word	0x7ff00000
 80078f8:	433fffff 	.word	0x433fffff
 80078fc:	3ff00000 	.word	0x3ff00000
 8007900:	3fefffff 	.word	0x3fefffff
 8007904:	3fe00000 	.word	0x3fe00000
 8007908:	41e00000 	.word	0x41e00000
 800790c:	4b60      	ldr	r3, [pc, #384]	; (8007a90 <__ieee754_pow+0x3f0>)
 800790e:	2200      	movs	r2, #0
 8007910:	f7f8 fcca 	bl	80002a8 <__aeabi_dsub>
 8007914:	a354      	add	r3, pc, #336	; (adr r3, 8007a68 <__ieee754_pow+0x3c8>)
 8007916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791a:	4604      	mov	r4, r0
 800791c:	460d      	mov	r5, r1
 800791e:	f7f8 fe7b 	bl	8000618 <__aeabi_dmul>
 8007922:	a353      	add	r3, pc, #332	; (adr r3, 8007a70 <__ieee754_pow+0x3d0>)
 8007924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007928:	4606      	mov	r6, r0
 800792a:	460f      	mov	r7, r1
 800792c:	4620      	mov	r0, r4
 800792e:	4629      	mov	r1, r5
 8007930:	f7f8 fe72 	bl	8000618 <__aeabi_dmul>
 8007934:	4b57      	ldr	r3, [pc, #348]	; (8007a94 <__ieee754_pow+0x3f4>)
 8007936:	4682      	mov	sl, r0
 8007938:	468b      	mov	fp, r1
 800793a:	2200      	movs	r2, #0
 800793c:	4620      	mov	r0, r4
 800793e:	4629      	mov	r1, r5
 8007940:	f7f8 fe6a 	bl	8000618 <__aeabi_dmul>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	a14b      	add	r1, pc, #300	; (adr r1, 8007a78 <__ieee754_pow+0x3d8>)
 800794a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800794e:	f7f8 fcab 	bl	80002a8 <__aeabi_dsub>
 8007952:	4622      	mov	r2, r4
 8007954:	462b      	mov	r3, r5
 8007956:	f7f8 fe5f 	bl	8000618 <__aeabi_dmul>
 800795a:	4602      	mov	r2, r0
 800795c:	460b      	mov	r3, r1
 800795e:	2000      	movs	r0, #0
 8007960:	494d      	ldr	r1, [pc, #308]	; (8007a98 <__ieee754_pow+0x3f8>)
 8007962:	f7f8 fca1 	bl	80002a8 <__aeabi_dsub>
 8007966:	4622      	mov	r2, r4
 8007968:	4680      	mov	r8, r0
 800796a:	4689      	mov	r9, r1
 800796c:	462b      	mov	r3, r5
 800796e:	4620      	mov	r0, r4
 8007970:	4629      	mov	r1, r5
 8007972:	f7f8 fe51 	bl	8000618 <__aeabi_dmul>
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	4640      	mov	r0, r8
 800797c:	4649      	mov	r1, r9
 800797e:	f7f8 fe4b 	bl	8000618 <__aeabi_dmul>
 8007982:	a33f      	add	r3, pc, #252	; (adr r3, 8007a80 <__ieee754_pow+0x3e0>)
 8007984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007988:	f7f8 fe46 	bl	8000618 <__aeabi_dmul>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	4650      	mov	r0, sl
 8007992:	4659      	mov	r1, fp
 8007994:	f7f8 fc88 	bl	80002a8 <__aeabi_dsub>
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	4680      	mov	r8, r0
 800799e:	4689      	mov	r9, r1
 80079a0:	4630      	mov	r0, r6
 80079a2:	4639      	mov	r1, r7
 80079a4:	f7f8 fc82 	bl	80002ac <__adddf3>
 80079a8:	2000      	movs	r0, #0
 80079aa:	4632      	mov	r2, r6
 80079ac:	463b      	mov	r3, r7
 80079ae:	4604      	mov	r4, r0
 80079b0:	460d      	mov	r5, r1
 80079b2:	f7f8 fc79 	bl	80002a8 <__aeabi_dsub>
 80079b6:	4602      	mov	r2, r0
 80079b8:	460b      	mov	r3, r1
 80079ba:	4640      	mov	r0, r8
 80079bc:	4649      	mov	r1, r9
 80079be:	f7f8 fc73 	bl	80002a8 <__aeabi_dsub>
 80079c2:	9b04      	ldr	r3, [sp, #16]
 80079c4:	9a06      	ldr	r2, [sp, #24]
 80079c6:	3b01      	subs	r3, #1
 80079c8:	4313      	orrs	r3, r2
 80079ca:	4682      	mov	sl, r0
 80079cc:	468b      	mov	fp, r1
 80079ce:	f040 81e7 	bne.w	8007da0 <__ieee754_pow+0x700>
 80079d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007a88 <__ieee754_pow+0x3e8>
 80079d6:	eeb0 8a47 	vmov.f32	s16, s14
 80079da:	eef0 8a67 	vmov.f32	s17, s15
 80079de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80079e2:	2600      	movs	r6, #0
 80079e4:	4632      	mov	r2, r6
 80079e6:	463b      	mov	r3, r7
 80079e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079ec:	f7f8 fc5c 	bl	80002a8 <__aeabi_dsub>
 80079f0:	4622      	mov	r2, r4
 80079f2:	462b      	mov	r3, r5
 80079f4:	f7f8 fe10 	bl	8000618 <__aeabi_dmul>
 80079f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079fc:	4680      	mov	r8, r0
 80079fe:	4689      	mov	r9, r1
 8007a00:	4650      	mov	r0, sl
 8007a02:	4659      	mov	r1, fp
 8007a04:	f7f8 fe08 	bl	8000618 <__aeabi_dmul>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4640      	mov	r0, r8
 8007a0e:	4649      	mov	r1, r9
 8007a10:	f7f8 fc4c 	bl	80002ac <__adddf3>
 8007a14:	4632      	mov	r2, r6
 8007a16:	463b      	mov	r3, r7
 8007a18:	4680      	mov	r8, r0
 8007a1a:	4689      	mov	r9, r1
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	4629      	mov	r1, r5
 8007a20:	f7f8 fdfa 	bl	8000618 <__aeabi_dmul>
 8007a24:	460b      	mov	r3, r1
 8007a26:	4604      	mov	r4, r0
 8007a28:	460d      	mov	r5, r1
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	4649      	mov	r1, r9
 8007a2e:	4640      	mov	r0, r8
 8007a30:	f7f8 fc3c 	bl	80002ac <__adddf3>
 8007a34:	4b19      	ldr	r3, [pc, #100]	; (8007a9c <__ieee754_pow+0x3fc>)
 8007a36:	4299      	cmp	r1, r3
 8007a38:	ec45 4b19 	vmov	d9, r4, r5
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	460f      	mov	r7, r1
 8007a40:	468b      	mov	fp, r1
 8007a42:	f340 82f1 	ble.w	8008028 <__ieee754_pow+0x988>
 8007a46:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007a4a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007a4e:	4303      	orrs	r3, r0
 8007a50:	f000 81e4 	beq.w	8007e1c <__ieee754_pow+0x77c>
 8007a54:	ec51 0b18 	vmov	r0, r1, d8
 8007a58:	2200      	movs	r2, #0
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f7f9 f84e 	bl	8000afc <__aeabi_dcmplt>
 8007a60:	3800      	subs	r0, #0
 8007a62:	bf18      	it	ne
 8007a64:	2001      	movne	r0, #1
 8007a66:	e72b      	b.n	80078c0 <__ieee754_pow+0x220>
 8007a68:	60000000 	.word	0x60000000
 8007a6c:	3ff71547 	.word	0x3ff71547
 8007a70:	f85ddf44 	.word	0xf85ddf44
 8007a74:	3e54ae0b 	.word	0x3e54ae0b
 8007a78:	55555555 	.word	0x55555555
 8007a7c:	3fd55555 	.word	0x3fd55555
 8007a80:	652b82fe 	.word	0x652b82fe
 8007a84:	3ff71547 	.word	0x3ff71547
 8007a88:	00000000 	.word	0x00000000
 8007a8c:	bff00000 	.word	0xbff00000
 8007a90:	3ff00000 	.word	0x3ff00000
 8007a94:	3fd00000 	.word	0x3fd00000
 8007a98:	3fe00000 	.word	0x3fe00000
 8007a9c:	408fffff 	.word	0x408fffff
 8007aa0:	4bd5      	ldr	r3, [pc, #852]	; (8007df8 <__ieee754_pow+0x758>)
 8007aa2:	402b      	ands	r3, r5
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	b92b      	cbnz	r3, 8007ab4 <__ieee754_pow+0x414>
 8007aa8:	4bd4      	ldr	r3, [pc, #848]	; (8007dfc <__ieee754_pow+0x75c>)
 8007aaa:	f7f8 fdb5 	bl	8000618 <__aeabi_dmul>
 8007aae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007ab2:	460c      	mov	r4, r1
 8007ab4:	1523      	asrs	r3, r4, #20
 8007ab6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007aba:	4413      	add	r3, r2
 8007abc:	9305      	str	r3, [sp, #20]
 8007abe:	4bd0      	ldr	r3, [pc, #832]	; (8007e00 <__ieee754_pow+0x760>)
 8007ac0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007ac4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007ac8:	429c      	cmp	r4, r3
 8007aca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007ace:	dd08      	ble.n	8007ae2 <__ieee754_pow+0x442>
 8007ad0:	4bcc      	ldr	r3, [pc, #816]	; (8007e04 <__ieee754_pow+0x764>)
 8007ad2:	429c      	cmp	r4, r3
 8007ad4:	f340 8162 	ble.w	8007d9c <__ieee754_pow+0x6fc>
 8007ad8:	9b05      	ldr	r3, [sp, #20]
 8007ada:	3301      	adds	r3, #1
 8007adc:	9305      	str	r3, [sp, #20]
 8007ade:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007ae2:	2400      	movs	r4, #0
 8007ae4:	00e3      	lsls	r3, r4, #3
 8007ae6:	9307      	str	r3, [sp, #28]
 8007ae8:	4bc7      	ldr	r3, [pc, #796]	; (8007e08 <__ieee754_pow+0x768>)
 8007aea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007aee:	ed93 7b00 	vldr	d7, [r3]
 8007af2:	4629      	mov	r1, r5
 8007af4:	ec53 2b17 	vmov	r2, r3, d7
 8007af8:	eeb0 9a47 	vmov.f32	s18, s14
 8007afc:	eef0 9a67 	vmov.f32	s19, s15
 8007b00:	4682      	mov	sl, r0
 8007b02:	f7f8 fbd1 	bl	80002a8 <__aeabi_dsub>
 8007b06:	4652      	mov	r2, sl
 8007b08:	4606      	mov	r6, r0
 8007b0a:	460f      	mov	r7, r1
 8007b0c:	462b      	mov	r3, r5
 8007b0e:	ec51 0b19 	vmov	r0, r1, d9
 8007b12:	f7f8 fbcb 	bl	80002ac <__adddf3>
 8007b16:	4602      	mov	r2, r0
 8007b18:	460b      	mov	r3, r1
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	49bb      	ldr	r1, [pc, #748]	; (8007e0c <__ieee754_pow+0x76c>)
 8007b1e:	f7f8 fea5 	bl	800086c <__aeabi_ddiv>
 8007b22:	ec41 0b1a 	vmov	d10, r0, r1
 8007b26:	4602      	mov	r2, r0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	4639      	mov	r1, r7
 8007b2e:	f7f8 fd73 	bl	8000618 <__aeabi_dmul>
 8007b32:	2300      	movs	r3, #0
 8007b34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b38:	9302      	str	r3, [sp, #8]
 8007b3a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b3e:	46ab      	mov	fp, r5
 8007b40:	106d      	asrs	r5, r5, #1
 8007b42:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007b46:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007b4a:	ec41 0b18 	vmov	d8, r0, r1
 8007b4e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007b52:	2200      	movs	r2, #0
 8007b54:	4640      	mov	r0, r8
 8007b56:	4649      	mov	r1, r9
 8007b58:	4614      	mov	r4, r2
 8007b5a:	461d      	mov	r5, r3
 8007b5c:	f7f8 fd5c 	bl	8000618 <__aeabi_dmul>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	4630      	mov	r0, r6
 8007b66:	4639      	mov	r1, r7
 8007b68:	f7f8 fb9e 	bl	80002a8 <__aeabi_dsub>
 8007b6c:	ec53 2b19 	vmov	r2, r3, d9
 8007b70:	4606      	mov	r6, r0
 8007b72:	460f      	mov	r7, r1
 8007b74:	4620      	mov	r0, r4
 8007b76:	4629      	mov	r1, r5
 8007b78:	f7f8 fb96 	bl	80002a8 <__aeabi_dsub>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	4650      	mov	r0, sl
 8007b82:	4659      	mov	r1, fp
 8007b84:	f7f8 fb90 	bl	80002a8 <__aeabi_dsub>
 8007b88:	4642      	mov	r2, r8
 8007b8a:	464b      	mov	r3, r9
 8007b8c:	f7f8 fd44 	bl	8000618 <__aeabi_dmul>
 8007b90:	4602      	mov	r2, r0
 8007b92:	460b      	mov	r3, r1
 8007b94:	4630      	mov	r0, r6
 8007b96:	4639      	mov	r1, r7
 8007b98:	f7f8 fb86 	bl	80002a8 <__aeabi_dsub>
 8007b9c:	ec53 2b1a 	vmov	r2, r3, d10
 8007ba0:	f7f8 fd3a 	bl	8000618 <__aeabi_dmul>
 8007ba4:	ec53 2b18 	vmov	r2, r3, d8
 8007ba8:	ec41 0b19 	vmov	d9, r0, r1
 8007bac:	ec51 0b18 	vmov	r0, r1, d8
 8007bb0:	f7f8 fd32 	bl	8000618 <__aeabi_dmul>
 8007bb4:	a37c      	add	r3, pc, #496	; (adr r3, 8007da8 <__ieee754_pow+0x708>)
 8007bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bba:	4604      	mov	r4, r0
 8007bbc:	460d      	mov	r5, r1
 8007bbe:	f7f8 fd2b 	bl	8000618 <__aeabi_dmul>
 8007bc2:	a37b      	add	r3, pc, #492	; (adr r3, 8007db0 <__ieee754_pow+0x710>)
 8007bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc8:	f7f8 fb70 	bl	80002ac <__adddf3>
 8007bcc:	4622      	mov	r2, r4
 8007bce:	462b      	mov	r3, r5
 8007bd0:	f7f8 fd22 	bl	8000618 <__aeabi_dmul>
 8007bd4:	a378      	add	r3, pc, #480	; (adr r3, 8007db8 <__ieee754_pow+0x718>)
 8007bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bda:	f7f8 fb67 	bl	80002ac <__adddf3>
 8007bde:	4622      	mov	r2, r4
 8007be0:	462b      	mov	r3, r5
 8007be2:	f7f8 fd19 	bl	8000618 <__aeabi_dmul>
 8007be6:	a376      	add	r3, pc, #472	; (adr r3, 8007dc0 <__ieee754_pow+0x720>)
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	f7f8 fb5e 	bl	80002ac <__adddf3>
 8007bf0:	4622      	mov	r2, r4
 8007bf2:	462b      	mov	r3, r5
 8007bf4:	f7f8 fd10 	bl	8000618 <__aeabi_dmul>
 8007bf8:	a373      	add	r3, pc, #460	; (adr r3, 8007dc8 <__ieee754_pow+0x728>)
 8007bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfe:	f7f8 fb55 	bl	80002ac <__adddf3>
 8007c02:	4622      	mov	r2, r4
 8007c04:	462b      	mov	r3, r5
 8007c06:	f7f8 fd07 	bl	8000618 <__aeabi_dmul>
 8007c0a:	a371      	add	r3, pc, #452	; (adr r3, 8007dd0 <__ieee754_pow+0x730>)
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	f7f8 fb4c 	bl	80002ac <__adddf3>
 8007c14:	4622      	mov	r2, r4
 8007c16:	4606      	mov	r6, r0
 8007c18:	460f      	mov	r7, r1
 8007c1a:	462b      	mov	r3, r5
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	4629      	mov	r1, r5
 8007c20:	f7f8 fcfa 	bl	8000618 <__aeabi_dmul>
 8007c24:	4602      	mov	r2, r0
 8007c26:	460b      	mov	r3, r1
 8007c28:	4630      	mov	r0, r6
 8007c2a:	4639      	mov	r1, r7
 8007c2c:	f7f8 fcf4 	bl	8000618 <__aeabi_dmul>
 8007c30:	4642      	mov	r2, r8
 8007c32:	4604      	mov	r4, r0
 8007c34:	460d      	mov	r5, r1
 8007c36:	464b      	mov	r3, r9
 8007c38:	ec51 0b18 	vmov	r0, r1, d8
 8007c3c:	f7f8 fb36 	bl	80002ac <__adddf3>
 8007c40:	ec53 2b19 	vmov	r2, r3, d9
 8007c44:	f7f8 fce8 	bl	8000618 <__aeabi_dmul>
 8007c48:	4622      	mov	r2, r4
 8007c4a:	462b      	mov	r3, r5
 8007c4c:	f7f8 fb2e 	bl	80002ac <__adddf3>
 8007c50:	4642      	mov	r2, r8
 8007c52:	4682      	mov	sl, r0
 8007c54:	468b      	mov	fp, r1
 8007c56:	464b      	mov	r3, r9
 8007c58:	4640      	mov	r0, r8
 8007c5a:	4649      	mov	r1, r9
 8007c5c:	f7f8 fcdc 	bl	8000618 <__aeabi_dmul>
 8007c60:	4b6b      	ldr	r3, [pc, #428]	; (8007e10 <__ieee754_pow+0x770>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	4606      	mov	r6, r0
 8007c66:	460f      	mov	r7, r1
 8007c68:	f7f8 fb20 	bl	80002ac <__adddf3>
 8007c6c:	4652      	mov	r2, sl
 8007c6e:	465b      	mov	r3, fp
 8007c70:	f7f8 fb1c 	bl	80002ac <__adddf3>
 8007c74:	2000      	movs	r0, #0
 8007c76:	4604      	mov	r4, r0
 8007c78:	460d      	mov	r5, r1
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	4640      	mov	r0, r8
 8007c80:	4649      	mov	r1, r9
 8007c82:	f7f8 fcc9 	bl	8000618 <__aeabi_dmul>
 8007c86:	4b62      	ldr	r3, [pc, #392]	; (8007e10 <__ieee754_pow+0x770>)
 8007c88:	4680      	mov	r8, r0
 8007c8a:	4689      	mov	r9, r1
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	4620      	mov	r0, r4
 8007c90:	4629      	mov	r1, r5
 8007c92:	f7f8 fb09 	bl	80002a8 <__aeabi_dsub>
 8007c96:	4632      	mov	r2, r6
 8007c98:	463b      	mov	r3, r7
 8007c9a:	f7f8 fb05 	bl	80002a8 <__aeabi_dsub>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	4650      	mov	r0, sl
 8007ca4:	4659      	mov	r1, fp
 8007ca6:	f7f8 faff 	bl	80002a8 <__aeabi_dsub>
 8007caa:	ec53 2b18 	vmov	r2, r3, d8
 8007cae:	f7f8 fcb3 	bl	8000618 <__aeabi_dmul>
 8007cb2:	4622      	mov	r2, r4
 8007cb4:	4606      	mov	r6, r0
 8007cb6:	460f      	mov	r7, r1
 8007cb8:	462b      	mov	r3, r5
 8007cba:	ec51 0b19 	vmov	r0, r1, d9
 8007cbe:	f7f8 fcab 	bl	8000618 <__aeabi_dmul>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	4639      	mov	r1, r7
 8007cca:	f7f8 faef 	bl	80002ac <__adddf3>
 8007cce:	4606      	mov	r6, r0
 8007cd0:	460f      	mov	r7, r1
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	4640      	mov	r0, r8
 8007cd8:	4649      	mov	r1, r9
 8007cda:	f7f8 fae7 	bl	80002ac <__adddf3>
 8007cde:	a33e      	add	r3, pc, #248	; (adr r3, 8007dd8 <__ieee754_pow+0x738>)
 8007ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	460d      	mov	r5, r1
 8007cea:	f7f8 fc95 	bl	8000618 <__aeabi_dmul>
 8007cee:	4642      	mov	r2, r8
 8007cf0:	ec41 0b18 	vmov	d8, r0, r1
 8007cf4:	464b      	mov	r3, r9
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	f7f8 fad5 	bl	80002a8 <__aeabi_dsub>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4630      	mov	r0, r6
 8007d04:	4639      	mov	r1, r7
 8007d06:	f7f8 facf 	bl	80002a8 <__aeabi_dsub>
 8007d0a:	a335      	add	r3, pc, #212	; (adr r3, 8007de0 <__ieee754_pow+0x740>)
 8007d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d10:	f7f8 fc82 	bl	8000618 <__aeabi_dmul>
 8007d14:	a334      	add	r3, pc, #208	; (adr r3, 8007de8 <__ieee754_pow+0x748>)
 8007d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	460f      	mov	r7, r1
 8007d1e:	4620      	mov	r0, r4
 8007d20:	4629      	mov	r1, r5
 8007d22:	f7f8 fc79 	bl	8000618 <__aeabi_dmul>
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	4639      	mov	r1, r7
 8007d2e:	f7f8 fabd 	bl	80002ac <__adddf3>
 8007d32:	9a07      	ldr	r2, [sp, #28]
 8007d34:	4b37      	ldr	r3, [pc, #220]	; (8007e14 <__ieee754_pow+0x774>)
 8007d36:	4413      	add	r3, r2
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	f7f8 fab6 	bl	80002ac <__adddf3>
 8007d40:	4682      	mov	sl, r0
 8007d42:	9805      	ldr	r0, [sp, #20]
 8007d44:	468b      	mov	fp, r1
 8007d46:	f7f8 fbfd 	bl	8000544 <__aeabi_i2d>
 8007d4a:	9a07      	ldr	r2, [sp, #28]
 8007d4c:	4b32      	ldr	r3, [pc, #200]	; (8007e18 <__ieee754_pow+0x778>)
 8007d4e:	4413      	add	r3, r2
 8007d50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d54:	4606      	mov	r6, r0
 8007d56:	460f      	mov	r7, r1
 8007d58:	4652      	mov	r2, sl
 8007d5a:	465b      	mov	r3, fp
 8007d5c:	ec51 0b18 	vmov	r0, r1, d8
 8007d60:	f7f8 faa4 	bl	80002ac <__adddf3>
 8007d64:	4642      	mov	r2, r8
 8007d66:	464b      	mov	r3, r9
 8007d68:	f7f8 faa0 	bl	80002ac <__adddf3>
 8007d6c:	4632      	mov	r2, r6
 8007d6e:	463b      	mov	r3, r7
 8007d70:	f7f8 fa9c 	bl	80002ac <__adddf3>
 8007d74:	2000      	movs	r0, #0
 8007d76:	4632      	mov	r2, r6
 8007d78:	463b      	mov	r3, r7
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	460d      	mov	r5, r1
 8007d7e:	f7f8 fa93 	bl	80002a8 <__aeabi_dsub>
 8007d82:	4642      	mov	r2, r8
 8007d84:	464b      	mov	r3, r9
 8007d86:	f7f8 fa8f 	bl	80002a8 <__aeabi_dsub>
 8007d8a:	ec53 2b18 	vmov	r2, r3, d8
 8007d8e:	f7f8 fa8b 	bl	80002a8 <__aeabi_dsub>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	4650      	mov	r0, sl
 8007d98:	4659      	mov	r1, fp
 8007d9a:	e610      	b.n	80079be <__ieee754_pow+0x31e>
 8007d9c:	2401      	movs	r4, #1
 8007d9e:	e6a1      	b.n	8007ae4 <__ieee754_pow+0x444>
 8007da0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007df0 <__ieee754_pow+0x750>
 8007da4:	e617      	b.n	80079d6 <__ieee754_pow+0x336>
 8007da6:	bf00      	nop
 8007da8:	4a454eef 	.word	0x4a454eef
 8007dac:	3fca7e28 	.word	0x3fca7e28
 8007db0:	93c9db65 	.word	0x93c9db65
 8007db4:	3fcd864a 	.word	0x3fcd864a
 8007db8:	a91d4101 	.word	0xa91d4101
 8007dbc:	3fd17460 	.word	0x3fd17460
 8007dc0:	518f264d 	.word	0x518f264d
 8007dc4:	3fd55555 	.word	0x3fd55555
 8007dc8:	db6fabff 	.word	0xdb6fabff
 8007dcc:	3fdb6db6 	.word	0x3fdb6db6
 8007dd0:	33333303 	.word	0x33333303
 8007dd4:	3fe33333 	.word	0x3fe33333
 8007dd8:	e0000000 	.word	0xe0000000
 8007ddc:	3feec709 	.word	0x3feec709
 8007de0:	dc3a03fd 	.word	0xdc3a03fd
 8007de4:	3feec709 	.word	0x3feec709
 8007de8:	145b01f5 	.word	0x145b01f5
 8007dec:	be3e2fe0 	.word	0xbe3e2fe0
 8007df0:	00000000 	.word	0x00000000
 8007df4:	3ff00000 	.word	0x3ff00000
 8007df8:	7ff00000 	.word	0x7ff00000
 8007dfc:	43400000 	.word	0x43400000
 8007e00:	0003988e 	.word	0x0003988e
 8007e04:	000bb679 	.word	0x000bb679
 8007e08:	080096f8 	.word	0x080096f8
 8007e0c:	3ff00000 	.word	0x3ff00000
 8007e10:	40080000 	.word	0x40080000
 8007e14:	08009718 	.word	0x08009718
 8007e18:	08009708 	.word	0x08009708
 8007e1c:	a3b5      	add	r3, pc, #724	; (adr r3, 80080f4 <__ieee754_pow+0xa54>)
 8007e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e22:	4640      	mov	r0, r8
 8007e24:	4649      	mov	r1, r9
 8007e26:	f7f8 fa41 	bl	80002ac <__adddf3>
 8007e2a:	4622      	mov	r2, r4
 8007e2c:	ec41 0b1a 	vmov	d10, r0, r1
 8007e30:	462b      	mov	r3, r5
 8007e32:	4630      	mov	r0, r6
 8007e34:	4639      	mov	r1, r7
 8007e36:	f7f8 fa37 	bl	80002a8 <__aeabi_dsub>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	ec51 0b1a 	vmov	r0, r1, d10
 8007e42:	f7f8 fe79 	bl	8000b38 <__aeabi_dcmpgt>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	f47f ae04 	bne.w	8007a54 <__ieee754_pow+0x3b4>
 8007e4c:	4aa4      	ldr	r2, [pc, #656]	; (80080e0 <__ieee754_pow+0xa40>)
 8007e4e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e52:	4293      	cmp	r3, r2
 8007e54:	f340 8108 	ble.w	8008068 <__ieee754_pow+0x9c8>
 8007e58:	151b      	asrs	r3, r3, #20
 8007e5a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007e5e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007e62:	fa4a f303 	asr.w	r3, sl, r3
 8007e66:	445b      	add	r3, fp
 8007e68:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007e6c:	4e9d      	ldr	r6, [pc, #628]	; (80080e4 <__ieee754_pow+0xa44>)
 8007e6e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007e72:	4116      	asrs	r6, r2
 8007e74:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007e78:	2000      	movs	r0, #0
 8007e7a:	ea23 0106 	bic.w	r1, r3, r6
 8007e7e:	f1c2 0214 	rsb	r2, r2, #20
 8007e82:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007e86:	fa4a fa02 	asr.w	sl, sl, r2
 8007e8a:	f1bb 0f00 	cmp.w	fp, #0
 8007e8e:	4602      	mov	r2, r0
 8007e90:	460b      	mov	r3, r1
 8007e92:	4620      	mov	r0, r4
 8007e94:	4629      	mov	r1, r5
 8007e96:	bfb8      	it	lt
 8007e98:	f1ca 0a00 	rsblt	sl, sl, #0
 8007e9c:	f7f8 fa04 	bl	80002a8 <__aeabi_dsub>
 8007ea0:	ec41 0b19 	vmov	d9, r0, r1
 8007ea4:	4642      	mov	r2, r8
 8007ea6:	464b      	mov	r3, r9
 8007ea8:	ec51 0b19 	vmov	r0, r1, d9
 8007eac:	f7f8 f9fe 	bl	80002ac <__adddf3>
 8007eb0:	a37b      	add	r3, pc, #492	; (adr r3, 80080a0 <__ieee754_pow+0xa00>)
 8007eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	4604      	mov	r4, r0
 8007eba:	460d      	mov	r5, r1
 8007ebc:	f7f8 fbac 	bl	8000618 <__aeabi_dmul>
 8007ec0:	ec53 2b19 	vmov	r2, r3, d9
 8007ec4:	4606      	mov	r6, r0
 8007ec6:	460f      	mov	r7, r1
 8007ec8:	4620      	mov	r0, r4
 8007eca:	4629      	mov	r1, r5
 8007ecc:	f7f8 f9ec 	bl	80002a8 <__aeabi_dsub>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4640      	mov	r0, r8
 8007ed6:	4649      	mov	r1, r9
 8007ed8:	f7f8 f9e6 	bl	80002a8 <__aeabi_dsub>
 8007edc:	a372      	add	r3, pc, #456	; (adr r3, 80080a8 <__ieee754_pow+0xa08>)
 8007ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee2:	f7f8 fb99 	bl	8000618 <__aeabi_dmul>
 8007ee6:	a372      	add	r3, pc, #456	; (adr r3, 80080b0 <__ieee754_pow+0xa10>)
 8007ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eec:	4680      	mov	r8, r0
 8007eee:	4689      	mov	r9, r1
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	f7f8 fb90 	bl	8000618 <__aeabi_dmul>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4640      	mov	r0, r8
 8007efe:	4649      	mov	r1, r9
 8007f00:	f7f8 f9d4 	bl	80002ac <__adddf3>
 8007f04:	4604      	mov	r4, r0
 8007f06:	460d      	mov	r5, r1
 8007f08:	4602      	mov	r2, r0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	4639      	mov	r1, r7
 8007f10:	f7f8 f9cc 	bl	80002ac <__adddf3>
 8007f14:	4632      	mov	r2, r6
 8007f16:	463b      	mov	r3, r7
 8007f18:	4680      	mov	r8, r0
 8007f1a:	4689      	mov	r9, r1
 8007f1c:	f7f8 f9c4 	bl	80002a8 <__aeabi_dsub>
 8007f20:	4602      	mov	r2, r0
 8007f22:	460b      	mov	r3, r1
 8007f24:	4620      	mov	r0, r4
 8007f26:	4629      	mov	r1, r5
 8007f28:	f7f8 f9be 	bl	80002a8 <__aeabi_dsub>
 8007f2c:	4642      	mov	r2, r8
 8007f2e:	4606      	mov	r6, r0
 8007f30:	460f      	mov	r7, r1
 8007f32:	464b      	mov	r3, r9
 8007f34:	4640      	mov	r0, r8
 8007f36:	4649      	mov	r1, r9
 8007f38:	f7f8 fb6e 	bl	8000618 <__aeabi_dmul>
 8007f3c:	a35e      	add	r3, pc, #376	; (adr r3, 80080b8 <__ieee754_pow+0xa18>)
 8007f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f42:	4604      	mov	r4, r0
 8007f44:	460d      	mov	r5, r1
 8007f46:	f7f8 fb67 	bl	8000618 <__aeabi_dmul>
 8007f4a:	a35d      	add	r3, pc, #372	; (adr r3, 80080c0 <__ieee754_pow+0xa20>)
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	f7f8 f9aa 	bl	80002a8 <__aeabi_dsub>
 8007f54:	4622      	mov	r2, r4
 8007f56:	462b      	mov	r3, r5
 8007f58:	f7f8 fb5e 	bl	8000618 <__aeabi_dmul>
 8007f5c:	a35a      	add	r3, pc, #360	; (adr r3, 80080c8 <__ieee754_pow+0xa28>)
 8007f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f62:	f7f8 f9a3 	bl	80002ac <__adddf3>
 8007f66:	4622      	mov	r2, r4
 8007f68:	462b      	mov	r3, r5
 8007f6a:	f7f8 fb55 	bl	8000618 <__aeabi_dmul>
 8007f6e:	a358      	add	r3, pc, #352	; (adr r3, 80080d0 <__ieee754_pow+0xa30>)
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	f7f8 f998 	bl	80002a8 <__aeabi_dsub>
 8007f78:	4622      	mov	r2, r4
 8007f7a:	462b      	mov	r3, r5
 8007f7c:	f7f8 fb4c 	bl	8000618 <__aeabi_dmul>
 8007f80:	a355      	add	r3, pc, #340	; (adr r3, 80080d8 <__ieee754_pow+0xa38>)
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f7f8 f991 	bl	80002ac <__adddf3>
 8007f8a:	4622      	mov	r2, r4
 8007f8c:	462b      	mov	r3, r5
 8007f8e:	f7f8 fb43 	bl	8000618 <__aeabi_dmul>
 8007f92:	4602      	mov	r2, r0
 8007f94:	460b      	mov	r3, r1
 8007f96:	4640      	mov	r0, r8
 8007f98:	4649      	mov	r1, r9
 8007f9a:	f7f8 f985 	bl	80002a8 <__aeabi_dsub>
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	460d      	mov	r5, r1
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4640      	mov	r0, r8
 8007fa8:	4649      	mov	r1, r9
 8007faa:	f7f8 fb35 	bl	8000618 <__aeabi_dmul>
 8007fae:	2200      	movs	r2, #0
 8007fb0:	ec41 0b19 	vmov	d9, r0, r1
 8007fb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fb8:	4620      	mov	r0, r4
 8007fba:	4629      	mov	r1, r5
 8007fbc:	f7f8 f974 	bl	80002a8 <__aeabi_dsub>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	ec51 0b19 	vmov	r0, r1, d9
 8007fc8:	f7f8 fc50 	bl	800086c <__aeabi_ddiv>
 8007fcc:	4632      	mov	r2, r6
 8007fce:	4604      	mov	r4, r0
 8007fd0:	460d      	mov	r5, r1
 8007fd2:	463b      	mov	r3, r7
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	4649      	mov	r1, r9
 8007fd8:	f7f8 fb1e 	bl	8000618 <__aeabi_dmul>
 8007fdc:	4632      	mov	r2, r6
 8007fde:	463b      	mov	r3, r7
 8007fe0:	f7f8 f964 	bl	80002ac <__adddf3>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	4620      	mov	r0, r4
 8007fea:	4629      	mov	r1, r5
 8007fec:	f7f8 f95c 	bl	80002a8 <__aeabi_dsub>
 8007ff0:	4642      	mov	r2, r8
 8007ff2:	464b      	mov	r3, r9
 8007ff4:	f7f8 f958 	bl	80002a8 <__aeabi_dsub>
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	493a      	ldr	r1, [pc, #232]	; (80080e8 <__ieee754_pow+0xa48>)
 8007ffe:	2000      	movs	r0, #0
 8008000:	f7f8 f952 	bl	80002a8 <__aeabi_dsub>
 8008004:	ec41 0b10 	vmov	d0, r0, r1
 8008008:	ee10 3a90 	vmov	r3, s1
 800800c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008010:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008014:	da2b      	bge.n	800806e <__ieee754_pow+0x9ce>
 8008016:	4650      	mov	r0, sl
 8008018:	f001 f8ce 	bl	80091b8 <scalbn>
 800801c:	ec51 0b10 	vmov	r0, r1, d0
 8008020:	ec53 2b18 	vmov	r2, r3, d8
 8008024:	f7ff bbed 	b.w	8007802 <__ieee754_pow+0x162>
 8008028:	4b30      	ldr	r3, [pc, #192]	; (80080ec <__ieee754_pow+0xa4c>)
 800802a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800802e:	429e      	cmp	r6, r3
 8008030:	f77f af0c 	ble.w	8007e4c <__ieee754_pow+0x7ac>
 8008034:	4b2e      	ldr	r3, [pc, #184]	; (80080f0 <__ieee754_pow+0xa50>)
 8008036:	440b      	add	r3, r1
 8008038:	4303      	orrs	r3, r0
 800803a:	d009      	beq.n	8008050 <__ieee754_pow+0x9b0>
 800803c:	ec51 0b18 	vmov	r0, r1, d8
 8008040:	2200      	movs	r2, #0
 8008042:	2300      	movs	r3, #0
 8008044:	f7f8 fd5a 	bl	8000afc <__aeabi_dcmplt>
 8008048:	3800      	subs	r0, #0
 800804a:	bf18      	it	ne
 800804c:	2001      	movne	r0, #1
 800804e:	e447      	b.n	80078e0 <__ieee754_pow+0x240>
 8008050:	4622      	mov	r2, r4
 8008052:	462b      	mov	r3, r5
 8008054:	f7f8 f928 	bl	80002a8 <__aeabi_dsub>
 8008058:	4642      	mov	r2, r8
 800805a:	464b      	mov	r3, r9
 800805c:	f7f8 fd62 	bl	8000b24 <__aeabi_dcmpge>
 8008060:	2800      	cmp	r0, #0
 8008062:	f43f aef3 	beq.w	8007e4c <__ieee754_pow+0x7ac>
 8008066:	e7e9      	b.n	800803c <__ieee754_pow+0x99c>
 8008068:	f04f 0a00 	mov.w	sl, #0
 800806c:	e71a      	b.n	8007ea4 <__ieee754_pow+0x804>
 800806e:	ec51 0b10 	vmov	r0, r1, d0
 8008072:	4619      	mov	r1, r3
 8008074:	e7d4      	b.n	8008020 <__ieee754_pow+0x980>
 8008076:	491c      	ldr	r1, [pc, #112]	; (80080e8 <__ieee754_pow+0xa48>)
 8008078:	2000      	movs	r0, #0
 800807a:	f7ff bb30 	b.w	80076de <__ieee754_pow+0x3e>
 800807e:	2000      	movs	r0, #0
 8008080:	2100      	movs	r1, #0
 8008082:	f7ff bb2c 	b.w	80076de <__ieee754_pow+0x3e>
 8008086:	4630      	mov	r0, r6
 8008088:	4639      	mov	r1, r7
 800808a:	f7ff bb28 	b.w	80076de <__ieee754_pow+0x3e>
 800808e:	9204      	str	r2, [sp, #16]
 8008090:	f7ff bb7a 	b.w	8007788 <__ieee754_pow+0xe8>
 8008094:	2300      	movs	r3, #0
 8008096:	f7ff bb64 	b.w	8007762 <__ieee754_pow+0xc2>
 800809a:	bf00      	nop
 800809c:	f3af 8000 	nop.w
 80080a0:	00000000 	.word	0x00000000
 80080a4:	3fe62e43 	.word	0x3fe62e43
 80080a8:	fefa39ef 	.word	0xfefa39ef
 80080ac:	3fe62e42 	.word	0x3fe62e42
 80080b0:	0ca86c39 	.word	0x0ca86c39
 80080b4:	be205c61 	.word	0xbe205c61
 80080b8:	72bea4d0 	.word	0x72bea4d0
 80080bc:	3e663769 	.word	0x3e663769
 80080c0:	c5d26bf1 	.word	0xc5d26bf1
 80080c4:	3ebbbd41 	.word	0x3ebbbd41
 80080c8:	af25de2c 	.word	0xaf25de2c
 80080cc:	3f11566a 	.word	0x3f11566a
 80080d0:	16bebd93 	.word	0x16bebd93
 80080d4:	3f66c16c 	.word	0x3f66c16c
 80080d8:	5555553e 	.word	0x5555553e
 80080dc:	3fc55555 	.word	0x3fc55555
 80080e0:	3fe00000 	.word	0x3fe00000
 80080e4:	000fffff 	.word	0x000fffff
 80080e8:	3ff00000 	.word	0x3ff00000
 80080ec:	4090cbff 	.word	0x4090cbff
 80080f0:	3f6f3400 	.word	0x3f6f3400
 80080f4:	652b82fe 	.word	0x652b82fe
 80080f8:	3c971547 	.word	0x3c971547
 80080fc:	00000000 	.word	0x00000000

08008100 <__ieee754_rem_pio2>:
 8008100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008104:	ed2d 8b02 	vpush	{d8}
 8008108:	ec55 4b10 	vmov	r4, r5, d0
 800810c:	4bca      	ldr	r3, [pc, #808]	; (8008438 <__ieee754_rem_pio2+0x338>)
 800810e:	b08b      	sub	sp, #44	; 0x2c
 8008110:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008114:	4598      	cmp	r8, r3
 8008116:	4682      	mov	sl, r0
 8008118:	9502      	str	r5, [sp, #8]
 800811a:	dc08      	bgt.n	800812e <__ieee754_rem_pio2+0x2e>
 800811c:	2200      	movs	r2, #0
 800811e:	2300      	movs	r3, #0
 8008120:	ed80 0b00 	vstr	d0, [r0]
 8008124:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008128:	f04f 0b00 	mov.w	fp, #0
 800812c:	e028      	b.n	8008180 <__ieee754_rem_pio2+0x80>
 800812e:	4bc3      	ldr	r3, [pc, #780]	; (800843c <__ieee754_rem_pio2+0x33c>)
 8008130:	4598      	cmp	r8, r3
 8008132:	dc78      	bgt.n	8008226 <__ieee754_rem_pio2+0x126>
 8008134:	9b02      	ldr	r3, [sp, #8]
 8008136:	4ec2      	ldr	r6, [pc, #776]	; (8008440 <__ieee754_rem_pio2+0x340>)
 8008138:	2b00      	cmp	r3, #0
 800813a:	ee10 0a10 	vmov	r0, s0
 800813e:	a3b0      	add	r3, pc, #704	; (adr r3, 8008400 <__ieee754_rem_pio2+0x300>)
 8008140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008144:	4629      	mov	r1, r5
 8008146:	dd39      	ble.n	80081bc <__ieee754_rem_pio2+0xbc>
 8008148:	f7f8 f8ae 	bl	80002a8 <__aeabi_dsub>
 800814c:	45b0      	cmp	r8, r6
 800814e:	4604      	mov	r4, r0
 8008150:	460d      	mov	r5, r1
 8008152:	d01b      	beq.n	800818c <__ieee754_rem_pio2+0x8c>
 8008154:	a3ac      	add	r3, pc, #688	; (adr r3, 8008408 <__ieee754_rem_pio2+0x308>)
 8008156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815a:	f7f8 f8a5 	bl	80002a8 <__aeabi_dsub>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	e9ca 2300 	strd	r2, r3, [sl]
 8008166:	4620      	mov	r0, r4
 8008168:	4629      	mov	r1, r5
 800816a:	f7f8 f89d 	bl	80002a8 <__aeabi_dsub>
 800816e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008408 <__ieee754_rem_pio2+0x308>)
 8008170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008174:	f7f8 f898 	bl	80002a8 <__aeabi_dsub>
 8008178:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800817c:	f04f 0b01 	mov.w	fp, #1
 8008180:	4658      	mov	r0, fp
 8008182:	b00b      	add	sp, #44	; 0x2c
 8008184:	ecbd 8b02 	vpop	{d8}
 8008188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818c:	a3a0      	add	r3, pc, #640	; (adr r3, 8008410 <__ieee754_rem_pio2+0x310>)
 800818e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008192:	f7f8 f889 	bl	80002a8 <__aeabi_dsub>
 8008196:	a3a0      	add	r3, pc, #640	; (adr r3, 8008418 <__ieee754_rem_pio2+0x318>)
 8008198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819c:	4604      	mov	r4, r0
 800819e:	460d      	mov	r5, r1
 80081a0:	f7f8 f882 	bl	80002a8 <__aeabi_dsub>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	e9ca 2300 	strd	r2, r3, [sl]
 80081ac:	4620      	mov	r0, r4
 80081ae:	4629      	mov	r1, r5
 80081b0:	f7f8 f87a 	bl	80002a8 <__aeabi_dsub>
 80081b4:	a398      	add	r3, pc, #608	; (adr r3, 8008418 <__ieee754_rem_pio2+0x318>)
 80081b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ba:	e7db      	b.n	8008174 <__ieee754_rem_pio2+0x74>
 80081bc:	f7f8 f876 	bl	80002ac <__adddf3>
 80081c0:	45b0      	cmp	r8, r6
 80081c2:	4604      	mov	r4, r0
 80081c4:	460d      	mov	r5, r1
 80081c6:	d016      	beq.n	80081f6 <__ieee754_rem_pio2+0xf6>
 80081c8:	a38f      	add	r3, pc, #572	; (adr r3, 8008408 <__ieee754_rem_pio2+0x308>)
 80081ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ce:	f7f8 f86d 	bl	80002ac <__adddf3>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	e9ca 2300 	strd	r2, r3, [sl]
 80081da:	4620      	mov	r0, r4
 80081dc:	4629      	mov	r1, r5
 80081de:	f7f8 f863 	bl	80002a8 <__aeabi_dsub>
 80081e2:	a389      	add	r3, pc, #548	; (adr r3, 8008408 <__ieee754_rem_pio2+0x308>)
 80081e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e8:	f7f8 f860 	bl	80002ac <__adddf3>
 80081ec:	f04f 3bff 	mov.w	fp, #4294967295
 80081f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80081f4:	e7c4      	b.n	8008180 <__ieee754_rem_pio2+0x80>
 80081f6:	a386      	add	r3, pc, #536	; (adr r3, 8008410 <__ieee754_rem_pio2+0x310>)
 80081f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fc:	f7f8 f856 	bl	80002ac <__adddf3>
 8008200:	a385      	add	r3, pc, #532	; (adr r3, 8008418 <__ieee754_rem_pio2+0x318>)
 8008202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008206:	4604      	mov	r4, r0
 8008208:	460d      	mov	r5, r1
 800820a:	f7f8 f84f 	bl	80002ac <__adddf3>
 800820e:	4602      	mov	r2, r0
 8008210:	460b      	mov	r3, r1
 8008212:	e9ca 2300 	strd	r2, r3, [sl]
 8008216:	4620      	mov	r0, r4
 8008218:	4629      	mov	r1, r5
 800821a:	f7f8 f845 	bl	80002a8 <__aeabi_dsub>
 800821e:	a37e      	add	r3, pc, #504	; (adr r3, 8008418 <__ieee754_rem_pio2+0x318>)
 8008220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008224:	e7e0      	b.n	80081e8 <__ieee754_rem_pio2+0xe8>
 8008226:	4b87      	ldr	r3, [pc, #540]	; (8008444 <__ieee754_rem_pio2+0x344>)
 8008228:	4598      	cmp	r8, r3
 800822a:	f300 80d9 	bgt.w	80083e0 <__ieee754_rem_pio2+0x2e0>
 800822e:	f000 ff2d 	bl	800908c <fabs>
 8008232:	ec55 4b10 	vmov	r4, r5, d0
 8008236:	ee10 0a10 	vmov	r0, s0
 800823a:	a379      	add	r3, pc, #484	; (adr r3, 8008420 <__ieee754_rem_pio2+0x320>)
 800823c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008240:	4629      	mov	r1, r5
 8008242:	f7f8 f9e9 	bl	8000618 <__aeabi_dmul>
 8008246:	4b80      	ldr	r3, [pc, #512]	; (8008448 <__ieee754_rem_pio2+0x348>)
 8008248:	2200      	movs	r2, #0
 800824a:	f7f8 f82f 	bl	80002ac <__adddf3>
 800824e:	f7f8 fc93 	bl	8000b78 <__aeabi_d2iz>
 8008252:	4683      	mov	fp, r0
 8008254:	f7f8 f976 	bl	8000544 <__aeabi_i2d>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	ec43 2b18 	vmov	d8, r2, r3
 8008260:	a367      	add	r3, pc, #412	; (adr r3, 8008400 <__ieee754_rem_pio2+0x300>)
 8008262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008266:	f7f8 f9d7 	bl	8000618 <__aeabi_dmul>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	4620      	mov	r0, r4
 8008270:	4629      	mov	r1, r5
 8008272:	f7f8 f819 	bl	80002a8 <__aeabi_dsub>
 8008276:	a364      	add	r3, pc, #400	; (adr r3, 8008408 <__ieee754_rem_pio2+0x308>)
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	4606      	mov	r6, r0
 800827e:	460f      	mov	r7, r1
 8008280:	ec51 0b18 	vmov	r0, r1, d8
 8008284:	f7f8 f9c8 	bl	8000618 <__aeabi_dmul>
 8008288:	f1bb 0f1f 	cmp.w	fp, #31
 800828c:	4604      	mov	r4, r0
 800828e:	460d      	mov	r5, r1
 8008290:	dc0d      	bgt.n	80082ae <__ieee754_rem_pio2+0x1ae>
 8008292:	4b6e      	ldr	r3, [pc, #440]	; (800844c <__ieee754_rem_pio2+0x34c>)
 8008294:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800829c:	4543      	cmp	r3, r8
 800829e:	d006      	beq.n	80082ae <__ieee754_rem_pio2+0x1ae>
 80082a0:	4622      	mov	r2, r4
 80082a2:	462b      	mov	r3, r5
 80082a4:	4630      	mov	r0, r6
 80082a6:	4639      	mov	r1, r7
 80082a8:	f7f7 fffe 	bl	80002a8 <__aeabi_dsub>
 80082ac:	e00f      	b.n	80082ce <__ieee754_rem_pio2+0x1ce>
 80082ae:	462b      	mov	r3, r5
 80082b0:	4622      	mov	r2, r4
 80082b2:	4630      	mov	r0, r6
 80082b4:	4639      	mov	r1, r7
 80082b6:	f7f7 fff7 	bl	80002a8 <__aeabi_dsub>
 80082ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 80082be:	9303      	str	r3, [sp, #12]
 80082c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80082c4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80082c8:	f1b8 0f10 	cmp.w	r8, #16
 80082cc:	dc02      	bgt.n	80082d4 <__ieee754_rem_pio2+0x1d4>
 80082ce:	e9ca 0100 	strd	r0, r1, [sl]
 80082d2:	e039      	b.n	8008348 <__ieee754_rem_pio2+0x248>
 80082d4:	a34e      	add	r3, pc, #312	; (adr r3, 8008410 <__ieee754_rem_pio2+0x310>)
 80082d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082da:	ec51 0b18 	vmov	r0, r1, d8
 80082de:	f7f8 f99b 	bl	8000618 <__aeabi_dmul>
 80082e2:	4604      	mov	r4, r0
 80082e4:	460d      	mov	r5, r1
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	4630      	mov	r0, r6
 80082ec:	4639      	mov	r1, r7
 80082ee:	f7f7 ffdb 	bl	80002a8 <__aeabi_dsub>
 80082f2:	4602      	mov	r2, r0
 80082f4:	460b      	mov	r3, r1
 80082f6:	4680      	mov	r8, r0
 80082f8:	4689      	mov	r9, r1
 80082fa:	4630      	mov	r0, r6
 80082fc:	4639      	mov	r1, r7
 80082fe:	f7f7 ffd3 	bl	80002a8 <__aeabi_dsub>
 8008302:	4622      	mov	r2, r4
 8008304:	462b      	mov	r3, r5
 8008306:	f7f7 ffcf 	bl	80002a8 <__aeabi_dsub>
 800830a:	a343      	add	r3, pc, #268	; (adr r3, 8008418 <__ieee754_rem_pio2+0x318>)
 800830c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008310:	4604      	mov	r4, r0
 8008312:	460d      	mov	r5, r1
 8008314:	ec51 0b18 	vmov	r0, r1, d8
 8008318:	f7f8 f97e 	bl	8000618 <__aeabi_dmul>
 800831c:	4622      	mov	r2, r4
 800831e:	462b      	mov	r3, r5
 8008320:	f7f7 ffc2 	bl	80002a8 <__aeabi_dsub>
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	4604      	mov	r4, r0
 800832a:	460d      	mov	r5, r1
 800832c:	4640      	mov	r0, r8
 800832e:	4649      	mov	r1, r9
 8008330:	f7f7 ffba 	bl	80002a8 <__aeabi_dsub>
 8008334:	9a03      	ldr	r2, [sp, #12]
 8008336:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	2b31      	cmp	r3, #49	; 0x31
 800833e:	dc24      	bgt.n	800838a <__ieee754_rem_pio2+0x28a>
 8008340:	e9ca 0100 	strd	r0, r1, [sl]
 8008344:	4646      	mov	r6, r8
 8008346:	464f      	mov	r7, r9
 8008348:	e9da 8900 	ldrd	r8, r9, [sl]
 800834c:	4630      	mov	r0, r6
 800834e:	4642      	mov	r2, r8
 8008350:	464b      	mov	r3, r9
 8008352:	4639      	mov	r1, r7
 8008354:	f7f7 ffa8 	bl	80002a8 <__aeabi_dsub>
 8008358:	462b      	mov	r3, r5
 800835a:	4622      	mov	r2, r4
 800835c:	f7f7 ffa4 	bl	80002a8 <__aeabi_dsub>
 8008360:	9b02      	ldr	r3, [sp, #8]
 8008362:	2b00      	cmp	r3, #0
 8008364:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008368:	f6bf af0a 	bge.w	8008180 <__ieee754_rem_pio2+0x80>
 800836c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008370:	f8ca 3004 	str.w	r3, [sl, #4]
 8008374:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008378:	f8ca 8000 	str.w	r8, [sl]
 800837c:	f8ca 0008 	str.w	r0, [sl, #8]
 8008380:	f8ca 300c 	str.w	r3, [sl, #12]
 8008384:	f1cb 0b00 	rsb	fp, fp, #0
 8008388:	e6fa      	b.n	8008180 <__ieee754_rem_pio2+0x80>
 800838a:	a327      	add	r3, pc, #156	; (adr r3, 8008428 <__ieee754_rem_pio2+0x328>)
 800838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008390:	ec51 0b18 	vmov	r0, r1, d8
 8008394:	f7f8 f940 	bl	8000618 <__aeabi_dmul>
 8008398:	4604      	mov	r4, r0
 800839a:	460d      	mov	r5, r1
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	4640      	mov	r0, r8
 80083a2:	4649      	mov	r1, r9
 80083a4:	f7f7 ff80 	bl	80002a8 <__aeabi_dsub>
 80083a8:	4602      	mov	r2, r0
 80083aa:	460b      	mov	r3, r1
 80083ac:	4606      	mov	r6, r0
 80083ae:	460f      	mov	r7, r1
 80083b0:	4640      	mov	r0, r8
 80083b2:	4649      	mov	r1, r9
 80083b4:	f7f7 ff78 	bl	80002a8 <__aeabi_dsub>
 80083b8:	4622      	mov	r2, r4
 80083ba:	462b      	mov	r3, r5
 80083bc:	f7f7 ff74 	bl	80002a8 <__aeabi_dsub>
 80083c0:	a31b      	add	r3, pc, #108	; (adr r3, 8008430 <__ieee754_rem_pio2+0x330>)
 80083c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c6:	4604      	mov	r4, r0
 80083c8:	460d      	mov	r5, r1
 80083ca:	ec51 0b18 	vmov	r0, r1, d8
 80083ce:	f7f8 f923 	bl	8000618 <__aeabi_dmul>
 80083d2:	4622      	mov	r2, r4
 80083d4:	462b      	mov	r3, r5
 80083d6:	f7f7 ff67 	bl	80002a8 <__aeabi_dsub>
 80083da:	4604      	mov	r4, r0
 80083dc:	460d      	mov	r5, r1
 80083de:	e75f      	b.n	80082a0 <__ieee754_rem_pio2+0x1a0>
 80083e0:	4b1b      	ldr	r3, [pc, #108]	; (8008450 <__ieee754_rem_pio2+0x350>)
 80083e2:	4598      	cmp	r8, r3
 80083e4:	dd36      	ble.n	8008454 <__ieee754_rem_pio2+0x354>
 80083e6:	ee10 2a10 	vmov	r2, s0
 80083ea:	462b      	mov	r3, r5
 80083ec:	4620      	mov	r0, r4
 80083ee:	4629      	mov	r1, r5
 80083f0:	f7f7 ff5a 	bl	80002a8 <__aeabi_dsub>
 80083f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80083f8:	e9ca 0100 	strd	r0, r1, [sl]
 80083fc:	e694      	b.n	8008128 <__ieee754_rem_pio2+0x28>
 80083fe:	bf00      	nop
 8008400:	54400000 	.word	0x54400000
 8008404:	3ff921fb 	.word	0x3ff921fb
 8008408:	1a626331 	.word	0x1a626331
 800840c:	3dd0b461 	.word	0x3dd0b461
 8008410:	1a600000 	.word	0x1a600000
 8008414:	3dd0b461 	.word	0x3dd0b461
 8008418:	2e037073 	.word	0x2e037073
 800841c:	3ba3198a 	.word	0x3ba3198a
 8008420:	6dc9c883 	.word	0x6dc9c883
 8008424:	3fe45f30 	.word	0x3fe45f30
 8008428:	2e000000 	.word	0x2e000000
 800842c:	3ba3198a 	.word	0x3ba3198a
 8008430:	252049c1 	.word	0x252049c1
 8008434:	397b839a 	.word	0x397b839a
 8008438:	3fe921fb 	.word	0x3fe921fb
 800843c:	4002d97b 	.word	0x4002d97b
 8008440:	3ff921fb 	.word	0x3ff921fb
 8008444:	413921fb 	.word	0x413921fb
 8008448:	3fe00000 	.word	0x3fe00000
 800844c:	08009728 	.word	0x08009728
 8008450:	7fefffff 	.word	0x7fefffff
 8008454:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008458:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800845c:	ee10 0a10 	vmov	r0, s0
 8008460:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008464:	ee10 6a10 	vmov	r6, s0
 8008468:	460f      	mov	r7, r1
 800846a:	f7f8 fb85 	bl	8000b78 <__aeabi_d2iz>
 800846e:	f7f8 f869 	bl	8000544 <__aeabi_i2d>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	4630      	mov	r0, r6
 8008478:	4639      	mov	r1, r7
 800847a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800847e:	f7f7 ff13 	bl	80002a8 <__aeabi_dsub>
 8008482:	4b23      	ldr	r3, [pc, #140]	; (8008510 <__ieee754_rem_pio2+0x410>)
 8008484:	2200      	movs	r2, #0
 8008486:	f7f8 f8c7 	bl	8000618 <__aeabi_dmul>
 800848a:	460f      	mov	r7, r1
 800848c:	4606      	mov	r6, r0
 800848e:	f7f8 fb73 	bl	8000b78 <__aeabi_d2iz>
 8008492:	f7f8 f857 	bl	8000544 <__aeabi_i2d>
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	4630      	mov	r0, r6
 800849c:	4639      	mov	r1, r7
 800849e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80084a2:	f7f7 ff01 	bl	80002a8 <__aeabi_dsub>
 80084a6:	4b1a      	ldr	r3, [pc, #104]	; (8008510 <__ieee754_rem_pio2+0x410>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	f7f8 f8b5 	bl	8000618 <__aeabi_dmul>
 80084ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80084b2:	ad04      	add	r5, sp, #16
 80084b4:	f04f 0803 	mov.w	r8, #3
 80084b8:	46a9      	mov	r9, r5
 80084ba:	2600      	movs	r6, #0
 80084bc:	2700      	movs	r7, #0
 80084be:	4632      	mov	r2, r6
 80084c0:	463b      	mov	r3, r7
 80084c2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80084c6:	46c3      	mov	fp, r8
 80084c8:	3d08      	subs	r5, #8
 80084ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80084ce:	f7f8 fb0b 	bl	8000ae8 <__aeabi_dcmpeq>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	d1f3      	bne.n	80084be <__ieee754_rem_pio2+0x3be>
 80084d6:	4b0f      	ldr	r3, [pc, #60]	; (8008514 <__ieee754_rem_pio2+0x414>)
 80084d8:	9301      	str	r3, [sp, #4]
 80084da:	2302      	movs	r3, #2
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	4622      	mov	r2, r4
 80084e0:	465b      	mov	r3, fp
 80084e2:	4651      	mov	r1, sl
 80084e4:	4648      	mov	r0, r9
 80084e6:	f000 f993 	bl	8008810 <__kernel_rem_pio2>
 80084ea:	9b02      	ldr	r3, [sp, #8]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	4683      	mov	fp, r0
 80084f0:	f6bf ae46 	bge.w	8008180 <__ieee754_rem_pio2+0x80>
 80084f4:	e9da 2100 	ldrd	r2, r1, [sl]
 80084f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084fc:	e9ca 2300 	strd	r2, r3, [sl]
 8008500:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008504:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008508:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800850c:	e73a      	b.n	8008384 <__ieee754_rem_pio2+0x284>
 800850e:	bf00      	nop
 8008510:	41700000 	.word	0x41700000
 8008514:	080097a8 	.word	0x080097a8

08008518 <__ieee754_sqrt>:
 8008518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800851c:	ec55 4b10 	vmov	r4, r5, d0
 8008520:	4e55      	ldr	r6, [pc, #340]	; (8008678 <__ieee754_sqrt+0x160>)
 8008522:	43ae      	bics	r6, r5
 8008524:	ee10 0a10 	vmov	r0, s0
 8008528:	ee10 3a10 	vmov	r3, s0
 800852c:	462a      	mov	r2, r5
 800852e:	4629      	mov	r1, r5
 8008530:	d110      	bne.n	8008554 <__ieee754_sqrt+0x3c>
 8008532:	ee10 2a10 	vmov	r2, s0
 8008536:	462b      	mov	r3, r5
 8008538:	f7f8 f86e 	bl	8000618 <__aeabi_dmul>
 800853c:	4602      	mov	r2, r0
 800853e:	460b      	mov	r3, r1
 8008540:	4620      	mov	r0, r4
 8008542:	4629      	mov	r1, r5
 8008544:	f7f7 feb2 	bl	80002ac <__adddf3>
 8008548:	4604      	mov	r4, r0
 800854a:	460d      	mov	r5, r1
 800854c:	ec45 4b10 	vmov	d0, r4, r5
 8008550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008554:	2d00      	cmp	r5, #0
 8008556:	dc10      	bgt.n	800857a <__ieee754_sqrt+0x62>
 8008558:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800855c:	4330      	orrs	r0, r6
 800855e:	d0f5      	beq.n	800854c <__ieee754_sqrt+0x34>
 8008560:	b15d      	cbz	r5, 800857a <__ieee754_sqrt+0x62>
 8008562:	ee10 2a10 	vmov	r2, s0
 8008566:	462b      	mov	r3, r5
 8008568:	ee10 0a10 	vmov	r0, s0
 800856c:	f7f7 fe9c 	bl	80002a8 <__aeabi_dsub>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	f7f8 f97a 	bl	800086c <__aeabi_ddiv>
 8008578:	e7e6      	b.n	8008548 <__ieee754_sqrt+0x30>
 800857a:	1512      	asrs	r2, r2, #20
 800857c:	d074      	beq.n	8008668 <__ieee754_sqrt+0x150>
 800857e:	07d4      	lsls	r4, r2, #31
 8008580:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008584:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800858c:	bf5e      	ittt	pl
 800858e:	0fda      	lsrpl	r2, r3, #31
 8008590:	005b      	lslpl	r3, r3, #1
 8008592:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008596:	2400      	movs	r4, #0
 8008598:	0fda      	lsrs	r2, r3, #31
 800859a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800859e:	107f      	asrs	r7, r7, #1
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	2516      	movs	r5, #22
 80085a4:	4620      	mov	r0, r4
 80085a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80085aa:	1886      	adds	r6, r0, r2
 80085ac:	428e      	cmp	r6, r1
 80085ae:	bfde      	ittt	le
 80085b0:	1b89      	suble	r1, r1, r6
 80085b2:	18b0      	addle	r0, r6, r2
 80085b4:	18a4      	addle	r4, r4, r2
 80085b6:	0049      	lsls	r1, r1, #1
 80085b8:	3d01      	subs	r5, #1
 80085ba:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80085be:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80085c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80085c6:	d1f0      	bne.n	80085aa <__ieee754_sqrt+0x92>
 80085c8:	462a      	mov	r2, r5
 80085ca:	f04f 0e20 	mov.w	lr, #32
 80085ce:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80085d2:	4281      	cmp	r1, r0
 80085d4:	eb06 0c05 	add.w	ip, r6, r5
 80085d8:	dc02      	bgt.n	80085e0 <__ieee754_sqrt+0xc8>
 80085da:	d113      	bne.n	8008604 <__ieee754_sqrt+0xec>
 80085dc:	459c      	cmp	ip, r3
 80085de:	d811      	bhi.n	8008604 <__ieee754_sqrt+0xec>
 80085e0:	f1bc 0f00 	cmp.w	ip, #0
 80085e4:	eb0c 0506 	add.w	r5, ip, r6
 80085e8:	da43      	bge.n	8008672 <__ieee754_sqrt+0x15a>
 80085ea:	2d00      	cmp	r5, #0
 80085ec:	db41      	blt.n	8008672 <__ieee754_sqrt+0x15a>
 80085ee:	f100 0801 	add.w	r8, r0, #1
 80085f2:	1a09      	subs	r1, r1, r0
 80085f4:	459c      	cmp	ip, r3
 80085f6:	bf88      	it	hi
 80085f8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80085fc:	eba3 030c 	sub.w	r3, r3, ip
 8008600:	4432      	add	r2, r6
 8008602:	4640      	mov	r0, r8
 8008604:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008608:	f1be 0e01 	subs.w	lr, lr, #1
 800860c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008610:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008614:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008618:	d1db      	bne.n	80085d2 <__ieee754_sqrt+0xba>
 800861a:	430b      	orrs	r3, r1
 800861c:	d006      	beq.n	800862c <__ieee754_sqrt+0x114>
 800861e:	1c50      	adds	r0, r2, #1
 8008620:	bf13      	iteet	ne
 8008622:	3201      	addne	r2, #1
 8008624:	3401      	addeq	r4, #1
 8008626:	4672      	moveq	r2, lr
 8008628:	f022 0201 	bicne.w	r2, r2, #1
 800862c:	1063      	asrs	r3, r4, #1
 800862e:	0852      	lsrs	r2, r2, #1
 8008630:	07e1      	lsls	r1, r4, #31
 8008632:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008636:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800863a:	bf48      	it	mi
 800863c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008640:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008644:	4614      	mov	r4, r2
 8008646:	e781      	b.n	800854c <__ieee754_sqrt+0x34>
 8008648:	0ad9      	lsrs	r1, r3, #11
 800864a:	3815      	subs	r0, #21
 800864c:	055b      	lsls	r3, r3, #21
 800864e:	2900      	cmp	r1, #0
 8008650:	d0fa      	beq.n	8008648 <__ieee754_sqrt+0x130>
 8008652:	02cd      	lsls	r5, r1, #11
 8008654:	d50a      	bpl.n	800866c <__ieee754_sqrt+0x154>
 8008656:	f1c2 0420 	rsb	r4, r2, #32
 800865a:	fa23 f404 	lsr.w	r4, r3, r4
 800865e:	1e55      	subs	r5, r2, #1
 8008660:	4093      	lsls	r3, r2
 8008662:	4321      	orrs	r1, r4
 8008664:	1b42      	subs	r2, r0, r5
 8008666:	e78a      	b.n	800857e <__ieee754_sqrt+0x66>
 8008668:	4610      	mov	r0, r2
 800866a:	e7f0      	b.n	800864e <__ieee754_sqrt+0x136>
 800866c:	0049      	lsls	r1, r1, #1
 800866e:	3201      	adds	r2, #1
 8008670:	e7ef      	b.n	8008652 <__ieee754_sqrt+0x13a>
 8008672:	4680      	mov	r8, r0
 8008674:	e7bd      	b.n	80085f2 <__ieee754_sqrt+0xda>
 8008676:	bf00      	nop
 8008678:	7ff00000 	.word	0x7ff00000
 800867c:	00000000 	.word	0x00000000

08008680 <__kernel_cos>:
 8008680:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008684:	ec57 6b10 	vmov	r6, r7, d0
 8008688:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800868c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008690:	ed8d 1b00 	vstr	d1, [sp]
 8008694:	da07      	bge.n	80086a6 <__kernel_cos+0x26>
 8008696:	ee10 0a10 	vmov	r0, s0
 800869a:	4639      	mov	r1, r7
 800869c:	f7f8 fa6c 	bl	8000b78 <__aeabi_d2iz>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	f000 8088 	beq.w	80087b6 <__kernel_cos+0x136>
 80086a6:	4632      	mov	r2, r6
 80086a8:	463b      	mov	r3, r7
 80086aa:	4630      	mov	r0, r6
 80086ac:	4639      	mov	r1, r7
 80086ae:	f7f7 ffb3 	bl	8000618 <__aeabi_dmul>
 80086b2:	4b51      	ldr	r3, [pc, #324]	; (80087f8 <__kernel_cos+0x178>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	4604      	mov	r4, r0
 80086b8:	460d      	mov	r5, r1
 80086ba:	f7f7 ffad 	bl	8000618 <__aeabi_dmul>
 80086be:	a340      	add	r3, pc, #256	; (adr r3, 80087c0 <__kernel_cos+0x140>)
 80086c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c4:	4682      	mov	sl, r0
 80086c6:	468b      	mov	fp, r1
 80086c8:	4620      	mov	r0, r4
 80086ca:	4629      	mov	r1, r5
 80086cc:	f7f7 ffa4 	bl	8000618 <__aeabi_dmul>
 80086d0:	a33d      	add	r3, pc, #244	; (adr r3, 80087c8 <__kernel_cos+0x148>)
 80086d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d6:	f7f7 fde9 	bl	80002ac <__adddf3>
 80086da:	4622      	mov	r2, r4
 80086dc:	462b      	mov	r3, r5
 80086de:	f7f7 ff9b 	bl	8000618 <__aeabi_dmul>
 80086e2:	a33b      	add	r3, pc, #236	; (adr r3, 80087d0 <__kernel_cos+0x150>)
 80086e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e8:	f7f7 fdde 	bl	80002a8 <__aeabi_dsub>
 80086ec:	4622      	mov	r2, r4
 80086ee:	462b      	mov	r3, r5
 80086f0:	f7f7 ff92 	bl	8000618 <__aeabi_dmul>
 80086f4:	a338      	add	r3, pc, #224	; (adr r3, 80087d8 <__kernel_cos+0x158>)
 80086f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fa:	f7f7 fdd7 	bl	80002ac <__adddf3>
 80086fe:	4622      	mov	r2, r4
 8008700:	462b      	mov	r3, r5
 8008702:	f7f7 ff89 	bl	8000618 <__aeabi_dmul>
 8008706:	a336      	add	r3, pc, #216	; (adr r3, 80087e0 <__kernel_cos+0x160>)
 8008708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870c:	f7f7 fdcc 	bl	80002a8 <__aeabi_dsub>
 8008710:	4622      	mov	r2, r4
 8008712:	462b      	mov	r3, r5
 8008714:	f7f7 ff80 	bl	8000618 <__aeabi_dmul>
 8008718:	a333      	add	r3, pc, #204	; (adr r3, 80087e8 <__kernel_cos+0x168>)
 800871a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871e:	f7f7 fdc5 	bl	80002ac <__adddf3>
 8008722:	4622      	mov	r2, r4
 8008724:	462b      	mov	r3, r5
 8008726:	f7f7 ff77 	bl	8000618 <__aeabi_dmul>
 800872a:	4622      	mov	r2, r4
 800872c:	462b      	mov	r3, r5
 800872e:	f7f7 ff73 	bl	8000618 <__aeabi_dmul>
 8008732:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008736:	4604      	mov	r4, r0
 8008738:	460d      	mov	r5, r1
 800873a:	4630      	mov	r0, r6
 800873c:	4639      	mov	r1, r7
 800873e:	f7f7 ff6b 	bl	8000618 <__aeabi_dmul>
 8008742:	460b      	mov	r3, r1
 8008744:	4602      	mov	r2, r0
 8008746:	4629      	mov	r1, r5
 8008748:	4620      	mov	r0, r4
 800874a:	f7f7 fdad 	bl	80002a8 <__aeabi_dsub>
 800874e:	4b2b      	ldr	r3, [pc, #172]	; (80087fc <__kernel_cos+0x17c>)
 8008750:	4598      	cmp	r8, r3
 8008752:	4606      	mov	r6, r0
 8008754:	460f      	mov	r7, r1
 8008756:	dc10      	bgt.n	800877a <__kernel_cos+0xfa>
 8008758:	4602      	mov	r2, r0
 800875a:	460b      	mov	r3, r1
 800875c:	4650      	mov	r0, sl
 800875e:	4659      	mov	r1, fp
 8008760:	f7f7 fda2 	bl	80002a8 <__aeabi_dsub>
 8008764:	460b      	mov	r3, r1
 8008766:	4926      	ldr	r1, [pc, #152]	; (8008800 <__kernel_cos+0x180>)
 8008768:	4602      	mov	r2, r0
 800876a:	2000      	movs	r0, #0
 800876c:	f7f7 fd9c 	bl	80002a8 <__aeabi_dsub>
 8008770:	ec41 0b10 	vmov	d0, r0, r1
 8008774:	b003      	add	sp, #12
 8008776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800877a:	4b22      	ldr	r3, [pc, #136]	; (8008804 <__kernel_cos+0x184>)
 800877c:	4920      	ldr	r1, [pc, #128]	; (8008800 <__kernel_cos+0x180>)
 800877e:	4598      	cmp	r8, r3
 8008780:	bfcc      	ite	gt
 8008782:	4d21      	ldrgt	r5, [pc, #132]	; (8008808 <__kernel_cos+0x188>)
 8008784:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008788:	2400      	movs	r4, #0
 800878a:	4622      	mov	r2, r4
 800878c:	462b      	mov	r3, r5
 800878e:	2000      	movs	r0, #0
 8008790:	f7f7 fd8a 	bl	80002a8 <__aeabi_dsub>
 8008794:	4622      	mov	r2, r4
 8008796:	4680      	mov	r8, r0
 8008798:	4689      	mov	r9, r1
 800879a:	462b      	mov	r3, r5
 800879c:	4650      	mov	r0, sl
 800879e:	4659      	mov	r1, fp
 80087a0:	f7f7 fd82 	bl	80002a8 <__aeabi_dsub>
 80087a4:	4632      	mov	r2, r6
 80087a6:	463b      	mov	r3, r7
 80087a8:	f7f7 fd7e 	bl	80002a8 <__aeabi_dsub>
 80087ac:	4602      	mov	r2, r0
 80087ae:	460b      	mov	r3, r1
 80087b0:	4640      	mov	r0, r8
 80087b2:	4649      	mov	r1, r9
 80087b4:	e7da      	b.n	800876c <__kernel_cos+0xec>
 80087b6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80087f0 <__kernel_cos+0x170>
 80087ba:	e7db      	b.n	8008774 <__kernel_cos+0xf4>
 80087bc:	f3af 8000 	nop.w
 80087c0:	be8838d4 	.word	0xbe8838d4
 80087c4:	bda8fae9 	.word	0xbda8fae9
 80087c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80087cc:	3e21ee9e 	.word	0x3e21ee9e
 80087d0:	809c52ad 	.word	0x809c52ad
 80087d4:	3e927e4f 	.word	0x3e927e4f
 80087d8:	19cb1590 	.word	0x19cb1590
 80087dc:	3efa01a0 	.word	0x3efa01a0
 80087e0:	16c15177 	.word	0x16c15177
 80087e4:	3f56c16c 	.word	0x3f56c16c
 80087e8:	5555554c 	.word	0x5555554c
 80087ec:	3fa55555 	.word	0x3fa55555
 80087f0:	00000000 	.word	0x00000000
 80087f4:	3ff00000 	.word	0x3ff00000
 80087f8:	3fe00000 	.word	0x3fe00000
 80087fc:	3fd33332 	.word	0x3fd33332
 8008800:	3ff00000 	.word	0x3ff00000
 8008804:	3fe90000 	.word	0x3fe90000
 8008808:	3fd20000 	.word	0x3fd20000
 800880c:	00000000 	.word	0x00000000

08008810 <__kernel_rem_pio2>:
 8008810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008814:	ed2d 8b02 	vpush	{d8}
 8008818:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800881c:	f112 0f14 	cmn.w	r2, #20
 8008820:	9308      	str	r3, [sp, #32]
 8008822:	9101      	str	r1, [sp, #4]
 8008824:	4bc4      	ldr	r3, [pc, #784]	; (8008b38 <__kernel_rem_pio2+0x328>)
 8008826:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008828:	900b      	str	r0, [sp, #44]	; 0x2c
 800882a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800882e:	9302      	str	r3, [sp, #8]
 8008830:	9b08      	ldr	r3, [sp, #32]
 8008832:	f103 33ff 	add.w	r3, r3, #4294967295
 8008836:	bfa8      	it	ge
 8008838:	1ed4      	subge	r4, r2, #3
 800883a:	9306      	str	r3, [sp, #24]
 800883c:	bfb2      	itee	lt
 800883e:	2400      	movlt	r4, #0
 8008840:	2318      	movge	r3, #24
 8008842:	fb94 f4f3 	sdivge	r4, r4, r3
 8008846:	f06f 0317 	mvn.w	r3, #23
 800884a:	fb04 3303 	mla	r3, r4, r3, r3
 800884e:	eb03 0a02 	add.w	sl, r3, r2
 8008852:	9b02      	ldr	r3, [sp, #8]
 8008854:	9a06      	ldr	r2, [sp, #24]
 8008856:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008b28 <__kernel_rem_pio2+0x318>
 800885a:	eb03 0802 	add.w	r8, r3, r2
 800885e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008860:	1aa7      	subs	r7, r4, r2
 8008862:	ae22      	add	r6, sp, #136	; 0x88
 8008864:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008868:	2500      	movs	r5, #0
 800886a:	4545      	cmp	r5, r8
 800886c:	dd13      	ble.n	8008896 <__kernel_rem_pio2+0x86>
 800886e:	9b08      	ldr	r3, [sp, #32]
 8008870:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8008b28 <__kernel_rem_pio2+0x318>
 8008874:	aa22      	add	r2, sp, #136	; 0x88
 8008876:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800887a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800887e:	f04f 0800 	mov.w	r8, #0
 8008882:	9b02      	ldr	r3, [sp, #8]
 8008884:	4598      	cmp	r8, r3
 8008886:	dc2f      	bgt.n	80088e8 <__kernel_rem_pio2+0xd8>
 8008888:	ed8d 8b04 	vstr	d8, [sp, #16]
 800888c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008890:	462f      	mov	r7, r5
 8008892:	2600      	movs	r6, #0
 8008894:	e01b      	b.n	80088ce <__kernel_rem_pio2+0xbe>
 8008896:	42ef      	cmn	r7, r5
 8008898:	d407      	bmi.n	80088aa <__kernel_rem_pio2+0x9a>
 800889a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800889e:	f7f7 fe51 	bl	8000544 <__aeabi_i2d>
 80088a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80088a6:	3501      	adds	r5, #1
 80088a8:	e7df      	b.n	800886a <__kernel_rem_pio2+0x5a>
 80088aa:	ec51 0b18 	vmov	r0, r1, d8
 80088ae:	e7f8      	b.n	80088a2 <__kernel_rem_pio2+0x92>
 80088b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80088b8:	f7f7 feae 	bl	8000618 <__aeabi_dmul>
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088c4:	f7f7 fcf2 	bl	80002ac <__adddf3>
 80088c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088cc:	3601      	adds	r6, #1
 80088ce:	9b06      	ldr	r3, [sp, #24]
 80088d0:	429e      	cmp	r6, r3
 80088d2:	f1a7 0708 	sub.w	r7, r7, #8
 80088d6:	ddeb      	ble.n	80088b0 <__kernel_rem_pio2+0xa0>
 80088d8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80088dc:	f108 0801 	add.w	r8, r8, #1
 80088e0:	ecab 7b02 	vstmia	fp!, {d7}
 80088e4:	3508      	adds	r5, #8
 80088e6:	e7cc      	b.n	8008882 <__kernel_rem_pio2+0x72>
 80088e8:	9b02      	ldr	r3, [sp, #8]
 80088ea:	aa0e      	add	r2, sp, #56	; 0x38
 80088ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80088f0:	930d      	str	r3, [sp, #52]	; 0x34
 80088f2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80088f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80088f8:	9c02      	ldr	r4, [sp, #8]
 80088fa:	930c      	str	r3, [sp, #48]	; 0x30
 80088fc:	00e3      	lsls	r3, r4, #3
 80088fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008900:	ab9a      	add	r3, sp, #616	; 0x268
 8008902:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008906:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800890a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800890e:	ab72      	add	r3, sp, #456	; 0x1c8
 8008910:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008914:	46c3      	mov	fp, r8
 8008916:	46a1      	mov	r9, r4
 8008918:	f1b9 0f00 	cmp.w	r9, #0
 800891c:	f1a5 0508 	sub.w	r5, r5, #8
 8008920:	dc77      	bgt.n	8008a12 <__kernel_rem_pio2+0x202>
 8008922:	ec47 6b10 	vmov	d0, r6, r7
 8008926:	4650      	mov	r0, sl
 8008928:	f000 fc46 	bl	80091b8 <scalbn>
 800892c:	ec57 6b10 	vmov	r6, r7, d0
 8008930:	2200      	movs	r2, #0
 8008932:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008936:	ee10 0a10 	vmov	r0, s0
 800893a:	4639      	mov	r1, r7
 800893c:	f7f7 fe6c 	bl	8000618 <__aeabi_dmul>
 8008940:	ec41 0b10 	vmov	d0, r0, r1
 8008944:	f000 fbb8 	bl	80090b8 <floor>
 8008948:	4b7c      	ldr	r3, [pc, #496]	; (8008b3c <__kernel_rem_pio2+0x32c>)
 800894a:	ec51 0b10 	vmov	r0, r1, d0
 800894e:	2200      	movs	r2, #0
 8008950:	f7f7 fe62 	bl	8000618 <__aeabi_dmul>
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	4630      	mov	r0, r6
 800895a:	4639      	mov	r1, r7
 800895c:	f7f7 fca4 	bl	80002a8 <__aeabi_dsub>
 8008960:	460f      	mov	r7, r1
 8008962:	4606      	mov	r6, r0
 8008964:	f7f8 f908 	bl	8000b78 <__aeabi_d2iz>
 8008968:	9004      	str	r0, [sp, #16]
 800896a:	f7f7 fdeb 	bl	8000544 <__aeabi_i2d>
 800896e:	4602      	mov	r2, r0
 8008970:	460b      	mov	r3, r1
 8008972:	4630      	mov	r0, r6
 8008974:	4639      	mov	r1, r7
 8008976:	f7f7 fc97 	bl	80002a8 <__aeabi_dsub>
 800897a:	f1ba 0f00 	cmp.w	sl, #0
 800897e:	4606      	mov	r6, r0
 8008980:	460f      	mov	r7, r1
 8008982:	dd6d      	ble.n	8008a60 <__kernel_rem_pio2+0x250>
 8008984:	1e62      	subs	r2, r4, #1
 8008986:	ab0e      	add	r3, sp, #56	; 0x38
 8008988:	9d04      	ldr	r5, [sp, #16]
 800898a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800898e:	f1ca 0118 	rsb	r1, sl, #24
 8008992:	fa40 f301 	asr.w	r3, r0, r1
 8008996:	441d      	add	r5, r3
 8008998:	408b      	lsls	r3, r1
 800899a:	1ac0      	subs	r0, r0, r3
 800899c:	ab0e      	add	r3, sp, #56	; 0x38
 800899e:	9504      	str	r5, [sp, #16]
 80089a0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80089a4:	f1ca 0317 	rsb	r3, sl, #23
 80089a8:	fa40 fb03 	asr.w	fp, r0, r3
 80089ac:	f1bb 0f00 	cmp.w	fp, #0
 80089b0:	dd65      	ble.n	8008a7e <__kernel_rem_pio2+0x26e>
 80089b2:	9b04      	ldr	r3, [sp, #16]
 80089b4:	2200      	movs	r2, #0
 80089b6:	3301      	adds	r3, #1
 80089b8:	9304      	str	r3, [sp, #16]
 80089ba:	4615      	mov	r5, r2
 80089bc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80089c0:	4294      	cmp	r4, r2
 80089c2:	f300 809c 	bgt.w	8008afe <__kernel_rem_pio2+0x2ee>
 80089c6:	f1ba 0f00 	cmp.w	sl, #0
 80089ca:	dd07      	ble.n	80089dc <__kernel_rem_pio2+0x1cc>
 80089cc:	f1ba 0f01 	cmp.w	sl, #1
 80089d0:	f000 80c0 	beq.w	8008b54 <__kernel_rem_pio2+0x344>
 80089d4:	f1ba 0f02 	cmp.w	sl, #2
 80089d8:	f000 80c6 	beq.w	8008b68 <__kernel_rem_pio2+0x358>
 80089dc:	f1bb 0f02 	cmp.w	fp, #2
 80089e0:	d14d      	bne.n	8008a7e <__kernel_rem_pio2+0x26e>
 80089e2:	4632      	mov	r2, r6
 80089e4:	463b      	mov	r3, r7
 80089e6:	4956      	ldr	r1, [pc, #344]	; (8008b40 <__kernel_rem_pio2+0x330>)
 80089e8:	2000      	movs	r0, #0
 80089ea:	f7f7 fc5d 	bl	80002a8 <__aeabi_dsub>
 80089ee:	4606      	mov	r6, r0
 80089f0:	460f      	mov	r7, r1
 80089f2:	2d00      	cmp	r5, #0
 80089f4:	d043      	beq.n	8008a7e <__kernel_rem_pio2+0x26e>
 80089f6:	4650      	mov	r0, sl
 80089f8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8008b30 <__kernel_rem_pio2+0x320>
 80089fc:	f000 fbdc 	bl	80091b8 <scalbn>
 8008a00:	4630      	mov	r0, r6
 8008a02:	4639      	mov	r1, r7
 8008a04:	ec53 2b10 	vmov	r2, r3, d0
 8008a08:	f7f7 fc4e 	bl	80002a8 <__aeabi_dsub>
 8008a0c:	4606      	mov	r6, r0
 8008a0e:	460f      	mov	r7, r1
 8008a10:	e035      	b.n	8008a7e <__kernel_rem_pio2+0x26e>
 8008a12:	4b4c      	ldr	r3, [pc, #304]	; (8008b44 <__kernel_rem_pio2+0x334>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	4630      	mov	r0, r6
 8008a18:	4639      	mov	r1, r7
 8008a1a:	f7f7 fdfd 	bl	8000618 <__aeabi_dmul>
 8008a1e:	f7f8 f8ab 	bl	8000b78 <__aeabi_d2iz>
 8008a22:	f7f7 fd8f 	bl	8000544 <__aeabi_i2d>
 8008a26:	4602      	mov	r2, r0
 8008a28:	460b      	mov	r3, r1
 8008a2a:	ec43 2b18 	vmov	d8, r2, r3
 8008a2e:	4b46      	ldr	r3, [pc, #280]	; (8008b48 <__kernel_rem_pio2+0x338>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	f7f7 fdf1 	bl	8000618 <__aeabi_dmul>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	4639      	mov	r1, r7
 8008a3e:	f7f7 fc33 	bl	80002a8 <__aeabi_dsub>
 8008a42:	f7f8 f899 	bl	8000b78 <__aeabi_d2iz>
 8008a46:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a4a:	f84b 0b04 	str.w	r0, [fp], #4
 8008a4e:	ec51 0b18 	vmov	r0, r1, d8
 8008a52:	f7f7 fc2b 	bl	80002ac <__adddf3>
 8008a56:	f109 39ff 	add.w	r9, r9, #4294967295
 8008a5a:	4606      	mov	r6, r0
 8008a5c:	460f      	mov	r7, r1
 8008a5e:	e75b      	b.n	8008918 <__kernel_rem_pio2+0x108>
 8008a60:	d106      	bne.n	8008a70 <__kernel_rem_pio2+0x260>
 8008a62:	1e63      	subs	r3, r4, #1
 8008a64:	aa0e      	add	r2, sp, #56	; 0x38
 8008a66:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008a6a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8008a6e:	e79d      	b.n	80089ac <__kernel_rem_pio2+0x19c>
 8008a70:	4b36      	ldr	r3, [pc, #216]	; (8008b4c <__kernel_rem_pio2+0x33c>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	f7f8 f856 	bl	8000b24 <__aeabi_dcmpge>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d13d      	bne.n	8008af8 <__kernel_rem_pio2+0x2e8>
 8008a7c:	4683      	mov	fp, r0
 8008a7e:	2200      	movs	r2, #0
 8008a80:	2300      	movs	r3, #0
 8008a82:	4630      	mov	r0, r6
 8008a84:	4639      	mov	r1, r7
 8008a86:	f7f8 f82f 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	f000 80c0 	beq.w	8008c10 <__kernel_rem_pio2+0x400>
 8008a90:	1e65      	subs	r5, r4, #1
 8008a92:	462b      	mov	r3, r5
 8008a94:	2200      	movs	r2, #0
 8008a96:	9902      	ldr	r1, [sp, #8]
 8008a98:	428b      	cmp	r3, r1
 8008a9a:	da6c      	bge.n	8008b76 <__kernel_rem_pio2+0x366>
 8008a9c:	2a00      	cmp	r2, #0
 8008a9e:	f000 8089 	beq.w	8008bb4 <__kernel_rem_pio2+0x3a4>
 8008aa2:	ab0e      	add	r3, sp, #56	; 0x38
 8008aa4:	f1aa 0a18 	sub.w	sl, sl, #24
 8008aa8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f000 80ad 	beq.w	8008c0c <__kernel_rem_pio2+0x3fc>
 8008ab2:	4650      	mov	r0, sl
 8008ab4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8008b30 <__kernel_rem_pio2+0x320>
 8008ab8:	f000 fb7e 	bl	80091b8 <scalbn>
 8008abc:	ab9a      	add	r3, sp, #616	; 0x268
 8008abe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008ac2:	ec57 6b10 	vmov	r6, r7, d0
 8008ac6:	00ec      	lsls	r4, r5, #3
 8008ac8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8008acc:	46aa      	mov	sl, r5
 8008ace:	f1ba 0f00 	cmp.w	sl, #0
 8008ad2:	f280 80d6 	bge.w	8008c82 <__kernel_rem_pio2+0x472>
 8008ad6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8008b28 <__kernel_rem_pio2+0x318>
 8008ada:	462e      	mov	r6, r5
 8008adc:	2e00      	cmp	r6, #0
 8008ade:	f2c0 8104 	blt.w	8008cea <__kernel_rem_pio2+0x4da>
 8008ae2:	ab72      	add	r3, sp, #456	; 0x1c8
 8008ae4:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008ae8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008b50 <__kernel_rem_pio2+0x340>
 8008aec:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008af0:	f04f 0800 	mov.w	r8, #0
 8008af4:	1baf      	subs	r7, r5, r6
 8008af6:	e0ea      	b.n	8008cce <__kernel_rem_pio2+0x4be>
 8008af8:	f04f 0b02 	mov.w	fp, #2
 8008afc:	e759      	b.n	80089b2 <__kernel_rem_pio2+0x1a2>
 8008afe:	f8d8 3000 	ldr.w	r3, [r8]
 8008b02:	b955      	cbnz	r5, 8008b1a <__kernel_rem_pio2+0x30a>
 8008b04:	b123      	cbz	r3, 8008b10 <__kernel_rem_pio2+0x300>
 8008b06:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008b0a:	f8c8 3000 	str.w	r3, [r8]
 8008b0e:	2301      	movs	r3, #1
 8008b10:	3201      	adds	r2, #1
 8008b12:	f108 0804 	add.w	r8, r8, #4
 8008b16:	461d      	mov	r5, r3
 8008b18:	e752      	b.n	80089c0 <__kernel_rem_pio2+0x1b0>
 8008b1a:	1acb      	subs	r3, r1, r3
 8008b1c:	f8c8 3000 	str.w	r3, [r8]
 8008b20:	462b      	mov	r3, r5
 8008b22:	e7f5      	b.n	8008b10 <__kernel_rem_pio2+0x300>
 8008b24:	f3af 8000 	nop.w
	...
 8008b34:	3ff00000 	.word	0x3ff00000
 8008b38:	080098f0 	.word	0x080098f0
 8008b3c:	40200000 	.word	0x40200000
 8008b40:	3ff00000 	.word	0x3ff00000
 8008b44:	3e700000 	.word	0x3e700000
 8008b48:	41700000 	.word	0x41700000
 8008b4c:	3fe00000 	.word	0x3fe00000
 8008b50:	080098b0 	.word	0x080098b0
 8008b54:	1e62      	subs	r2, r4, #1
 8008b56:	ab0e      	add	r3, sp, #56	; 0x38
 8008b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b5c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008b60:	a90e      	add	r1, sp, #56	; 0x38
 8008b62:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008b66:	e739      	b.n	80089dc <__kernel_rem_pio2+0x1cc>
 8008b68:	1e62      	subs	r2, r4, #1
 8008b6a:	ab0e      	add	r3, sp, #56	; 0x38
 8008b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b70:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008b74:	e7f4      	b.n	8008b60 <__kernel_rem_pio2+0x350>
 8008b76:	a90e      	add	r1, sp, #56	; 0x38
 8008b78:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	430a      	orrs	r2, r1
 8008b80:	e789      	b.n	8008a96 <__kernel_rem_pio2+0x286>
 8008b82:	3301      	adds	r3, #1
 8008b84:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008b88:	2900      	cmp	r1, #0
 8008b8a:	d0fa      	beq.n	8008b82 <__kernel_rem_pio2+0x372>
 8008b8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b8e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008b92:	446a      	add	r2, sp
 8008b94:	3a98      	subs	r2, #152	; 0x98
 8008b96:	920a      	str	r2, [sp, #40]	; 0x28
 8008b98:	9a08      	ldr	r2, [sp, #32]
 8008b9a:	18e3      	adds	r3, r4, r3
 8008b9c:	18a5      	adds	r5, r4, r2
 8008b9e:	aa22      	add	r2, sp, #136	; 0x88
 8008ba0:	f104 0801 	add.w	r8, r4, #1
 8008ba4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008ba8:	9304      	str	r3, [sp, #16]
 8008baa:	9b04      	ldr	r3, [sp, #16]
 8008bac:	4543      	cmp	r3, r8
 8008bae:	da04      	bge.n	8008bba <__kernel_rem_pio2+0x3aa>
 8008bb0:	461c      	mov	r4, r3
 8008bb2:	e6a3      	b.n	80088fc <__kernel_rem_pio2+0xec>
 8008bb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e7e4      	b.n	8008b84 <__kernel_rem_pio2+0x374>
 8008bba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bbc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008bc0:	f7f7 fcc0 	bl	8000544 <__aeabi_i2d>
 8008bc4:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008bc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bca:	46ab      	mov	fp, r5
 8008bcc:	461c      	mov	r4, r3
 8008bce:	f04f 0900 	mov.w	r9, #0
 8008bd2:	2600      	movs	r6, #0
 8008bd4:	2700      	movs	r7, #0
 8008bd6:	9b06      	ldr	r3, [sp, #24]
 8008bd8:	4599      	cmp	r9, r3
 8008bda:	dd06      	ble.n	8008bea <__kernel_rem_pio2+0x3da>
 8008bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bde:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008be2:	f108 0801 	add.w	r8, r8, #1
 8008be6:	930a      	str	r3, [sp, #40]	; 0x28
 8008be8:	e7df      	b.n	8008baa <__kernel_rem_pio2+0x39a>
 8008bea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008bee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008bf2:	f7f7 fd11 	bl	8000618 <__aeabi_dmul>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	4639      	mov	r1, r7
 8008bfe:	f7f7 fb55 	bl	80002ac <__adddf3>
 8008c02:	f109 0901 	add.w	r9, r9, #1
 8008c06:	4606      	mov	r6, r0
 8008c08:	460f      	mov	r7, r1
 8008c0a:	e7e4      	b.n	8008bd6 <__kernel_rem_pio2+0x3c6>
 8008c0c:	3d01      	subs	r5, #1
 8008c0e:	e748      	b.n	8008aa2 <__kernel_rem_pio2+0x292>
 8008c10:	ec47 6b10 	vmov	d0, r6, r7
 8008c14:	f1ca 0000 	rsb	r0, sl, #0
 8008c18:	f000 face 	bl	80091b8 <scalbn>
 8008c1c:	ec57 6b10 	vmov	r6, r7, d0
 8008c20:	4ba0      	ldr	r3, [pc, #640]	; (8008ea4 <__kernel_rem_pio2+0x694>)
 8008c22:	ee10 0a10 	vmov	r0, s0
 8008c26:	2200      	movs	r2, #0
 8008c28:	4639      	mov	r1, r7
 8008c2a:	f7f7 ff7b 	bl	8000b24 <__aeabi_dcmpge>
 8008c2e:	b1f8      	cbz	r0, 8008c70 <__kernel_rem_pio2+0x460>
 8008c30:	4b9d      	ldr	r3, [pc, #628]	; (8008ea8 <__kernel_rem_pio2+0x698>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	4630      	mov	r0, r6
 8008c36:	4639      	mov	r1, r7
 8008c38:	f7f7 fcee 	bl	8000618 <__aeabi_dmul>
 8008c3c:	f7f7 ff9c 	bl	8000b78 <__aeabi_d2iz>
 8008c40:	4680      	mov	r8, r0
 8008c42:	f7f7 fc7f 	bl	8000544 <__aeabi_i2d>
 8008c46:	4b97      	ldr	r3, [pc, #604]	; (8008ea4 <__kernel_rem_pio2+0x694>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f7f7 fce5 	bl	8000618 <__aeabi_dmul>
 8008c4e:	460b      	mov	r3, r1
 8008c50:	4602      	mov	r2, r0
 8008c52:	4639      	mov	r1, r7
 8008c54:	4630      	mov	r0, r6
 8008c56:	f7f7 fb27 	bl	80002a8 <__aeabi_dsub>
 8008c5a:	f7f7 ff8d 	bl	8000b78 <__aeabi_d2iz>
 8008c5e:	1c65      	adds	r5, r4, #1
 8008c60:	ab0e      	add	r3, sp, #56	; 0x38
 8008c62:	f10a 0a18 	add.w	sl, sl, #24
 8008c66:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008c6a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008c6e:	e720      	b.n	8008ab2 <__kernel_rem_pio2+0x2a2>
 8008c70:	4630      	mov	r0, r6
 8008c72:	4639      	mov	r1, r7
 8008c74:	f7f7 ff80 	bl	8000b78 <__aeabi_d2iz>
 8008c78:	ab0e      	add	r3, sp, #56	; 0x38
 8008c7a:	4625      	mov	r5, r4
 8008c7c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008c80:	e717      	b.n	8008ab2 <__kernel_rem_pio2+0x2a2>
 8008c82:	ab0e      	add	r3, sp, #56	; 0x38
 8008c84:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008c88:	f7f7 fc5c 	bl	8000544 <__aeabi_i2d>
 8008c8c:	4632      	mov	r2, r6
 8008c8e:	463b      	mov	r3, r7
 8008c90:	f7f7 fcc2 	bl	8000618 <__aeabi_dmul>
 8008c94:	4b84      	ldr	r3, [pc, #528]	; (8008ea8 <__kernel_rem_pio2+0x698>)
 8008c96:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	4639      	mov	r1, r7
 8008ca0:	f7f7 fcba 	bl	8000618 <__aeabi_dmul>
 8008ca4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ca8:	4606      	mov	r6, r0
 8008caa:	460f      	mov	r7, r1
 8008cac:	e70f      	b.n	8008ace <__kernel_rem_pio2+0x2be>
 8008cae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008cb2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008cb6:	f7f7 fcaf 	bl	8000618 <__aeabi_dmul>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cc2:	f7f7 faf3 	bl	80002ac <__adddf3>
 8008cc6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008cca:	f108 0801 	add.w	r8, r8, #1
 8008cce:	9b02      	ldr	r3, [sp, #8]
 8008cd0:	4598      	cmp	r8, r3
 8008cd2:	dc01      	bgt.n	8008cd8 <__kernel_rem_pio2+0x4c8>
 8008cd4:	45b8      	cmp	r8, r7
 8008cd6:	ddea      	ble.n	8008cae <__kernel_rem_pio2+0x49e>
 8008cd8:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008cdc:	ab4a      	add	r3, sp, #296	; 0x128
 8008cde:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008ce2:	ed87 7b00 	vstr	d7, [r7]
 8008ce6:	3e01      	subs	r6, #1
 8008ce8:	e6f8      	b.n	8008adc <__kernel_rem_pio2+0x2cc>
 8008cea:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	dc0b      	bgt.n	8008d08 <__kernel_rem_pio2+0x4f8>
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	dc35      	bgt.n	8008d60 <__kernel_rem_pio2+0x550>
 8008cf4:	d059      	beq.n	8008daa <__kernel_rem_pio2+0x59a>
 8008cf6:	9b04      	ldr	r3, [sp, #16]
 8008cf8:	f003 0007 	and.w	r0, r3, #7
 8008cfc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008d00:	ecbd 8b02 	vpop	{d8}
 8008d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d08:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008d0a:	2b03      	cmp	r3, #3
 8008d0c:	d1f3      	bne.n	8008cf6 <__kernel_rem_pio2+0x4e6>
 8008d0e:	ab4a      	add	r3, sp, #296	; 0x128
 8008d10:	4423      	add	r3, r4
 8008d12:	9306      	str	r3, [sp, #24]
 8008d14:	461c      	mov	r4, r3
 8008d16:	469a      	mov	sl, r3
 8008d18:	9502      	str	r5, [sp, #8]
 8008d1a:	9b02      	ldr	r3, [sp, #8]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f1aa 0a08 	sub.w	sl, sl, #8
 8008d22:	dc6b      	bgt.n	8008dfc <__kernel_rem_pio2+0x5ec>
 8008d24:	46aa      	mov	sl, r5
 8008d26:	f1ba 0f01 	cmp.w	sl, #1
 8008d2a:	f1a4 0408 	sub.w	r4, r4, #8
 8008d2e:	f300 8085 	bgt.w	8008e3c <__kernel_rem_pio2+0x62c>
 8008d32:	9c06      	ldr	r4, [sp, #24]
 8008d34:	2000      	movs	r0, #0
 8008d36:	3408      	adds	r4, #8
 8008d38:	2100      	movs	r1, #0
 8008d3a:	2d01      	cmp	r5, #1
 8008d3c:	f300 809d 	bgt.w	8008e7a <__kernel_rem_pio2+0x66a>
 8008d40:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008d44:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8008d48:	f1bb 0f00 	cmp.w	fp, #0
 8008d4c:	f040 809b 	bne.w	8008e86 <__kernel_rem_pio2+0x676>
 8008d50:	9b01      	ldr	r3, [sp, #4]
 8008d52:	e9c3 5600 	strd	r5, r6, [r3]
 8008d56:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008d5a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008d5e:	e7ca      	b.n	8008cf6 <__kernel_rem_pio2+0x4e6>
 8008d60:	3408      	adds	r4, #8
 8008d62:	ab4a      	add	r3, sp, #296	; 0x128
 8008d64:	441c      	add	r4, r3
 8008d66:	462e      	mov	r6, r5
 8008d68:	2000      	movs	r0, #0
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	2e00      	cmp	r6, #0
 8008d6e:	da36      	bge.n	8008dde <__kernel_rem_pio2+0x5ce>
 8008d70:	f1bb 0f00 	cmp.w	fp, #0
 8008d74:	d039      	beq.n	8008dea <__kernel_rem_pio2+0x5da>
 8008d76:	4602      	mov	r2, r0
 8008d78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d7c:	9c01      	ldr	r4, [sp, #4]
 8008d7e:	e9c4 2300 	strd	r2, r3, [r4]
 8008d82:	4602      	mov	r2, r0
 8008d84:	460b      	mov	r3, r1
 8008d86:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008d8a:	f7f7 fa8d 	bl	80002a8 <__aeabi_dsub>
 8008d8e:	ae4c      	add	r6, sp, #304	; 0x130
 8008d90:	2401      	movs	r4, #1
 8008d92:	42a5      	cmp	r5, r4
 8008d94:	da2c      	bge.n	8008df0 <__kernel_rem_pio2+0x5e0>
 8008d96:	f1bb 0f00 	cmp.w	fp, #0
 8008d9a:	d002      	beq.n	8008da2 <__kernel_rem_pio2+0x592>
 8008d9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008da0:	4619      	mov	r1, r3
 8008da2:	9b01      	ldr	r3, [sp, #4]
 8008da4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008da8:	e7a5      	b.n	8008cf6 <__kernel_rem_pio2+0x4e6>
 8008daa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8008dae:	eb0d 0403 	add.w	r4, sp, r3
 8008db2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008db6:	2000      	movs	r0, #0
 8008db8:	2100      	movs	r1, #0
 8008dba:	2d00      	cmp	r5, #0
 8008dbc:	da09      	bge.n	8008dd2 <__kernel_rem_pio2+0x5c2>
 8008dbe:	f1bb 0f00 	cmp.w	fp, #0
 8008dc2:	d002      	beq.n	8008dca <__kernel_rem_pio2+0x5ba>
 8008dc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dc8:	4619      	mov	r1, r3
 8008dca:	9b01      	ldr	r3, [sp, #4]
 8008dcc:	e9c3 0100 	strd	r0, r1, [r3]
 8008dd0:	e791      	b.n	8008cf6 <__kernel_rem_pio2+0x4e6>
 8008dd2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008dd6:	f7f7 fa69 	bl	80002ac <__adddf3>
 8008dda:	3d01      	subs	r5, #1
 8008ddc:	e7ed      	b.n	8008dba <__kernel_rem_pio2+0x5aa>
 8008dde:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008de2:	f7f7 fa63 	bl	80002ac <__adddf3>
 8008de6:	3e01      	subs	r6, #1
 8008de8:	e7c0      	b.n	8008d6c <__kernel_rem_pio2+0x55c>
 8008dea:	4602      	mov	r2, r0
 8008dec:	460b      	mov	r3, r1
 8008dee:	e7c5      	b.n	8008d7c <__kernel_rem_pio2+0x56c>
 8008df0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008df4:	f7f7 fa5a 	bl	80002ac <__adddf3>
 8008df8:	3401      	adds	r4, #1
 8008dfa:	e7ca      	b.n	8008d92 <__kernel_rem_pio2+0x582>
 8008dfc:	e9da 8900 	ldrd	r8, r9, [sl]
 8008e00:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008e04:	9b02      	ldr	r3, [sp, #8]
 8008e06:	3b01      	subs	r3, #1
 8008e08:	9302      	str	r3, [sp, #8]
 8008e0a:	4632      	mov	r2, r6
 8008e0c:	463b      	mov	r3, r7
 8008e0e:	4640      	mov	r0, r8
 8008e10:	4649      	mov	r1, r9
 8008e12:	f7f7 fa4b 	bl	80002ac <__adddf3>
 8008e16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4640      	mov	r0, r8
 8008e20:	4649      	mov	r1, r9
 8008e22:	f7f7 fa41 	bl	80002a8 <__aeabi_dsub>
 8008e26:	4632      	mov	r2, r6
 8008e28:	463b      	mov	r3, r7
 8008e2a:	f7f7 fa3f 	bl	80002ac <__adddf3>
 8008e2e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008e32:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008e36:	ed8a 7b00 	vstr	d7, [sl]
 8008e3a:	e76e      	b.n	8008d1a <__kernel_rem_pio2+0x50a>
 8008e3c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008e40:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008e44:	4640      	mov	r0, r8
 8008e46:	4632      	mov	r2, r6
 8008e48:	463b      	mov	r3, r7
 8008e4a:	4649      	mov	r1, r9
 8008e4c:	f7f7 fa2e 	bl	80002ac <__adddf3>
 8008e50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	4640      	mov	r0, r8
 8008e5a:	4649      	mov	r1, r9
 8008e5c:	f7f7 fa24 	bl	80002a8 <__aeabi_dsub>
 8008e60:	4632      	mov	r2, r6
 8008e62:	463b      	mov	r3, r7
 8008e64:	f7f7 fa22 	bl	80002ac <__adddf3>
 8008e68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e6c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008e70:	ed84 7b00 	vstr	d7, [r4]
 8008e74:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e78:	e755      	b.n	8008d26 <__kernel_rem_pio2+0x516>
 8008e7a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008e7e:	f7f7 fa15 	bl	80002ac <__adddf3>
 8008e82:	3d01      	subs	r5, #1
 8008e84:	e759      	b.n	8008d3a <__kernel_rem_pio2+0x52a>
 8008e86:	9b01      	ldr	r3, [sp, #4]
 8008e88:	9a01      	ldr	r2, [sp, #4]
 8008e8a:	601d      	str	r5, [r3, #0]
 8008e8c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008e90:	605c      	str	r4, [r3, #4]
 8008e92:	609f      	str	r7, [r3, #8]
 8008e94:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008e98:	60d3      	str	r3, [r2, #12]
 8008e9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e9e:	6110      	str	r0, [r2, #16]
 8008ea0:	6153      	str	r3, [r2, #20]
 8008ea2:	e728      	b.n	8008cf6 <__kernel_rem_pio2+0x4e6>
 8008ea4:	41700000 	.word	0x41700000
 8008ea8:	3e700000 	.word	0x3e700000
 8008eac:	00000000 	.word	0x00000000

08008eb0 <__kernel_sin>:
 8008eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb4:	ed2d 8b04 	vpush	{d8-d9}
 8008eb8:	eeb0 8a41 	vmov.f32	s16, s2
 8008ebc:	eef0 8a61 	vmov.f32	s17, s3
 8008ec0:	ec55 4b10 	vmov	r4, r5, d0
 8008ec4:	b083      	sub	sp, #12
 8008ec6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008eca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008ece:	9001      	str	r0, [sp, #4]
 8008ed0:	da06      	bge.n	8008ee0 <__kernel_sin+0x30>
 8008ed2:	ee10 0a10 	vmov	r0, s0
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	f7f7 fe4e 	bl	8000b78 <__aeabi_d2iz>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d051      	beq.n	8008f84 <__kernel_sin+0xd4>
 8008ee0:	4622      	mov	r2, r4
 8008ee2:	462b      	mov	r3, r5
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	f7f7 fb96 	bl	8000618 <__aeabi_dmul>
 8008eec:	4682      	mov	sl, r0
 8008eee:	468b      	mov	fp, r1
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	4629      	mov	r1, r5
 8008ef8:	f7f7 fb8e 	bl	8000618 <__aeabi_dmul>
 8008efc:	a341      	add	r3, pc, #260	; (adr r3, 8009004 <__kernel_sin+0x154>)
 8008efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f02:	4680      	mov	r8, r0
 8008f04:	4689      	mov	r9, r1
 8008f06:	4650      	mov	r0, sl
 8008f08:	4659      	mov	r1, fp
 8008f0a:	f7f7 fb85 	bl	8000618 <__aeabi_dmul>
 8008f0e:	a33f      	add	r3, pc, #252	; (adr r3, 800900c <__kernel_sin+0x15c>)
 8008f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f14:	f7f7 f9c8 	bl	80002a8 <__aeabi_dsub>
 8008f18:	4652      	mov	r2, sl
 8008f1a:	465b      	mov	r3, fp
 8008f1c:	f7f7 fb7c 	bl	8000618 <__aeabi_dmul>
 8008f20:	a33c      	add	r3, pc, #240	; (adr r3, 8009014 <__kernel_sin+0x164>)
 8008f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f26:	f7f7 f9c1 	bl	80002ac <__adddf3>
 8008f2a:	4652      	mov	r2, sl
 8008f2c:	465b      	mov	r3, fp
 8008f2e:	f7f7 fb73 	bl	8000618 <__aeabi_dmul>
 8008f32:	a33a      	add	r3, pc, #232	; (adr r3, 800901c <__kernel_sin+0x16c>)
 8008f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f38:	f7f7 f9b6 	bl	80002a8 <__aeabi_dsub>
 8008f3c:	4652      	mov	r2, sl
 8008f3e:	465b      	mov	r3, fp
 8008f40:	f7f7 fb6a 	bl	8000618 <__aeabi_dmul>
 8008f44:	a337      	add	r3, pc, #220	; (adr r3, 8009024 <__kernel_sin+0x174>)
 8008f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4a:	f7f7 f9af 	bl	80002ac <__adddf3>
 8008f4e:	9b01      	ldr	r3, [sp, #4]
 8008f50:	4606      	mov	r6, r0
 8008f52:	460f      	mov	r7, r1
 8008f54:	b9eb      	cbnz	r3, 8008f92 <__kernel_sin+0xe2>
 8008f56:	4602      	mov	r2, r0
 8008f58:	460b      	mov	r3, r1
 8008f5a:	4650      	mov	r0, sl
 8008f5c:	4659      	mov	r1, fp
 8008f5e:	f7f7 fb5b 	bl	8000618 <__aeabi_dmul>
 8008f62:	a325      	add	r3, pc, #148	; (adr r3, 8008ff8 <__kernel_sin+0x148>)
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	f7f7 f99e 	bl	80002a8 <__aeabi_dsub>
 8008f6c:	4642      	mov	r2, r8
 8008f6e:	464b      	mov	r3, r9
 8008f70:	f7f7 fb52 	bl	8000618 <__aeabi_dmul>
 8008f74:	4602      	mov	r2, r0
 8008f76:	460b      	mov	r3, r1
 8008f78:	4620      	mov	r0, r4
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	f7f7 f996 	bl	80002ac <__adddf3>
 8008f80:	4604      	mov	r4, r0
 8008f82:	460d      	mov	r5, r1
 8008f84:	ec45 4b10 	vmov	d0, r4, r5
 8008f88:	b003      	add	sp, #12
 8008f8a:	ecbd 8b04 	vpop	{d8-d9}
 8008f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f92:	4b1b      	ldr	r3, [pc, #108]	; (8009000 <__kernel_sin+0x150>)
 8008f94:	ec51 0b18 	vmov	r0, r1, d8
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f7f7 fb3d 	bl	8000618 <__aeabi_dmul>
 8008f9e:	4632      	mov	r2, r6
 8008fa0:	ec41 0b19 	vmov	d9, r0, r1
 8008fa4:	463b      	mov	r3, r7
 8008fa6:	4640      	mov	r0, r8
 8008fa8:	4649      	mov	r1, r9
 8008faa:	f7f7 fb35 	bl	8000618 <__aeabi_dmul>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	ec51 0b19 	vmov	r0, r1, d9
 8008fb6:	f7f7 f977 	bl	80002a8 <__aeabi_dsub>
 8008fba:	4652      	mov	r2, sl
 8008fbc:	465b      	mov	r3, fp
 8008fbe:	f7f7 fb2b 	bl	8000618 <__aeabi_dmul>
 8008fc2:	ec53 2b18 	vmov	r2, r3, d8
 8008fc6:	f7f7 f96f 	bl	80002a8 <__aeabi_dsub>
 8008fca:	a30b      	add	r3, pc, #44	; (adr r3, 8008ff8 <__kernel_sin+0x148>)
 8008fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd0:	4606      	mov	r6, r0
 8008fd2:	460f      	mov	r7, r1
 8008fd4:	4640      	mov	r0, r8
 8008fd6:	4649      	mov	r1, r9
 8008fd8:	f7f7 fb1e 	bl	8000618 <__aeabi_dmul>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	4639      	mov	r1, r7
 8008fe4:	f7f7 f962 	bl	80002ac <__adddf3>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	460b      	mov	r3, r1
 8008fec:	4620      	mov	r0, r4
 8008fee:	4629      	mov	r1, r5
 8008ff0:	f7f7 f95a 	bl	80002a8 <__aeabi_dsub>
 8008ff4:	e7c4      	b.n	8008f80 <__kernel_sin+0xd0>
 8008ff6:	bf00      	nop
 8008ff8:	55555549 	.word	0x55555549
 8008ffc:	3fc55555 	.word	0x3fc55555
 8009000:	3fe00000 	.word	0x3fe00000
 8009004:	5acfd57c 	.word	0x5acfd57c
 8009008:	3de5d93a 	.word	0x3de5d93a
 800900c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009010:	3e5ae5e6 	.word	0x3e5ae5e6
 8009014:	57b1fe7d 	.word	0x57b1fe7d
 8009018:	3ec71de3 	.word	0x3ec71de3
 800901c:	19c161d5 	.word	0x19c161d5
 8009020:	3f2a01a0 	.word	0x3f2a01a0
 8009024:	1110f8a6 	.word	0x1110f8a6
 8009028:	3f811111 	.word	0x3f811111

0800902c <with_errno>:
 800902c:	b570      	push	{r4, r5, r6, lr}
 800902e:	4604      	mov	r4, r0
 8009030:	460d      	mov	r5, r1
 8009032:	4616      	mov	r6, r2
 8009034:	f7fb fa1c 	bl	8004470 <__errno>
 8009038:	4629      	mov	r1, r5
 800903a:	6006      	str	r6, [r0, #0]
 800903c:	4620      	mov	r0, r4
 800903e:	bd70      	pop	{r4, r5, r6, pc}

08009040 <xflow>:
 8009040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009042:	4614      	mov	r4, r2
 8009044:	461d      	mov	r5, r3
 8009046:	b108      	cbz	r0, 800904c <xflow+0xc>
 8009048:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800904c:	e9cd 2300 	strd	r2, r3, [sp]
 8009050:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009054:	4620      	mov	r0, r4
 8009056:	4629      	mov	r1, r5
 8009058:	f7f7 fade 	bl	8000618 <__aeabi_dmul>
 800905c:	2222      	movs	r2, #34	; 0x22
 800905e:	b003      	add	sp, #12
 8009060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009064:	f7ff bfe2 	b.w	800902c <with_errno>

08009068 <__math_uflow>:
 8009068:	b508      	push	{r3, lr}
 800906a:	2200      	movs	r2, #0
 800906c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009070:	f7ff ffe6 	bl	8009040 <xflow>
 8009074:	ec41 0b10 	vmov	d0, r0, r1
 8009078:	bd08      	pop	{r3, pc}

0800907a <__math_oflow>:
 800907a:	b508      	push	{r3, lr}
 800907c:	2200      	movs	r2, #0
 800907e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009082:	f7ff ffdd 	bl	8009040 <xflow>
 8009086:	ec41 0b10 	vmov	d0, r0, r1
 800908a:	bd08      	pop	{r3, pc}

0800908c <fabs>:
 800908c:	ec51 0b10 	vmov	r0, r1, d0
 8009090:	ee10 2a10 	vmov	r2, s0
 8009094:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009098:	ec43 2b10 	vmov	d0, r2, r3
 800909c:	4770      	bx	lr

0800909e <finite>:
 800909e:	b082      	sub	sp, #8
 80090a0:	ed8d 0b00 	vstr	d0, [sp]
 80090a4:	9801      	ldr	r0, [sp, #4]
 80090a6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80090aa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80090ae:	0fc0      	lsrs	r0, r0, #31
 80090b0:	b002      	add	sp, #8
 80090b2:	4770      	bx	lr
 80090b4:	0000      	movs	r0, r0
	...

080090b8 <floor>:
 80090b8:	ec51 0b10 	vmov	r0, r1, d0
 80090bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80090c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80090c8:	2e13      	cmp	r6, #19
 80090ca:	ee10 5a10 	vmov	r5, s0
 80090ce:	ee10 8a10 	vmov	r8, s0
 80090d2:	460c      	mov	r4, r1
 80090d4:	dc32      	bgt.n	800913c <floor+0x84>
 80090d6:	2e00      	cmp	r6, #0
 80090d8:	da14      	bge.n	8009104 <floor+0x4c>
 80090da:	a333      	add	r3, pc, #204	; (adr r3, 80091a8 <floor+0xf0>)
 80090dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e0:	f7f7 f8e4 	bl	80002ac <__adddf3>
 80090e4:	2200      	movs	r2, #0
 80090e6:	2300      	movs	r3, #0
 80090e8:	f7f7 fd26 	bl	8000b38 <__aeabi_dcmpgt>
 80090ec:	b138      	cbz	r0, 80090fe <floor+0x46>
 80090ee:	2c00      	cmp	r4, #0
 80090f0:	da57      	bge.n	80091a2 <floor+0xea>
 80090f2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80090f6:	431d      	orrs	r5, r3
 80090f8:	d001      	beq.n	80090fe <floor+0x46>
 80090fa:	4c2d      	ldr	r4, [pc, #180]	; (80091b0 <floor+0xf8>)
 80090fc:	2500      	movs	r5, #0
 80090fe:	4621      	mov	r1, r4
 8009100:	4628      	mov	r0, r5
 8009102:	e025      	b.n	8009150 <floor+0x98>
 8009104:	4f2b      	ldr	r7, [pc, #172]	; (80091b4 <floor+0xfc>)
 8009106:	4137      	asrs	r7, r6
 8009108:	ea01 0307 	and.w	r3, r1, r7
 800910c:	4303      	orrs	r3, r0
 800910e:	d01f      	beq.n	8009150 <floor+0x98>
 8009110:	a325      	add	r3, pc, #148	; (adr r3, 80091a8 <floor+0xf0>)
 8009112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009116:	f7f7 f8c9 	bl	80002ac <__adddf3>
 800911a:	2200      	movs	r2, #0
 800911c:	2300      	movs	r3, #0
 800911e:	f7f7 fd0b 	bl	8000b38 <__aeabi_dcmpgt>
 8009122:	2800      	cmp	r0, #0
 8009124:	d0eb      	beq.n	80090fe <floor+0x46>
 8009126:	2c00      	cmp	r4, #0
 8009128:	bfbe      	ittt	lt
 800912a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800912e:	fa43 f606 	asrlt.w	r6, r3, r6
 8009132:	19a4      	addlt	r4, r4, r6
 8009134:	ea24 0407 	bic.w	r4, r4, r7
 8009138:	2500      	movs	r5, #0
 800913a:	e7e0      	b.n	80090fe <floor+0x46>
 800913c:	2e33      	cmp	r6, #51	; 0x33
 800913e:	dd0b      	ble.n	8009158 <floor+0xa0>
 8009140:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009144:	d104      	bne.n	8009150 <floor+0x98>
 8009146:	ee10 2a10 	vmov	r2, s0
 800914a:	460b      	mov	r3, r1
 800914c:	f7f7 f8ae 	bl	80002ac <__adddf3>
 8009150:	ec41 0b10 	vmov	d0, r0, r1
 8009154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009158:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800915c:	f04f 33ff 	mov.w	r3, #4294967295
 8009160:	fa23 f707 	lsr.w	r7, r3, r7
 8009164:	4207      	tst	r7, r0
 8009166:	d0f3      	beq.n	8009150 <floor+0x98>
 8009168:	a30f      	add	r3, pc, #60	; (adr r3, 80091a8 <floor+0xf0>)
 800916a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916e:	f7f7 f89d 	bl	80002ac <__adddf3>
 8009172:	2200      	movs	r2, #0
 8009174:	2300      	movs	r3, #0
 8009176:	f7f7 fcdf 	bl	8000b38 <__aeabi_dcmpgt>
 800917a:	2800      	cmp	r0, #0
 800917c:	d0bf      	beq.n	80090fe <floor+0x46>
 800917e:	2c00      	cmp	r4, #0
 8009180:	da02      	bge.n	8009188 <floor+0xd0>
 8009182:	2e14      	cmp	r6, #20
 8009184:	d103      	bne.n	800918e <floor+0xd6>
 8009186:	3401      	adds	r4, #1
 8009188:	ea25 0507 	bic.w	r5, r5, r7
 800918c:	e7b7      	b.n	80090fe <floor+0x46>
 800918e:	2301      	movs	r3, #1
 8009190:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009194:	fa03 f606 	lsl.w	r6, r3, r6
 8009198:	4435      	add	r5, r6
 800919a:	4545      	cmp	r5, r8
 800919c:	bf38      	it	cc
 800919e:	18e4      	addcc	r4, r4, r3
 80091a0:	e7f2      	b.n	8009188 <floor+0xd0>
 80091a2:	2500      	movs	r5, #0
 80091a4:	462c      	mov	r4, r5
 80091a6:	e7aa      	b.n	80090fe <floor+0x46>
 80091a8:	8800759c 	.word	0x8800759c
 80091ac:	7e37e43c 	.word	0x7e37e43c
 80091b0:	bff00000 	.word	0xbff00000
 80091b4:	000fffff 	.word	0x000fffff

080091b8 <scalbn>:
 80091b8:	b570      	push	{r4, r5, r6, lr}
 80091ba:	ec55 4b10 	vmov	r4, r5, d0
 80091be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80091c2:	4606      	mov	r6, r0
 80091c4:	462b      	mov	r3, r5
 80091c6:	b99a      	cbnz	r2, 80091f0 <scalbn+0x38>
 80091c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80091cc:	4323      	orrs	r3, r4
 80091ce:	d036      	beq.n	800923e <scalbn+0x86>
 80091d0:	4b39      	ldr	r3, [pc, #228]	; (80092b8 <scalbn+0x100>)
 80091d2:	4629      	mov	r1, r5
 80091d4:	ee10 0a10 	vmov	r0, s0
 80091d8:	2200      	movs	r2, #0
 80091da:	f7f7 fa1d 	bl	8000618 <__aeabi_dmul>
 80091de:	4b37      	ldr	r3, [pc, #220]	; (80092bc <scalbn+0x104>)
 80091e0:	429e      	cmp	r6, r3
 80091e2:	4604      	mov	r4, r0
 80091e4:	460d      	mov	r5, r1
 80091e6:	da10      	bge.n	800920a <scalbn+0x52>
 80091e8:	a32b      	add	r3, pc, #172	; (adr r3, 8009298 <scalbn+0xe0>)
 80091ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ee:	e03a      	b.n	8009266 <scalbn+0xae>
 80091f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80091f4:	428a      	cmp	r2, r1
 80091f6:	d10c      	bne.n	8009212 <scalbn+0x5a>
 80091f8:	ee10 2a10 	vmov	r2, s0
 80091fc:	4620      	mov	r0, r4
 80091fe:	4629      	mov	r1, r5
 8009200:	f7f7 f854 	bl	80002ac <__adddf3>
 8009204:	4604      	mov	r4, r0
 8009206:	460d      	mov	r5, r1
 8009208:	e019      	b.n	800923e <scalbn+0x86>
 800920a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800920e:	460b      	mov	r3, r1
 8009210:	3a36      	subs	r2, #54	; 0x36
 8009212:	4432      	add	r2, r6
 8009214:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009218:	428a      	cmp	r2, r1
 800921a:	dd08      	ble.n	800922e <scalbn+0x76>
 800921c:	2d00      	cmp	r5, #0
 800921e:	a120      	add	r1, pc, #128	; (adr r1, 80092a0 <scalbn+0xe8>)
 8009220:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009224:	da1c      	bge.n	8009260 <scalbn+0xa8>
 8009226:	a120      	add	r1, pc, #128	; (adr r1, 80092a8 <scalbn+0xf0>)
 8009228:	e9d1 0100 	ldrd	r0, r1, [r1]
 800922c:	e018      	b.n	8009260 <scalbn+0xa8>
 800922e:	2a00      	cmp	r2, #0
 8009230:	dd08      	ble.n	8009244 <scalbn+0x8c>
 8009232:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009236:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800923a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800923e:	ec45 4b10 	vmov	d0, r4, r5
 8009242:	bd70      	pop	{r4, r5, r6, pc}
 8009244:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009248:	da19      	bge.n	800927e <scalbn+0xc6>
 800924a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800924e:	429e      	cmp	r6, r3
 8009250:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009254:	dd0a      	ble.n	800926c <scalbn+0xb4>
 8009256:	a112      	add	r1, pc, #72	; (adr r1, 80092a0 <scalbn+0xe8>)
 8009258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1e2      	bne.n	8009226 <scalbn+0x6e>
 8009260:	a30f      	add	r3, pc, #60	; (adr r3, 80092a0 <scalbn+0xe8>)
 8009262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009266:	f7f7 f9d7 	bl	8000618 <__aeabi_dmul>
 800926a:	e7cb      	b.n	8009204 <scalbn+0x4c>
 800926c:	a10a      	add	r1, pc, #40	; (adr r1, 8009298 <scalbn+0xe0>)
 800926e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d0b8      	beq.n	80091e8 <scalbn+0x30>
 8009276:	a10e      	add	r1, pc, #56	; (adr r1, 80092b0 <scalbn+0xf8>)
 8009278:	e9d1 0100 	ldrd	r0, r1, [r1]
 800927c:	e7b4      	b.n	80091e8 <scalbn+0x30>
 800927e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009282:	3236      	adds	r2, #54	; 0x36
 8009284:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009288:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800928c:	4620      	mov	r0, r4
 800928e:	4b0c      	ldr	r3, [pc, #48]	; (80092c0 <scalbn+0x108>)
 8009290:	2200      	movs	r2, #0
 8009292:	e7e8      	b.n	8009266 <scalbn+0xae>
 8009294:	f3af 8000 	nop.w
 8009298:	c2f8f359 	.word	0xc2f8f359
 800929c:	01a56e1f 	.word	0x01a56e1f
 80092a0:	8800759c 	.word	0x8800759c
 80092a4:	7e37e43c 	.word	0x7e37e43c
 80092a8:	8800759c 	.word	0x8800759c
 80092ac:	fe37e43c 	.word	0xfe37e43c
 80092b0:	c2f8f359 	.word	0xc2f8f359
 80092b4:	81a56e1f 	.word	0x81a56e1f
 80092b8:	43500000 	.word	0x43500000
 80092bc:	ffff3cb0 	.word	0xffff3cb0
 80092c0:	3c900000 	.word	0x3c900000

080092c4 <_init>:
 80092c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c6:	bf00      	nop
 80092c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ca:	bc08      	pop	{r3}
 80092cc:	469e      	mov	lr, r3
 80092ce:	4770      	bx	lr

080092d0 <_fini>:
 80092d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d2:	bf00      	nop
 80092d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092d6:	bc08      	pop	{r3}
 80092d8:	469e      	mov	lr, r3
 80092da:	4770      	bx	lr
